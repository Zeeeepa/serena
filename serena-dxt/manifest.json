{
  "dxt_version": "0.1",
  "name": "serena",
  "display_name": "Serena - Coding Agent Toolkit",
  "version": "0.1.4",
  "description": "A powerful coding agent toolkit providing semantic retrieval and editing capabilities",
  "long_description": "Serena is a comprehensive coding agent toolkit that provides essential semantic code retrieval and editing tools akin to an IDE's capabilities. It extracts code entities at the symbol level and exploits relational structure to enhance LLM efficiency. Features include file operations, symbol-based code navigation, memory management, shell command execution, and advanced code editing capabilities.",
  "author": {
    "name": "Oraios AI",
    "email": "info@oraios-ai.de",
    "url": "https://github.com/oraios/serena"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Zeeeepa/serena"
  },
  "homepage": "https://github.com/Zeeeepa/serena",
  "documentation": "https://github.com/Zeeeepa/serena/blob/main/README.md",
  "support": "https://github.com/Zeeeepa/serena/issues",
  "icon": "icon.png",
  "server": {
    "type": "python",
    "entry_point": "server/serena_mcp.py",
    "mcp_config": {
      "command": "python3",
      "args": [
        "${__dirname}/server/serena_mcp.py",
        "--project=${user_config.project_directory}",
        "--context=${user_config.context}",
        "--log-level=${user_config.log_level}",
        "--tool-timeout=${user_config.tool_timeout}"
      ],
      "env": {
        "PYTHONPATH": "${__dirname}/server/lib:${PYTHONPATH}",
        "SERENA_LOG_LEVEL": "${user_config.log_level}",
        "SERENA_PROJECT_DIR": "${user_config.project_directory}"
      }
    }
  },
  "tools": [
    {
      "name": "read_file_tool",
      "description": "Read files within the project directory with optional line ranges and content limits"
    },
    {
      "name": "create_text_file_tool", 
      "description": "Create or overwrite text files in the project directory"
    },
    {
      "name": "list_dir_tool",
      "description": "List directory contents with optional recursive scanning (respects .gitignore)"
    },
    {
      "name": "find_file_tool",
      "description": "Find files matching patterns using glob syntax within the project"
    },
    {
      "name": "replace_regex_tool",
      "description": "Replace text in files using regular expressions with match counting"
    },
    {
      "name": "delete_lines_tool",
      "description": "Delete specific line ranges from files"
    },
    {
      "name": "replace_lines_tool", 
      "description": "Replace specific line ranges in files with new content"
    },
    {
      "name": "insert_at_line_tool",
      "description": "Insert text at specific line positions in files"
    },
    {
      "name": "search_for_pattern_tool",
      "description": "Search for text patterns across project files with context"
    },
    {
      "name": "get_symbols_overview_tool",
      "description": "Get LSP-based overview of symbols (functions, classes, variables) in files"
    },
    {
      "name": "find_symbol_tool",
      "description": "Find symbol definitions using LSP with precise location information"
    },
    {
      "name": "find_referencing_symbols_tool",
      "description": "Find all references to symbols using LSP across the project"
    },
    {
      "name": "replace_symbol_body_tool",
      "description": "Replace function/method bodies using LSP-guided editing"
    },
    {
      "name": "insert_after_symbol_tool",
      "description": "Insert code after specific symbols using LSP positioning"
    },
    {
      "name": "insert_before_symbol_tool",
      "description": "Insert code before specific symbols using LSP positioning"
    },
    {
      "name": "restart_language_server_tool",
      "description": "Restart the LSP language server for improved symbol resolution"
    },
    {
      "name": "execute_shell_command_tool",
      "description": "Execute shell commands in the project directory with output capture"
    },
    {
      "name": "write_memory_tool",
      "description": "Store information in persistent agent memory with key-value pairs"
    },
    {
      "name": "read_memory_tool",
      "description": "Retrieve stored information from agent memory by key"
    },
    {
      "name": "list_memories_tool",
      "description": "List all stored memory entries with keys and metadata"
    },
    {
      "name": "delete_memory_tool",
      "description": "Delete specific memory entries by key"
    },
    {
      "name": "activate_project_tool",
      "description": "Activate a project directory for the current Serena session"
    },
    {
      "name": "get_current_config_tool",
      "description": "Get current Serena configuration including active tools and settings"
    },
    {
      "name": "switch_modes_tool",
      "description": "Switch between different Serena agent modes and tool sets"
    },
    {
      "name": "remove_project_tool",
      "description": "Remove a project from Serena's project registry"
    }
  ],
  "keywords": [
    "coding",
    "agent",
    "toolkit",
    "semantic",
    "retrieval",
    "editing",
    "symbols",
    "ide",
    "mcp",
    "python",
    "development"
  ],
  "license": "MIT",
  "user_config": {
    "project_directory": {
      "type": "directory",
      "title": "Project Directory",
      "description": "The root directory of your coding project that Serena will work with",
      "required": true
    },
    "context": {
      "type": "string",
      "title": "Context Configuration",
      "description": "Built-in context name or path to custom context YAML file",
      "default": "default",
      "required": false
    },
    "log_level": {
      "type": "string",
      "title": "Log Level",
      "description": "Set the logging verbosity level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
      "default": "INFO",
      "required": false
    },
    "tool_timeout": {
      "type": "number",
      "title": "Tool Timeout (seconds)",
      "description": "Maximum time to wait for tool execution",
      "default": 30,
      "min": 5,
      "max": 300,
      "required": false
    },
    "enable_web_dashboard": {
      "type": "boolean",
      "title": "Enable Web Dashboard",
      "description": "Enable the web-based dashboard for monitoring Serena",
      "default": false,
      "required": false
    },
    "enable_gui_log_window": {
      "type": "boolean",
      "title": "Enable GUI Log Window",
      "description": "Enable the GUI log window (may not work on all platforms)",
      "default": false,
      "required": false
    }
  },
  "compatibility": {
    "claude_desktop": ">=0.10.0",
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "python": ">=3.11,<3.12"
    }
  }
}

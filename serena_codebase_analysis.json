{
  "summary": {
    "total_modules": 78,
    "total_classes": 611,
    "total_functions": 42,
    "core_components": {
      "lsp_core": 35,
      "project_management": 5,
      "analysis_tools": 0,
      "configuration": 0,
      "utilities": 37,
      "exceptions": 1
    }
  },
  "core_components": {
    "lsp_core": [
      "solidlsp.ls_exceptions",
      "solidlsp.ls_utils",
      "solidlsp.ls",
      "solidlsp.ls_logger",
      "solidlsp.settings",
      "solidlsp.ls_handler",
      "solidlsp.ls_request",
      "solidlsp.ls_config",
      "solidlsp.ls_types",
      "solidlsp",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.lsp_protocol_handler.lsp_constants",
      "solidlsp.lsp_protocol_handler.lsp_requests",
      "solidlsp.util.zip",
      "solidlsp.language_servers.pyright_server",
      "solidlsp.language_servers.jedi_server",
      "solidlsp.language_servers.solargraph",
      "solidlsp.language_servers.clojure_lsp",
      "solidlsp.language_servers.bash_language_server",
      "solidlsp.language_servers.terraform_ls",
      "solidlsp.language_servers.typescript_language_server",
      "solidlsp.language_servers.omnisharp",
      "solidlsp.language_servers.dart_language_server",
      "solidlsp.language_servers.intelephense",
      "solidlsp.language_servers.common",
      "solidlsp.language_servers.clangd_language_server",
      "solidlsp.language_servers.rust_analyzer",
      "solidlsp.language_servers.gopls",
      "solidlsp.language_servers.vts_language_server",
      "solidlsp.language_servers.csharp_language_server",
      "solidlsp.language_servers.eclipse_jdtls",
      "solidlsp.language_servers.kotlin_language_server",
      "solidlsp.language_servers.elixir_tools.elixir_tools",
      "solidlsp.language_servers.elixir_tools"
    ],
    "project_management": [
      "serena.project",
      "serena.config",
      "serena.config.serena_config",
      "serena.config.context_mode",
      "serena.tools.config_tools"
    ],
    "analysis_tools": [],
    "configuration": [],
    "utilities": [
      "interprompt.jinja_template",
      "interprompt.prompt_factory",
      "interprompt.multilang_prompt",
      "interprompt",
      "serena.analytics",
      "serena.text_utils",
      "serena.agno",
      "serena.agent",
      "serena.cli",
      "serena.symbol",
      "serena.mcp",
      "serena.prompt_factory",
      "serena.dashboard",
      "serena.code_editor",
      "serena.gui_log_viewer",
      "serena",
      "serena.constants",
      "serena.util.logging",
      "serena.util.inspection",
      "serena.util.class_decorators",
      "serena.util.shell",
      "serena.util.general",
      "serena.util.file_system",
      "serena.util.thread",
      "serena.util.git",
      "serena.generated.generated_prompt_factory",
      "serena.tools.file_tools",
      "serena.tools.jetbrains_plugin_client",
      "serena.tools.workflow_tools",
      "serena.tools.tools_base",
      "serena.tools",
      "serena.tools.jetbrains_tools",
      "serena.tools.symbol_tools",
      "serena.tools.cmd_tools",
      "serena.tools.memory_tools",
      "interprompt.util",
      "interprompt.util.class_decorators"
    ],
    "exceptions": [
      "serena.util.exception"
    ]
  },
  "important_classes": [
    {
      "full_name": "solidlsp.ls_request.LanguageServerRequest",
      "class_info": {
        "name": "LanguageServerRequest",
        "module": "solidlsp.ls_request",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_request",
            "signature": "def __init__(self, handler: 'SolidLanguageServerHandler'):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "handler",
                "annotation": "'SolidLanguageServerHandler'",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 10
          },
          {
            "name": "_send_request",
            "module": "solidlsp.ls_request",
            "signature": "def _send_request(self, method: str, params: Any | None=None) -> Any:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "Any | None",
                "default": null
              }
            ],
            "return_annotation": "Any",
            "line_number": 13
          },
          {
            "name": "implementation",
            "module": "solidlsp.ls_request",
            "signature": "def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ImplementationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 16
          },
          {
            "name": "type_definition",
            "module": "solidlsp.ls_request",
            "signature": "def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeDefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 24
          },
          {
            "name": "document_color",
            "module": "solidlsp.ls_request",
            "signature": "def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
            "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentColorParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorInformation']",
            "line_number": 34
          },
          {
            "name": "color_presentation",
            "module": "solidlsp.ls_request",
            "signature": "def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
            "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ColorPresentationParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorPresentation']",
            "line_number": 42
          },
          {
            "name": "folding_range",
            "module": "solidlsp.ls_request",
            "signature": "def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
            "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.FoldingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.FoldingRange'] | None",
            "line_number": 50
          },
          {
            "name": "declaration",
            "module": "solidlsp.ls_request",
            "signature": "def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeclarationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
            "line_number": 58
          },
          {
            "name": "selection_range",
            "module": "solidlsp.ls_request",
            "signature": "def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
            "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SelectionRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SelectionRange'] | None",
            "line_number": 67
          },
          {
            "name": "prepare_call_hierarchy",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
            "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
            "line_number": 75
          },
          {
            "name": "incoming_calls",
            "module": "solidlsp.ls_request",
            "signature": "def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
            "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
            "line_number": 83
          },
          {
            "name": "outgoing_calls",
            "module": "solidlsp.ls_request",
            "signature": "def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
            "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
            "line_number": 90
          },
          {
            "name": "semantic_tokens_full",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 97
          },
          {
            "name": "semantic_tokens_delta",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensDeltaParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
            "line_number": 101
          },
          {
            "name": "semantic_tokens_range",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 107
          },
          {
            "name": "linked_editing_range",
            "module": "solidlsp.ls_request",
            "signature": "def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
            "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.LinkedEditingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
            "line_number": 111
          },
          {
            "name": "will_create_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 118
          },
          {
            "name": "will_rename_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 126
          },
          {
            "name": "will_delete_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 134
          },
          {
            "name": "moniker",
            "module": "solidlsp.ls_request",
            "signature": "def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
            "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.MonikerParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Moniker'] | None",
            "line_number": 142
          },
          {
            "name": "prepare_type_hierarchy",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 149
          },
          {
            "name": "type_hierarchy_supertypes",
            "module": "solidlsp.ls_request",
            "signature": "def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySupertypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 157
          },
          {
            "name": "type_hierarchy_subtypes",
            "module": "solidlsp.ls_request",
            "signature": "def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySubtypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 164
          },
          {
            "name": "inline_value",
            "module": "solidlsp.ls_request",
            "signature": "def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
            "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlineValueParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlineValue'] | None",
            "line_number": 171
          },
          {
            "name": "inlay_hint",
            "module": "solidlsp.ls_request",
            "signature": "def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
            "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHintParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlayHint'] | None",
            "line_number": 180
          },
          {
            "name": "resolve_inlay_hint",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
            "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHint",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InlayHint'",
            "line_number": 189
          },
          {
            "name": "text_document_diagnostic",
            "module": "solidlsp.ls_request",
            "signature": "def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
            "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
            "line_number": 198
          },
          {
            "name": "workspace_diagnostic",
            "module": "solidlsp.ls_request",
            "signature": "def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
            "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
            "line_number": 205
          },
          {
            "name": "initialize",
            "module": "solidlsp.ls_request",
            "signature": "def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
            "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializeParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InitializeResult'",
            "line_number": 212
          },
          {
            "name": "shutdown",
            "module": "solidlsp.ls_request",
            "signature": "def shutdown(self) -> None:",
            "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 221
          },
          {
            "name": "will_save_wait_until",
            "module": "solidlsp.ls_request",
            "signature": "def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 229
          },
          {
            "name": "completion",
            "module": "solidlsp.ls_request",
            "signature": "def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
            "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionParams",
                "default": null
              }
            ],
            "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
            "line_number": 239
          },
          {
            "name": "resolve_completion_item",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
            "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionItem",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CompletionItem'",
            "line_number": 252
          },
          {
            "name": "hover",
            "module": "solidlsp.ls_request",
            "signature": "def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
            "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.HoverParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Hover', None]",
            "line_number": 259
          },
          {
            "name": "signature_help",
            "module": "solidlsp.ls_request",
            "signature": "def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SignatureHelpParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SignatureHelp', None]",
            "line_number": 266
          },
          {
            "name": "definition",
            "module": "solidlsp.ls_request",
            "signature": "def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 269
          },
          {
            "name": "references",
            "module": "solidlsp.ls_request",
            "signature": "def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
            "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ReferenceParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Location'] | None",
            "line_number": 278
          },
          {
            "name": "document_highlight",
            "module": "solidlsp.ls_request",
            "signature": "def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
            "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentHighlightParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
            "line_number": 286
          },
          {
            "name": "document_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
            "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
            "line_number": 294
          },
          {
            "name": "code_action",
            "module": "solidlsp.ls_request",
            "signature": "def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
            "docstring": "A request to provide commands for the given text document and range.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeActionParams",
                "default": null
              }
            ],
            "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
            "line_number": 304
          },
          {
            "name": "resolve_code_action",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
            "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeAction",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeAction'",
            "line_number": 308
          },
          {
            "name": "workspace_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
            "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
            "line_number": 315
          },
          {
            "name": "resolve_workspace_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
            "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbol",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceSymbol'",
            "line_number": 329
          },
          {
            "name": "code_lens",
            "module": "solidlsp.ls_request",
            "signature": "def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
            "docstring": "A request to provide code lens for the given text document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLensParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CodeLens'] | None",
            "line_number": 337
          },
          {
            "name": "resolve_code_lens",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
            "docstring": "A request to resolve a command for a given code lens.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLens",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeLens'",
            "line_number": 341
          },
          {
            "name": "document_link",
            "module": "solidlsp.ls_request",
            "signature": "def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
            "docstring": "A request to provide document links",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLinkParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentLink'] | None",
            "line_number": 345
          },
          {
            "name": "resolve_document_link",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
            "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLink",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentLink'",
            "line_number": 349
          },
          {
            "name": "formatting",
            "module": "solidlsp.ls_request",
            "signature": "def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a whole document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 356
          },
          {
            "name": "range_formatting",
            "module": "solidlsp.ls_request",
            "signature": "def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a range in a document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentRangeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 360
          },
          {
            "name": "on_type_formatting",
            "module": "solidlsp.ls_request",
            "signature": "def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to format a document on type.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 364
          },
          {
            "name": "rename",
            "module": "solidlsp.ls_request",
            "signature": "def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "A request to rename a symbol.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 368
          },
          {
            "name": "prepare_rename",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
            "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.PrepareRenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
            "line_number": 372
          },
          {
            "name": "execute_command",
            "module": "solidlsp.ls_request",
            "signature": "def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
            "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ExecuteCommandParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LSPAny', None]",
            "line_number": 379
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 9,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 66
    },
    {
      "full_name": "solidlsp.ls.SolidLanguageServer",
      "class_info": {
        "name": "SolidLanguageServer",
        "module": "solidlsp.ls",
        "docstring": "The LanguageServer class provides a language agnostic interface to the Language Server Protocol.\nIt is used to communicate with Language Servers of different programming languages.",
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.ls",
            "signature": "def is_ignored_dirname(self, dirname: str) -> bool:",
            "docstring": "A language-specific condition for directories that should always be ignored. For example, venv\nin Python and node_modules in JS/TS should be ignored always.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 86
          },
          {
            "name": "ls_resources_dir",
            "module": "solidlsp.ls",
            "signature": "@classmethod",
            "docstring": "Returns the directory where the language server resources are downloaded.\nThis is used to store language server binaries, configuration files, etc.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              },
              {
                "name": "mkdir",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 94
          },
          {
            "name": "create",
            "module": "solidlsp.ls",
            "signature": "@classmethod",
            "docstring": "Creates a language specific LanguageServer instance based on the given configuration, and appropriate settings for the programming language.\n\nIf language is Java, then ensure that jdk-17.0.6 or higher is installed, `java` is in PATH, and JAVA_HOME is set to the installation directory.\nIf language is JS/TS, then ensure that node (v18.16.0 or higher) is installed and in PATH.\n\n:param repository_root_path: The root path of the repository.\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param timeout: the timeout for requests to the language server. If None, no timeout will be used.\n:return LanguageServer: A language specific LanguageServer instance.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings | None",
                "default": null
              }
            ],
            "return_annotation": "'SolidLanguageServer'",
            "line_number": 115
          },
          {
            "name": "__init__",
            "module": "solidlsp.ls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, process_launch_info: ProcessLaunchInfo, language_id: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Initializes a LanguageServer instance.\n\nDo not instantiate this class directly. Use `LanguageServer.create` method instead.\n\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param repository_root_path: The root path of the repository.\n:param process_launch_info: Each language server has a specific command used to start the server.\n            This parameter is the command to launch the language server process.\n            The command must pass appropriate flags to the binary, so that it runs in the stdio mode,\n            as opposed to HTTP, TCP modes supported by some language servers.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "process_launch_info",
                "annotation": "ProcessLaunchInfo",
                "default": null
              },
              {
                "name": "language_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 241
          },
          {
            "name": "set_request_timeout",
            "module": "solidlsp.ls",
            "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
            "docstring": ":param timeout: the timeout, in seconds, for requests to the language server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 320
          },
          {
            "name": "get_ignore_spec",
            "module": "solidlsp.ls",
            "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
            "docstring": "Returns the pathspec matcher for the paths that were configured to be ignored through\nthe multilspy config.\n\nThis is is a subset of the full language-specific ignore spec that determines\nwhich files are relevant for the language server.\n\nThis matcher is useful for operations outside of the language server,\nsuch as when searching for relevant non-language files in the project.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "pathspec.PathSpec",
            "line_number": 326
          },
          {
            "name": "is_ignored_path",
            "module": "solidlsp.ls",
            "signature": "def is_ignored_path(self, relative_path: str, ignore_unsupported_files: bool=True) -> bool:",
            "docstring": "Determine if a path should be ignored based on file type\nand ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_unsupported_files: whether files that are not supported source files should be ignored\n\n:return: True if the path should be ignored, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "ignore_unsupported_files",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 338
          },
          {
            "name": "_shutdown",
            "module": "solidlsp.ls",
            "signature": "def _shutdown(self, timeout: float=5.0):",
            "docstring": "A robust shutdown process designed to terminate cleanly on all platforms, including Windows,\nby explicitly closing all I/O pipes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 374
          },
          {
            "name": "start_server",
            "module": "solidlsp.ls",
            "signature": "@contextmanager",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Iterator['SolidLanguageServer']",
            "line_number": 431
          },
          {
            "name": "_start_server_process",
            "module": "solidlsp.ls",
            "signature": "def _start_server_process(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 436
          },
          {
            "name": "_start_server",
            "module": "solidlsp.ls",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 441
          },
          {
            "name": "open_file",
            "module": "solidlsp.ls",
            "signature": "@contextmanager",
            "docstring": "Open a file in the Language Server. This is required before making any requests to the Language Server.\n\n:param relative_file_path: The relative path of the file to open.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator[LSPFileBuffer]",
            "line_number": 445
          },
          {
            "name": "insert_text_at_position",
            "module": "solidlsp.ls",
            "signature": "def insert_text_at_position(self, relative_file_path: str, line: int, column: int, text_to_be_inserted: str) -> ls_types.Position:",
            "docstring": "Insert text at the given line and column in the given file and return\nthe updated cursor position after inserting the text.\n\n:param relative_file_path: The relative path of the file to open.\n:param line: The line number at which text should be inserted.\n:param column: The column number at which text should be inserted.\n:param text_to_be_inserted: The text to insert.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Position",
            "line_number": 497
          },
          {
            "name": "delete_text_between_positions",
            "module": "solidlsp.ls",
            "signature": "def delete_text_between_positions(self, relative_file_path: str, start: ls_types.Position, end: ls_types.Position) -> str:",
            "docstring": "Delete text between the given start and end positions in the given file and return the deleted text.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start",
                "annotation": "ls_types.Position",
                "default": null
              },
              {
                "name": "end",
                "annotation": "ls_types.Position",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 544
          },
          {
            "name": "_send_definition_request",
            "module": "solidlsp.ls",
            "signature": "def _send_definition_request(self, definition_params: DefinitionParams) -> Definition | list[LocationLink] | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "definition_params",
                "annotation": "DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Definition | list[LocationLink] | None",
            "line_number": 583
          },
          {
            "name": "request_definition",
            "module": "solidlsp.ls",
            "signature": "def request_definition(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
            "docstring": "Raise a [textDocument/definition](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_definition) request to the Language Server\nfor the symbol at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which definition should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.Location]: A list of locations where the symbol is defined",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Location]",
            "line_number": 586
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.ls",
            "signature": "def _send_references_request(self, relative_file_path: str, line: int, column: int) -> list[lsp_types.Location] | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[lsp_types.Location] | None",
            "line_number": 668
          },
          {
            "name": "request_references",
            "module": "solidlsp.ls",
            "signature": "def request_references(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
            "docstring": "Raise a [textDocument/references](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_references) request to the Language Server\nto find references to the symbol at the given line and column in the given file. Wait for the response and return the result.\nFilters out references located in ignored directories.\n\n:param relative_file_path: The relative path of the file that has the symbol for which references should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return: A list of locations where the symbol is referenced (excluding ignored directories)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Location]",
            "line_number": 677
          },
          {
            "name": "request_text_document_diagnostics",
            "module": "solidlsp.ls",
            "signature": "def request_text_document_diagnostics(self, relative_file_path: str) -> list[ls_types.Diagnostic]:",
            "docstring": "Raise a [textDocument/diagnostic](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_diagnostic) request to the Language Server\nto find diagnostics for the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file to retrieve diagnostics for\n\n:return: A list of diagnostics for the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Diagnostic]",
            "line_number": 739
          },
          {
            "name": "retrieve_full_file_content",
            "module": "solidlsp.ls",
            "signature": "def retrieve_full_file_content(self, file_path: str) -> str:",
            "docstring": "Retrieve the full content of the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 781
          },
          {
            "name": "retrieve_content_around_line",
            "module": "solidlsp.ls",
            "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
            "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "MatchedConsecutiveLines",
            "line_number": 790
          },
          {
            "name": "request_completions",
            "module": "solidlsp.ls",
            "signature": "def request_completions(self, relative_file_path: str, line: int, column: int, allow_incomplete: bool=False) -> list[ls_types.CompletionItem]:",
            "docstring": "Raise a [textDocument/completion](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_completion) request to the Language Server\nto find completions at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which completions should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.CompletionItem]: A list of completions",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "allow_incomplete",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.CompletionItem]",
            "line_number": 813
          },
          {
            "name": "request_document_symbols",
            "module": "solidlsp.ls",
            "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Raise a [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentSymbol) request to the Language Server\nto find symbols in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbols\n:param include_body: whether to include the body of the symbols in the result.\n:return: A list of symbols in the file, and a list of root symbols that represent the tree structure of the symbols.\n    All symbols will have a location, a children, and a parent attribute,\n    where the parent attribute is None for root symbols.\n    Note that this is slightly different from the call to request_full_symbol_tree,\n    where the parent attribute will be the file symbol which in turn may have a package symbol as parent.\n    If you need a symbol tree that contains file symbols as well, you should use `request_full_symbol_tree` instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 899
          },
          {
            "name": "request_full_symbol_tree",
            "module": "solidlsp.ls",
            "signature": "def request_full_symbol_tree(self, within_relative_path: str | None=None, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
            "docstring": "Will go through all files in the project or within a relative path and build a tree of symbols.\nNote: this may be slow the first time it is called, especially if `within_relative_path` is not used to restrict the search.\n\nFor each file, a symbol of kind File (2) will be created. For directories, a symbol of kind Package (4) will be created.\nAll symbols will have a children attribute, thereby representing the tree structure of all symbols in the project\nthat are within the repository.\nAll symbols except the root packages will have a parent attribute.\nWill ignore directories starting with '.', language-specific defaults\nand user-configured directories (e.g. from .gitignore).\n\n:param within_relative_path: pass a relative path to only consider symbols within this path.\n    If a file is passed, only the symbols within this file will be considered.\n    If a directory is passed, all files within this directory will be considered.\n:param include_body: whether to include the body of the symbols in the result.\n\n:return: A list of root symbols representing the top-level packages/modules in the project.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "within_relative_path",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
            "line_number": 1026
          },
          {
            "name": "_get_range_from_file_content",
            "module": "solidlsp.ls",
            "signature": "@staticmethod",
            "docstring": "Get the range for the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "file_content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Range",
            "line_number": 1154
          },
          {
            "name": "request_dir_overview",
            "module": "solidlsp.ls",
            "signature": "def request_dir_overview(self, relative_dir_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
            "docstring": "An overview of the given directory.\n\nMaps relative paths of all contained files to info about top-level symbols in the file\n(name, kind, line, column).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_dir_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
            "line_number": 1163
          },
          {
            "name": "request_document_overview",
            "module": "solidlsp.ls",
            "signature": "def request_document_overview(self, relative_file_path: str) -> list[tuple[str, ls_types.SymbolKind, int, int]]:",
            "docstring": "An overview of the given file.\nReturns the list of tuples (name, kind, line, column) of all top-level symbols in the file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[tuple[str, ls_types.SymbolKind, int, int]]",
            "line_number": 1199
          },
          {
            "name": "request_overview",
            "module": "solidlsp.ls",
            "signature": "def request_overview(self, within_relative_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
            "docstring": "An overview of all symbols in the given file or directory.\n\n:param within_relative_path: the relative path to the file or directory to get the overview of.\n:return: A mapping of all relative paths analyzed to lists of tuples (name, kind, line, column) of all top-level symbols in the corresponding file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "within_relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
            "line_number": 1215
          },
          {
            "name": "request_hover",
            "module": "solidlsp.ls",
            "signature": "def request_hover(self, relative_file_path: str, line: int, column: int) -> ls_types.Hover | None:",
            "docstring": "Raise a [textDocument/hover](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_hover) request to the Language Server\nto find the hover information at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the hover information\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return None",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Hover | None",
            "line_number": 1232
          },
          {
            "name": "retrieve_symbol_body",
            "module": "solidlsp.ls",
            "signature": "def retrieve_symbol_body(self, symbol: ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation) -> str:",
            "docstring": "Load the body of the given symbol. If the body is already contained in the symbol, just return it.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol",
                "annotation": "ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 1261
          },
          {
            "name": "request_referencing_symbols",
            "module": "solidlsp.ls",
            "signature": "def request_referencing_symbols(self, relative_file_path: str, line: int, column: int, include_imports: bool=True, include_self: bool=False, include_body: bool=False, include_file_symbols: bool=False) -> list[ReferenceInSymbol]:",
            "docstring": "Finds all symbols that reference the symbol at the given location.\nThis is similar to request_references but filters to only include symbols\n(functions, methods, classes, etc.) that reference the target symbol.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_imports: whether to also include imports as references.\n    Unfortunately, the LSP does not have an import type, so the references corresponding to imports\n    will not be easily distinguishable from definitions.\n:param include_self: whether to include the references that is the \"input symbol\" itself.\n    Only has an effect if the relative_file_path, line and column point to a symbol, for example a definition.\n:param include_body: whether to include the body of the symbols in the result.\n:param include_file_symbols: whether to include references that are file symbols. This\n    is often a fallback mechanism for when the reference cannot be resolved to a symbol.\n:return: List of objects containing the symbol and the location of the reference.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_imports",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_self",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_file_symbols",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ReferenceInSymbol]",
            "line_number": 1282
          },
          {
            "name": "request_containing_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_containing_symbol(self, relative_file_path: str, line: int, column: int | None=None, strict: bool=False, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the first symbol containing the position for the given file.\nFor Python, container symbols are considered to be those with kinds corresponding to\nfunctions, methods, or classes (typically: Function (12), Method (6), Class (5)).\n\nThe method operates as follows:\n  - Request the document symbols for the file.\n  - Filter symbols to those that start at or before the given line.\n  - From these, first look for symbols whose range contains the (line, column).\n  - If one or more symbols contain the position, return the one with the greatest starting position\n    (i.e. the innermost container).\n  - If none (strictly) contain the position, return the symbol with the greatest starting position\n    among those above the given line.\n  - If no container candidates are found, return None.\n\n:param relative_file_path: The relative path to the Python file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column (also called character). If not passed, the lookup will be based\n    only on the line.\n:param strict: If True, the position must be strictly within the range of the symbol.\n    Setting to True is useful for example for finding the parent of a symbol, as with strict=False,\n    and the line pointing to a symbol itself, the containing symbol will be the symbol itself\n    (and not the parent).\n:param include_body: Whether to include the body of the symbol in the result.\n:return: The container symbol (if found) or None.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int | None",
                "default": null
              },
              {
                "name": "strict",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1427
          },
          {
            "name": "request_container_of_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_container_of_symbol(self, symbol: ls_types.UnifiedSymbolInformation, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the container of the given symbol if there is one. If the parent attribute is present, the parent is returned\nwithout further searching.\n\n:param symbol: The symbol to find the container of.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The container of the given symbol or None if no container is found.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol",
                "annotation": "ls_types.UnifiedSymbolInformation",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1541
          },
          {
            "name": "request_defining_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_defining_symbol(self, relative_file_path: str, line: int, column: int, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the symbol that defines the symbol at the given location.\n\nThis method first finds the definition of the symbol at the given position,\nthen retrieves the full symbol information for that definition.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The symbol information for the definition, or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1563
          },
          {
            "name": "cache_path",
            "module": "solidlsp.ls",
            "signature": "@property",
            "docstring": "The path to the cache file for the document symbols.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 1606
          },
          {
            "name": "save_cache",
            "module": "solidlsp.ls",
            "signature": "def save_cache(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 1612
          },
          {
            "name": "load_cache",
            "module": "solidlsp.ls",
            "signature": "def load_cache(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 1631
          },
          {
            "name": "request_workspace_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_workspace_symbol(self, query: str) -> list[ls_types.UnifiedSymbolInformation] | None:",
            "docstring": "Raise a [workspace/symbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_symbol) request to the Language Server\nto find symbols across the whole workspace. Wait for the response and return the result.\n\n:param query: The query string to filter symbols by\n\n:return: A list of matching symbols",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "query",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation] | None",
            "line_number": 1649
          },
          {
            "name": "start",
            "module": "solidlsp.ls",
            "signature": "def start(self) -> 'SolidLanguageServer':",
            "docstring": "Starts the language server process and connects to it. Call shutdown when ready.\n\n:return: self for method chaining",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'SolidLanguageServer'",
            "line_number": 1676
          },
          {
            "name": "stop",
            "module": "solidlsp.ls",
            "signature": "def stop(self, shutdown_timeout: float=2.0) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "shutdown_timeout",
                "annotation": "float",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 1689
          },
          {
            "name": "language_server",
            "module": "solidlsp.ls",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 1693
          },
          {
            "name": "is_running",
            "module": "solidlsp.ls",
            "signature": "def is_running(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 1696
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 79,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 60
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_requests.LspRequest",
      "class_info": {
        "name": "LspRequest",
        "module": "solidlsp.lsp_protocol_handler.lsp_requests",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def __init__(self, send_request):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "send_request",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 38
          },
          {
            "name": "implementation",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ImplementationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 41
          },
          {
            "name": "type_definition",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeDefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 51
          },
          {
            "name": "document_color",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
            "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentColorParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorInformation']",
            "line_number": 61
          },
          {
            "name": "color_presentation",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
            "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ColorPresentationParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorPresentation']",
            "line_number": 69
          },
          {
            "name": "folding_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
            "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.FoldingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.FoldingRange'] | None",
            "line_number": 77
          },
          {
            "name": "declaration",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeclarationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
            "line_number": 85
          },
          {
            "name": "selection_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
            "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SelectionRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SelectionRange'] | None",
            "line_number": 96
          },
          {
            "name": "prepare_call_hierarchy",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
            "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
            "line_number": 104
          },
          {
            "name": "incoming_calls",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
            "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
            "line_number": 112
          },
          {
            "name": "outgoing_calls",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
            "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
            "line_number": 121
          },
          {
            "name": "semantic_tokens_full",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 130
          },
          {
            "name": "semantic_tokens_delta",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensDeltaParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
            "line_number": 134
          },
          {
            "name": "semantic_tokens_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 140
          },
          {
            "name": "linked_editing_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
            "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.LinkedEditingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
            "line_number": 144
          },
          {
            "name": "will_create_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 151
          },
          {
            "name": "will_rename_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 159
          },
          {
            "name": "will_delete_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 167
          },
          {
            "name": "moniker",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
            "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.MonikerParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Moniker'] | None",
            "line_number": 175
          },
          {
            "name": "prepare_type_hierarchy",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 182
          },
          {
            "name": "type_hierarchy_supertypes",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySupertypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 190
          },
          {
            "name": "type_hierarchy_subtypes",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySubtypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 199
          },
          {
            "name": "inline_value",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
            "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlineValueParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlineValue'] | None",
            "line_number": 206
          },
          {
            "name": "inlay_hint",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
            "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHintParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlayHint'] | None",
            "line_number": 215
          },
          {
            "name": "resolve_inlay_hint",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
            "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHint",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InlayHint'",
            "line_number": 224
          },
          {
            "name": "text_document_diagnostic",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
            "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
            "line_number": 233
          },
          {
            "name": "workspace_diagnostic",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
            "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
            "line_number": 240
          },
          {
            "name": "initialize",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
            "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializeParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InitializeResult'",
            "line_number": 247
          },
          {
            "name": "shutdown",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def shutdown(self) -> None:",
            "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 256
          },
          {
            "name": "will_save_wait_until",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 264
          },
          {
            "name": "completion",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
            "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionParams",
                "default": null
              }
            ],
            "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
            "line_number": 274
          },
          {
            "name": "resolve_completion_item",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
            "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionItem",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CompletionItem'",
            "line_number": 289
          },
          {
            "name": "hover",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
            "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.HoverParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Hover', None]",
            "line_number": 296
          },
          {
            "name": "signature_help",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
            "docstring": null,
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SignatureHelpParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SignatureHelp', None]",
            "line_number": 303
          },
          {
            "name": "definition",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 306
          },
          {
            "name": "references",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
            "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ReferenceParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Location'] | None",
            "line_number": 315
          },
          {
            "name": "document_highlight",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
            "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentHighlightParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
            "line_number": 323
          },
          {
            "name": "document_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
            "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
            "line_number": 331
          },
          {
            "name": "code_action",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
            "docstring": "A request to provide commands for the given text document and range.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeActionParams",
                "default": null
              }
            ],
            "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
            "line_number": 341
          },
          {
            "name": "resolve_code_action",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
            "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeAction",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeAction'",
            "line_number": 345
          },
          {
            "name": "workspace_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
            "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
            "line_number": 352
          },
          {
            "name": "resolve_workspace_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
            "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbol",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceSymbol'",
            "line_number": 366
          },
          {
            "name": "code_lens",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
            "docstring": "A request to provide code lens for the given text document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLensParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CodeLens'] | None",
            "line_number": 374
          },
          {
            "name": "resolve_code_lens",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
            "docstring": "A request to resolve a command for a given code lens.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLens",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeLens'",
            "line_number": 378
          },
          {
            "name": "document_link",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
            "docstring": "A request to provide document links",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLinkParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentLink'] | None",
            "line_number": 382
          },
          {
            "name": "resolve_document_link",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
            "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLink",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentLink'",
            "line_number": 386
          },
          {
            "name": "formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a whole document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 393
          },
          {
            "name": "range_formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a range in a document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentRangeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 397
          },
          {
            "name": "on_type_formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to format a document on type.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 401
          },
          {
            "name": "rename",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "A request to rename a symbol.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 405
          },
          {
            "name": "prepare_rename",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
            "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.PrepareRenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
            "line_number": 409
          },
          {
            "name": "execute_command",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
            "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ExecuteCommandParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LSPAny', None]",
            "line_number": 416
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 37,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 55
    },
    {
      "full_name": "serena.symbol.LanguageServerSymbol",
      "class_info": {
        "name": "LanguageServerSymbol",
        "module": "serena.symbol",
        "docstring": null,
        "bases": [
          "Symbol",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "match_name_path",
            "module": "serena.symbol",
            "signature": "@staticmethod",
            "docstring": "Checks if a given `name_path` matches a symbol's qualified name parts.\nSee docstring of `Symbol.find` for more details.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "symbol_name_path_parts",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "substring_matching",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 119
          },
          {
            "name": "__init__",
            "module": "serena.symbol",
            "signature": "def __init__(self, symbol_root_from_ls: UnifiedSymbolInformation) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol_root_from_ls",
                "annotation": "UnifiedSymbolInformation",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 154
          },
          {
            "name": "_tostring_includes",
            "module": "serena.symbol",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 157
          },
          {
            "name": "_tostring_additional_entries",
            "module": "serena.symbol",
            "signature": "def _tostring_additional_entries(self) -> dict[str, Any]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 160
          },
          {
            "name": "name",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 164
          },
          {
            "name": "kind",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 168
          },
          {
            "name": "symbol_kind",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SymbolKind",
            "line_number": 172
          },
          {
            "name": "is_neighbouring_definition_separated_by_empty_line",
            "module": "serena.symbol",
            "signature": "def is_neighbouring_definition_separated_by_empty_line(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 175
          },
          {
            "name": "relative_path",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 179
          },
          {
            "name": "location",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": ":return: the start location of the actual symbol identifier",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "LanguageServerSymbolLocation",
            "line_number": 186
          },
          {
            "name": "body_start_position",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Position | None",
            "line_number": 193
          },
          {
            "name": "body_end_position",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Position | None",
            "line_number": 204
          },
          {
            "name": "get_body_start_position",
            "module": "serena.symbol",
            "signature": "def get_body_start_position(self) -> PositionInFile | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 214
          },
          {
            "name": "get_body_end_position",
            "module": "serena.symbol",
            "signature": "def get_body_end_position(self) -> PositionInFile | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 220
          },
          {
            "name": "get_body_line_numbers",
            "module": "serena.symbol",
            "signature": "def get_body_line_numbers(self) -> tuple[int | None, int | None]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "tuple[int | None, int | None]",
            "line_number": 226
          },
          {
            "name": "line",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": ":return: the line in which the symbol identifier is defined.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int | None",
            "line_number": 234
          },
          {
            "name": "column",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int | None",
            "line_number": 245
          },
          {
            "name": "body",
            "module": "serena.symbol",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 253
          },
          {
            "name": "get_name_path",
            "module": "serena.symbol",
            "signature": "def get_name_path(self) -> str:",
            "docstring": "Get the name path of the symbol (e.g. \"class/method/inner_function\").",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 256
          },
          {
            "name": "get_name_path_parts",
            "module": "serena.symbol",
            "signature": "def get_name_path_parts(self) -> list[str]:",
            "docstring": "Get the parts of the name path of the symbol (e.g. [\"class\", \"method\", \"inner_function\"]).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 262
          },
          {
            "name": "iter_children",
            "module": "serena.symbol",
            "signature": "def iter_children(self) -> Iterator[Self]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Iterator[Self]",
            "line_number": 270
          },
          {
            "name": "iter_ancestors",
            "module": "serena.symbol",
            "signature": "def iter_ancestors(self, up_to_symbol_kind: SymbolKind | None=None) -> Iterator[Self]:",
            "docstring": "Iterate over all ancestors of the symbol, starting with the parent and going up to the root or\nthe given symbol kind.\n\n:param up_to_symbol_kind: if provided, iteration will stop *before* the first ancestor of the given kind.\n    A typical use case is to pass `SymbolKind.File` or `SymbolKind.Package`.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "up_to_symbol_kind",
                "annotation": "SymbolKind | None",
                "default": null
              }
            ],
            "return_annotation": "Iterator[Self]",
            "line_number": 274
          },
          {
            "name": "get_parent",
            "module": "serena.symbol",
            "signature": "def get_parent(self) -> Self | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self | None",
            "line_number": 288
          },
          {
            "name": "find",
            "module": "serena.symbol",
            "signature": "def find(self, name_path: str, substring_matching: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[Self]:",
            "docstring": "Find all symbols within the symbol's subtree that match the given `name_path`.\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path).\n\nKey aspects of the name path matching behavior:\n- Trailing slashes in `name_path` play no role and are ignored.\n- The name of the retrieved symbols will match (either exactly or as a substring)\n  the last segment of `name_path`, while other segments will restrict the search to symbols that\n  have a desired sequence of ancestors.\n- If there is no starting or intermediate slash in `name_path`, there is no\n  restriction on the ancestor symbols. For example, passing `method` will match\n  against symbols with name paths like `method`, `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains a `/` but doesn't start with a `/`, the matching is restricted to symbols\n  with the same ancestors as the last segment of `name_path`. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, meaning\n  that the first segment of it must match the first segment of the symbol's name path.\n  For example, passing `/class` will match only against top-level symbols like `class` but not against `nested_class/class`.\n  Passing `/class/method` will match against `class/method` but not `nested_class/class/method` or `method`.\n\n:param name_path: the name path to match against\n:param substring_matching: whether to use substring matching (as opposed to exact matching)\n    of the last segment of `name_path` against the symbol name.\n:param include_kinds: an optional sequence of ints representing the LSP symbol kind.\n    If provided, only symbols of the given kinds will be included in the result.\n:param exclude_kinds: If provided, symbols of the given kinds will be excluded from the result.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "substring_matching",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              }
            ],
            "return_annotation": "list[Self]",
            "line_number": 294
          },
          {
            "name": "to_dict",
            "module": "serena.symbol",
            "signature": "def to_dict(self, kind: bool=False, location: bool=False, depth: int=0, include_body: bool=False, include_children_body: bool=False, include_relative_path: bool=True) -> dict[str, Any]:",
            "docstring": "Converts the symbol to a dictionary.\n\n:param kind: whether to include the kind of the symbol\n:param location: whether to include the location of the symbol\n:param depth: the depth of the symbol\n:param include_body: whether to include the body of the top-level symbol.\n:param include_children_body: whether to also include the body of the children.\n    Note that the body of the children is part of the body of the parent symbol,\n    so there is usually no need to set this to True unless you want process the output\n    and pass the children without passing the parent body to the LM.\n:param include_relative_path: whether to include the relative path of the symbol in the location\n    entry. Relative paths of the symbol's children are always excluded.\n:return: a dictionary representation of the symbol",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "kind",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "location",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "depth",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_children_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_relative_path",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 352
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 115,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 43
    },
    {
      "full_name": "solidlsp.ls_handler.SolidLanguageServerHandler",
      "class_info": {
        "name": "SolidLanguageServerHandler",
        "module": "solidlsp.ls_handler",
        "docstring": "This class provides the implementation of Python client for the Language Server Protocol.\nA class that launches the language server and communicates with it\nusing the Language Server Protocol (LSP).\n\nIt provides methods for sending requests, responses, and notifications to the server\nand for registering handlers for requests and notifications from the server.\n\nUses JSON-RPC 2.0 for communication with the server over stdin/stdout.\n\nAttributes:\n    send: A LspRequest object that can be used to send requests to the server and\n        await for the responses.\n    notify: A LspNotification object that can be used to send notifications to the server.\n    cmd: A string that represents the command to launch the language server process.\n    process: A subprocess.Popen object that represents the language server process.\n    request_id: An integer that represents the next available request id for the client.\n    _pending_requests: A dictionary that maps request ids to Request objects that\n        store the results or errors of the requests.\n    on_request_handlers: A dictionary that maps method names to callback functions\n        that handle requests from the server.\n    on_notification_handlers: A dictionary that maps method names to callback functions\n        that handle notifications from the server.\n    logger: An optional function that takes two strings (source and destination) and\n        a payload dictionary, and logs the communication between the client and the server.\n    tasks: A dictionary that maps task ids to asyncio.Task objects that represent\n        the asynchronous tasks created by the handler.\n    task_counter: An integer that represents the next available task id for the handler.\n    loop: An asyncio.AbstractEventLoop object that represents the event loop used by the handler.\n    start_independent_lsp_process: An optional boolean flag that indicates whether to start the\n    language server process in an independent process group. Default is `True`. Setting it to\n    `False` means that the language server process will be in the same process group as the\n    the current process, and any SIGINT and SIGTERM signals will be sent to both processes.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, process_launch_info: ProcessLaunchInfo, logger: Callable[[str, str, StringDict | str], None] | None=None, start_independent_lsp_process=True, request_timeout: float | None=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process_launch_info",
                "annotation": "ProcessLaunchInfo",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "Callable[[str, str, StringDict | str], None] | None",
                "default": null
              },
              {
                "name": "start_independent_lsp_process",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 126
          },
          {
            "name": "set_request_timeout",
            "module": "solidlsp.ls_handler",
            "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
            "docstring": ":param timeout: the timeout, in seconds, for all requests sent to the language server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 157
          },
          {
            "name": "is_running",
            "module": "solidlsp.ls_handler",
            "signature": "def is_running(self) -> bool:",
            "docstring": "Checks if the language server process is currently running.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 163
          },
          {
            "name": "start",
            "module": "solidlsp.ls_handler",
            "signature": "def start(self) -> None:",
            "docstring": "Starts the language server process and creates a task to continuously read from its stdout to handle communications\nfrom the server to the client",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 169
          },
          {
            "name": "stop",
            "module": "solidlsp.ls_handler",
            "signature": "def stop(self) -> None:",
            "docstring": "Sends the terminate signal to the language server process and waits for it to exit, with a timeout, killing it if necessary",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 215
          },
          {
            "name": "_cleanup_process",
            "module": "solidlsp.ls_handler",
            "signature": "def _cleanup_process(self, process):",
            "docstring": "Clean up a process: close stdin, terminate/kill process, close stdout/stderr.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 224
          },
          {
            "name": "_safely_close_pipe",
            "module": "solidlsp.ls_handler",
            "signature": "def _safely_close_pipe(self, pipe):",
            "docstring": "Safely close a pipe, ignoring any exceptions.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "pipe",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 241
          },
          {
            "name": "_terminate_or_kill_process",
            "module": "solidlsp.ls_handler",
            "signature": "def _terminate_or_kill_process(self, process):",
            "docstring": "Try to terminate the process gracefully, then forcefully if necessary.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 249
          },
          {
            "name": "_signal_process_tree",
            "module": "solidlsp.ls_handler",
            "signature": "def _signal_process_tree(self, process, terminate=True):",
            "docstring": "Send signal (terminate or kill) to the process and all its children.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              },
              {
                "name": "terminate",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 254
          },
          {
            "name": "shutdown",
            "module": "solidlsp.ls_handler",
            "signature": "def shutdown(self) -> None:",
            "docstring": "Perform the shutdown sequence for the client, including sending the shutdown request to the server and notifying it of exit",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 286
          },
          {
            "name": "_log",
            "module": "solidlsp.ls_handler",
            "signature": "def _log(self, message: str | StringDict) -> None:",
            "docstring": "Create a log message",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str | StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 298
          },
          {
            "name": "_read_bytes_from_process",
            "module": "solidlsp.ls_handler",
            "signature": "@staticmethod",
            "docstring": "Read exactly num_bytes from process stdout",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "process",
                "annotation": null,
                "default": null
              },
              {
                "name": "stream",
                "annotation": null,
                "default": null
              },
              {
                "name": "num_bytes",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 306
          },
          {
            "name": "_read_ls_process_stdout",
            "module": "solidlsp.ls_handler",
            "signature": "def _read_ls_process_stdout(self) -> None:",
            "docstring": "Continuously read from the language server process stdout and handle the messages\ninvoking the registered response and notification handlers",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 322
          },
          {
            "name": "_read_ls_process_stderr",
            "module": "solidlsp.ls_handler",
            "signature": "def _read_ls_process_stderr(self) -> None:",
            "docstring": "Continuously read from the language server process stderr and log the messages",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 361
          },
          {
            "name": "_handle_body",
            "module": "solidlsp.ls_handler",
            "signature": "def _handle_body(self, body: bytes) -> None:",
            "docstring": "Parse the body text received from the language server process and invoke the appropriate handler",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "body",
                "annotation": "bytes",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 387
          },
          {
            "name": "_receive_payload",
            "module": "solidlsp.ls_handler",
            "signature": "def _receive_payload(self, payload: StringDict) -> None:",
            "docstring": "Determine if the payload received from server is for a request, response, or notification and invoke the appropriate handler",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 400
          },
          {
            "name": "send_notification",
            "module": "solidlsp.ls_handler",
            "signature": "def send_notification(self, method: str, params: dict | None=None) -> None:",
            "docstring": "Send notification pertaining to the given method to the server with the given parameters",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 419
          },
          {
            "name": "send_response",
            "module": "solidlsp.ls_handler",
            "signature": "def send_response(self, request_id: Any, params: PayloadLike) -> None:",
            "docstring": "Send response to the given request id to the server with the given parameters",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "params",
                "annotation": "PayloadLike",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 425
          },
          {
            "name": "send_error_response",
            "module": "solidlsp.ls_handler",
            "signature": "def send_error_response(self, request_id: Any, err: LSPError) -> None:",
            "docstring": "Send error response to the given request id to the server with the given error",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "err",
                "annotation": "LSPError",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 431
          },
          {
            "name": "_cancel_pending_requests",
            "module": "solidlsp.ls_handler",
            "signature": "def _cancel_pending_requests(self, exception: Exception) -> None:",
            "docstring": "Cancel all pending requests by setting their results to an error",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exception",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 438
          },
          {
            "name": "send_request",
            "module": "solidlsp.ls_handler",
            "signature": "def send_request(self, method: str, params: dict | None=None) -> PayloadLike:",
            "docstring": "Send request to the server, register the request id, and wait for the response",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict | None",
                "default": null
              }
            ],
            "return_annotation": "PayloadLike",
            "line_number": 449
          },
          {
            "name": "_send_payload",
            "module": "solidlsp.ls_handler",
            "signature": "def _send_payload(self, payload: StringDict) -> None:",
            "docstring": "Send the payload to the server by writing to its stdin asynchronously.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 476
          },
          {
            "name": "on_request",
            "module": "solidlsp.ls_handler",
            "signature": "def on_request(self, method: str, cb) -> None:",
            "docstring": "Register the callback function to handle requests from the server to the client for the given method",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cb",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 496
          },
          {
            "name": "on_notification",
            "module": "solidlsp.ls_handler",
            "signature": "def on_notification(self, method: str, cb) -> None:",
            "docstring": "Register the callback function to handle notifications from the server to the client for the given method",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cb",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 502
          },
          {
            "name": "_response_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _response_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the response received from the server for a request, using the id to determine the request",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 508
          },
          {
            "name": "_request_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _request_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the request received from the server: call the appropriate callback function and return the result",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 522
          },
          {
            "name": "_notification_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _notification_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the notification received from the server: call the appropriate callback function",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 546
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 89,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 40
    },
    {
      "full_name": "serena.agent.SerenaAgent",
      "class_info": {
        "name": "SerenaAgent",
        "module": "serena.agent",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.agent",
            "signature": "def __init__(self, project: str | None=None, project_activation_callback: Callable[[], None] | None=None, serena_config: SerenaConfig | None=None, context: SerenaAgentContext | None=None, modes: list[SerenaAgentMode] | None=None, memory_log_handler: MemoryLogHandler | None=None):",
            "docstring": ":param project: the project to load immediately or None to not load any project; may be a path to the project or a name of\n    an already registered project;\n:param project_activation_callback: a callback function to be called when a project is activated.\n:param serena_config: the Serena configuration or None to read the configuration from the default location.\n:param context: the context in which the agent is operating, None for default context.\n    The context may adjust prompts, tool availability, and tool descriptions.\n:param modes: list of modes in which the agent is operating (they will be combined), None for default modes.\n    The modes may adjust prompts, tool availability, and tool descriptions.\n:param memory_log_handler: a MemoryLogHandler instance from which to read log messages; if None, a new one will be created\n    if necessary.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "project_activation_callback",
                "annotation": "Callable[[], None] | None",
                "default": null
              },
              {
                "name": "serena_config",
                "annotation": "SerenaConfig | None",
                "default": null
              },
              {
                "name": "context",
                "annotation": "SerenaAgentContext | None",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[SerenaAgentMode] | None",
                "default": null
              },
              {
                "name": "memory_log_handler",
                "annotation": "MemoryLogHandler | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 114
          },
          {
            "name": "get_context",
            "module": "serena.agent",
            "signature": "def get_context(self) -> SerenaAgentContext:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SerenaAgentContext",
            "line_number": 249
          },
          {
            "name": "get_tool_description_override",
            "module": "serena.agent",
            "signature": "def get_tool_description_override(self, tool_name: str) -> str | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 252
          },
          {
            "name": "_check_shell_settings",
            "module": "serena.agent",
            "signature": "def _check_shell_settings(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 255
          },
          {
            "name": "_ide_context_tool_inclusion_definitions",
            "module": "serena.agent",
            "signature": "def _ide_context_tool_inclusion_definitions(self, project_root_or_name: str | None) -> list[ToolInclusionDefinition]:",
            "docstring": "In the IDE assistant context, the agent is assumed to work on a single project, and we thus\nwant to apply that project's tool exclusions/inclusions from the get-go, limiting the set\nof tools that will be exposed to the client.\nSo if the project exists, we apply all the aforementioned exclusions.\n\n:param project_root_or_name: the project root path or project name\n:return:",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root_or_name",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "list[ToolInclusionDefinition]",
            "line_number": 265
          },
          {
            "name": "record_tool_usage_if_enabled",
            "module": "serena.agent",
            "signature": "def record_tool_usage_if_enabled(self, input_kwargs: dict, tool_result: str | dict, tool: Tool) -> None:",
            "docstring": "Record the usage of a tool with the given input and output strings if tool usage statistics recording is enabled.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "input_kwargs",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "tool_result",
                "annotation": "str | dict",
                "default": null
              },
              {
                "name": "tool",
                "annotation": "Tool",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 286
          },
          {
            "name": "_open_dashboard",
            "module": "serena.agent",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "url",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 300
          },
          {
            "name": "get_project_root",
            "module": "serena.agent",
            "signature": "def get_project_root(self) -> str:",
            "docstring": ":return: the root directory of the active project (if any); raises a ValueError if there is no active project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 311
          },
          {
            "name": "get_exposed_tool_instances",
            "module": "serena.agent",
            "signature": "def get_exposed_tool_instances(self) -> list['Tool']:",
            "docstring": ":return: the tool instances which are exposed (e.g. to the MCP client).\n    Note that the set of exposed tools is fixed for the session, as\n    clients don't react to changes in the set of tools, so this is the superset\n    of tools that can be offered during the session.\n    If a client should attempt to use a tool that is dynamically disabled\n    (e.g. because a project is activated that disables it), it will receive an error.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list['Tool']",
            "line_number": 320
          },
          {
            "name": "get_active_project",
            "module": "serena.agent",
            "signature": "def get_active_project(self) -> Project | None:",
            "docstring": ":return: the active project or None if no project is active",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Project | None",
            "line_number": 331
          },
          {
            "name": "get_active_project_or_raise",
            "module": "serena.agent",
            "signature": "def get_active_project_or_raise(self) -> Project:",
            "docstring": ":return: the active project or raises an exception if no project is active",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Project",
            "line_number": 337
          },
          {
            "name": "set_modes",
            "module": "serena.agent",
            "signature": "def set_modes(self, modes: list[SerenaAgentMode]) -> None:",
            "docstring": "Set the current mode configurations.\n\n:param modes: List of mode names or paths to use",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[SerenaAgentMode]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 346
          },
          {
            "name": "get_active_modes",
            "module": "serena.agent",
            "signature": "def get_active_modes(self) -> list[SerenaAgentMode]:",
            "docstring": ":return: the list of active modes",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[SerenaAgentMode]",
            "line_number": 357
          },
          {
            "name": "_format_prompt",
            "module": "serena.agent",
            "signature": "def _format_prompt(self, prompt_template: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_template",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 363
          },
          {
            "name": "create_system_prompt",
            "module": "serena.agent",
            "signature": "def create_system_prompt(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 367
          },
          {
            "name": "_update_active_tools",
            "module": "serena.agent",
            "signature": "def _update_active_tools(self) -> None:",
            "docstring": "Update the active tools based on enabled modes and the active project.\nThe base tool set already takes the Serena configuration and the context into account\n(as well as any internal modes that are not handled dynamically, such as JetBrains mode).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 379
          },
          {
            "name": "issue_task",
            "module": "serena.agent",
            "signature": "def issue_task(self, task: Callable[[], Any], name: str | None=None) -> Future:",
            "docstring": "Issue a task to the executor for asynchronous execution.\nIt is ensured that tasks are executed in the order they are issued, one after another.\n\n:param task: the task to execute\n:param name: the name of the task for logging purposes; if None, use the task function's name\n:return: a Future object representing the execution of the task",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task",
                "annotation": "Callable[[], Any]",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "Future",
            "line_number": 399
          },
          {
            "name": "execute_task",
            "module": "serena.agent",
            "signature": "def execute_task(self, task: Callable[[], T]) -> T:",
            "docstring": "Executes the given task synchronously via the agent's task executor.\nThis is useful for tasks that need to be executed immediately and whose results are needed right away.\n\n:param task: the task to execute\n:return: the result of the task execution",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "task",
                "annotation": "Callable[[], T]",
                "default": null
              }
            ],
            "return_annotation": "T",
            "line_number": 419
          },
          {
            "name": "is_using_language_server",
            "module": "serena.agent",
            "signature": "def is_using_language_server(self) -> bool:",
            "docstring": ":return: whether this agent uses language server-based code analysis",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 430
          },
          {
            "name": "_activate_project",
            "module": "serena.agent",
            "signature": "def _activate_project(self, project: Project) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "Project",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 436
          },
          {
            "name": "load_project_from_path_or_name",
            "module": "serena.agent",
            "signature": "def load_project_from_path_or_name(self, project_root_or_name: str, autogenerate: bool) -> Project | None:",
            "docstring": "Get a project instance from a path or a name.\n\n:param project_root_or_name: the path to the project root or the name of the project\n:param autogenerate: whether to autogenerate the project for the case where first argument is a directory\n    which does not yet contain a Serena project configuration file\n:return: the project instance if it was found/could be created, None otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root_or_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "autogenerate",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Project | None",
            "line_number": 458
          },
          {
            "name": "activate_project_from_path_or_name",
            "module": "serena.agent",
            "signature": "def activate_project_from_path_or_name(self, project_root_or_name: str) -> Project:",
            "docstring": "Activate a project from a path or a name.\nIf the project was already registered, it will just be activated.\nIf the argument is a path at which no Serena project previously existed, the project will be created beforehand.\nRaises ProjectNotFoundError if the project could neither be found nor created.\n\n:return: a tuple of the project instance and a Boolean indicating whether the project was newly\n    created",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root_or_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Project",
            "line_number": 475
          },
          {
            "name": "get_active_tool_classes",
            "module": "serena.agent",
            "signature": "def get_active_tool_classes(self) -> list[type['Tool']]:",
            "docstring": ":return: the list of active tool classes for the current project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[type['Tool']]",
            "line_number": 494
          },
          {
            "name": "get_active_tool_names",
            "module": "serena.agent",
            "signature": "def get_active_tool_names(self) -> list[str]:",
            "docstring": ":return: the list of names of the active tools for the current project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 500
          },
          {
            "name": "tool_is_active",
            "module": "serena.agent",
            "signature": "def tool_is_active(self, tool_class: type['Tool'] | str) -> bool:",
            "docstring": ":param tool_class: the class or name of the tool to check\n:return: True if the tool is active, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_class",
                "annotation": "type['Tool'] | str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 506
          },
          {
            "name": "get_current_config_overview",
            "module": "serena.agent",
            "signature": "def get_current_config_overview(self) -> str:",
            "docstring": ":return: a string overview of the current configuration, including the active and available configuration options",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 516
          },
          {
            "name": "is_language_server_running",
            "module": "serena.agent",
            "signature": "def is_language_server_running(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 560
          },
          {
            "name": "reset_language_server",
            "module": "serena.agent",
            "signature": "def reset_language_server(self) -> None:",
            "docstring": "Starts/resets the language server for the current project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 563
          },
          {
            "name": "get_tool",
            "module": "serena.agent",
            "signature": "def get_tool(self, tool_class: type[TTool]) -> TTool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_class",
                "annotation": "type[TTool]",
                "default": null
              }
            ],
            "return_annotation": "TTool",
            "line_number": 596
          },
          {
            "name": "print_tool_overview",
            "module": "serena.agent",
            "signature": "def print_tool_overview(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 599
          },
          {
            "name": "mark_file_modified",
            "module": "serena.agent",
            "signature": "def mark_file_modified(self, relativ_path: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relativ_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 602
          },
          {
            "name": "__del__",
            "module": "serena.agent",
            "signature": "def __del__(self) -> None:",
            "docstring": "Destructor to clean up the language server instance and GUI logger",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 606
          },
          {
            "name": "get_tool_by_name",
            "module": "serena.agent",
            "signature": "def get_tool_by_name(self, tool_name: str) -> Tool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Tool",
            "line_number": 622
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 113,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 36
    },
    {
      "full_name": "solidlsp.language_servers.csharp_language_server.CSharpLanguageServer",
      "class_info": {
        "name": "CSharpLanguageServer",
        "module": "solidlsp.language_servers.csharp_language_server",
        "docstring": "Provides C# specific instantiation of the LanguageServer class using Microsoft.CodeAnalysis.LanguageServer.\nThis is the official Roslyn-based language server from Microsoft.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a CSharpLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 179
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 218
          },
          {
            "name": "_ensure_server_installed",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET runtime and Microsoft.CodeAnalysis.LanguageServer are available.\nReturns a tuple of (dotnet_path, language_server_dll_path).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 222
          },
          {
            "name": "_get_runtime_id",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Determine the runtime ID based on the platform.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": "str",
            "line_number": 237
          },
          {
            "name": "_get_runtime_dependencies",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Get the language server and .NET runtime dependencies for the platform.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "runtime_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[RuntimeDependency, RuntimeDependency]",
            "line_number": 252
          },
          {
            "name": "_ensure_dotnet_runtime",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET runtime is available and return the dotnet executable path.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "runtime_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 271
          },
          {
            "name": "_ensure_language_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure language server is available and return the DLL path.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "lang_server_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 291
          },
          {
            "name": "_extract_language_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Extract language server files from downloaded package.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "lang_server_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "package_path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "server_dir",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 323
          },
          {
            "name": "_download_nuget_package_direct",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Download a NuGet package directly from the Azure NuGet feed.\nReturns the path to the extracted package directory.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "package_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "package_version",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 346
          },
          {
            "name": "_ensure_dotnet_runtime_from_config",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET 9 runtime is available using runtime dependency configuration.\nReturns the path to the dotnet executable.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "runtime_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 406
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _get_initialize_params(self) -> InitializeParams:",
            "docstring": "Returns the initialize params for the Microsoft.CodeAnalysis.LanguageServer.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 468
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _start_server(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 523
          },
          {
            "name": "_force_pull_diagnostics",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _force_pull_diagnostics(self, init_response: dict) -> None:",
            "docstring": "Apply the diagnostic capabilities hack.\nForces the server to support pull diagnostics.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "init_response",
                "annotation": "dict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 687
          },
          {
            "name": "_open_solution_and_projects",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _open_solution_and_projects(self) -> None:",
            "docstring": "Open solution and project files using notifications.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 706
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 173,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 32
    },
    {
      "full_name": "serena.project.Project",
      "class_info": {
        "name": "Project",
        "module": "serena.project",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.project",
            "signature": "def __init__(self, project_root: str, project_config: ProjectConfig, is_newly_created: bool=False):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project_config",
                "annotation": "ProjectConfig",
                "default": null
              },
              {
                "name": "is_newly_created",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 20
          },
          {
            "name": "project_name",
            "module": "serena.project",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 50
          },
          {
            "name": "language",
            "module": "serena.project",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Language",
            "line_number": 54
          },
          {
            "name": "load",
            "module": "serena.project",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str | Path",
                "default": null
              },
              {
                "name": "autogenerate",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 58
          },
          {
            "name": "path_to_project_yml",
            "module": "serena.project",
            "signature": "def path_to_project_yml(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 65
          },
          {
            "name": "read_file",
            "module": "serena.project",
            "signature": "def read_file(self, relative_path: str) -> str:",
            "docstring": "Reads a file relative to the project root.\n\n:param relative_path: the path to the file relative to the project root\n:return: the content of the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 68
          },
          {
            "name": "get_ignore_spec",
            "module": "serena.project",
            "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
            "docstring": ":return: the pathspec matcher for the paths that were configured to be ignored,\n    either explicitly or implicitly through .gitignore files.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "pathspec.PathSpec",
            "line_number": 80
          },
          {
            "name": "_is_ignored_dirname",
            "module": "serena.project",
            "signature": "def _is_ignored_dirname(self, dirname: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 87
          },
          {
            "name": "_is_ignored_relative_path",
            "module": "serena.project",
            "signature": "def _is_ignored_relative_path(self, relative_path: str, ignore_non_source_files: bool=True) -> bool:",
            "docstring": "Determine whether a path should be ignored based on file type and ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_non_source_files: whether files that are not source files (according to the file masks\n    determined by the project's programming language) shall be ignored\n\n:return: whether the path should be ignored",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "ignore_non_source_files",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 90
          },
          {
            "name": "is_ignored_path",
            "module": "serena.project",
            "signature": "def is_ignored_path(self, path: str | Path) -> bool:",
            "docstring": "Checks whether the given path is ignored\n\n:param path: the path to check, can be absolute or relative",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 126
          },
          {
            "name": "is_path_in_project",
            "module": "serena.project",
            "signature": "def is_path_in_project(self, path: str | Path) -> bool:",
            "docstring": "Checks if the given (absolute or relative) path is inside the project directory.\nNote that even relative paths may be outside if they contain \"..\" or point to symlinks.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 144
          },
          {
            "name": "validate_relative_path",
            "module": "serena.project",
            "signature": "def validate_relative_path(self, relative_path: str) -> None:",
            "docstring": "Validates that the given relative path is safe to read or edit,\nmeaning it's inside the project directory and is not ignored by git.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 157
          },
          {
            "name": "gather_source_files",
            "module": "serena.project",
            "signature": "def gather_source_files(self, relative_path: str='') -> list[str]:",
            "docstring": "Retrieves relative paths of all source files, optionally limited to the given path\n\n:param relative_path: if provided, restrict search to this path",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 168
          },
          {
            "name": "search_source_files_for_pattern",
            "module": "serena.project",
            "signature": "def search_source_files_for_pattern(self, pattern: str, relative_path: str='', context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None) -> list[MatchedConsecutiveLines]:",
            "docstring": "Search for a pattern across all (non-ignored) source files\n\n:param pattern: Regular expression pattern to search for, either as a compiled Pattern or string\n:param relative_path:\n:param context_lines_before: Number of lines of context to include before each match\n:param context_lines_after: Number of lines of context to include after each match\n:param paths_include_glob: Glob pattern to filter which files to include in the search\n:param paths_exclude_glob: Glob pattern to filter which files to exclude from the search. Takes precedence over paths_include_glob.\n:return: List of matched consecutive lines with context",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "pattern",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              },
              {
                "name": "paths_include_glob",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "paths_exclude_glob",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "list[MatchedConsecutiveLines]",
            "line_number": 193
          },
          {
            "name": "retrieve_content_around_line",
            "module": "serena.project",
            "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
            "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "MatchedConsecutiveLines",
            "line_number": 224
          },
          {
            "name": "create_language_server",
            "module": "serena.project",
            "signature": "def create_language_server(self, log_level: int=logging.INFO, ls_timeout: float | None=DEFAULT_TOOL_TIMEOUT - 5, trace_lsp_communication: bool=False) -> SolidLanguageServer:",
            "docstring": "Create a language server for a project. Note that you will have to start it\nbefore performing any LS operations.\n\n:param project: either a path to the project root or a ProjectConfig instance.\n    If no project.yml is found, the default project configuration will be used.\n:param log_level: the log level for the language server\n:param ls_timeout: the timeout for the language server\n:param trace_lsp_communication: whether to trace LSP communication\n:return: the language server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "int",
                "default": null
              },
              {
                "name": "ls_timeout",
                "annotation": "float | None",
                "default": null
              },
              {
                "name": "trace_lsp_communication",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "SolidLanguageServer",
            "line_number": 246
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 29
    },
    {
      "full_name": "serena.config.serena_config.SerenaConfig",
      "class_info": {
        "name": "SerenaConfig",
        "module": "serena.config.serena_config",
        "docstring": "Holds the Serena agent configuration, which is typically loaded from a YAML configuration file\n(when instantiated via :method:`from_config_file`), which is updated when projects are added or removed.\nFor testing purposes, it can also be instantiated directly with the desired parameters.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 357
          },
          {
            "name": "generate_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Generates a Serena configuration file at the specified path from the template file.\n\n:param config_file_path: the path where the configuration file should be generated",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "config_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 361
          },
          {
            "name": "_determine_config_file_path",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": ":return: the location where the Serena configuration file is stored/should be stored",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 372
          },
          {
            "name": "from_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Static constructor to create SerenaConfig from the configuration file",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "generate_if_missing",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "'SerenaConfig'",
            "line_number": 392
          },
          {
            "name": "_migrate_out_of_project_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Migrates a legacy project configuration file (which is a YAML file containing the project root) to the\nin-project configuration file (project.yml) inside the project root directory.\n\n:param path: the path to the legacy project configuration file\n:return: the project root path if the migration was successful, None otherwise.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "Path | None",
            "line_number": 467
          },
          {
            "name": "project_paths",
            "module": "serena.config.serena_config",
            "signature": "@cached_property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "cached_property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 491
          },
          {
            "name": "project_names",
            "module": "serena.config.serena_config",
            "signature": "@cached_property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "cached_property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 495
          },
          {
            "name": "get_project",
            "module": "serena.config.serena_config",
            "signature": "def get_project(self, project_root_or_name: str) -> Optional['Project']:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root_or_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Optional['Project']",
            "line_number": 498
          },
          {
            "name": "add_project_from_path",
            "module": "serena.config.serena_config",
            "signature": "def add_project_from_path(self, project_root: Path | str) -> 'Project':",
            "docstring": "Add a project to the Serena configuration from a given path. Will raise a FileExistsError if a\nproject already exists at the path.\n\n:param project_root: the path to the project to add\n:return: the project that was added",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "Path | str",
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 518
          },
          {
            "name": "remove_project",
            "module": "serena.config.serena_config",
            "signature": "def remove_project(self, project_name: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 548
          },
          {
            "name": "save",
            "module": "serena.config.serena_config",
            "signature": "def save(self) -> None:",
            "docstring": "Saves the configuration to the file from which it was loaded (if any)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 558
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 318,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 29
    },
    {
      "full_name": "solidlsp.language_servers.bash_language_server.BashLanguageServer",
      "class_info": {
        "name": "BashLanguageServer",
        "module": "solidlsp.language_servers.bash_language_server",
        "docstring": "Provides Bash specific instantiation of the LanguageServer class using bash-language-server.\nContains various configurations and settings specific to Bash scripting.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a BashLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 28
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Bash Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 48
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Bash Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Bash Language Server, waits for the server to be ready and yields the LanguageServer instance.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 131
          },
          {
            "name": "request_document_symbols",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Enhanced document symbol request with hybrid LSP + regex-based function detection for bash files.\n\nThis method combines both LSP-based detection and regex-based detection to provide comprehensive\nfunction discovery. This dual approach is necessary because:\n\n1. bash-language-server (v5.6.0) has inconsistent function detection capabilities\n2. Some bash function syntaxes are not reliably detected by the LSP server\n3. Files may contain mixed function notation styles within the same file\n4. Different formatting or indentation can affect LSP detection\n\nThe hybrid approach ensures maximum compatibility and comprehensive function discovery\nfor reliable symbolic editing operations in Serena.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 197
          },
          {
            "name": "_merge_function_detections",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _merge_function_detections(self, lsp_all_symbols: list[ls_types.UnifiedSymbolInformation], lsp_root_symbols: list[ls_types.UnifiedSymbolInformation], regex_detected_functions: list[ls_types.UnifiedSymbolInformation]) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Merge LSP-detected symbols with regex-detected functions, avoiding duplicates.\n\nThis method:\n1. Keeps all non-function symbols from LSP detection\n2. Keeps all LSP-detected functions (they have more accurate positioning)\n3. Adds regex-detected functions that weren't found by LSP\n4. Uses function names to detect duplicates\n\nArgs:\n    lsp_all_symbols: All symbols detected by LSP\n    lsp_root_symbols: Root-level symbols detected by LSP\n    regex_detected_functions: Functions detected by regex (all are root-level)\n\nReturns:\n    Tuple of (merged_all_symbols, merged_root_symbols)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lsp_all_symbols",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              },
              {
                "name": "lsp_root_symbols",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              },
              {
                "name": "regex_detected_functions",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 240
          },
          {
            "name": "_detect_bash_functions",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _detect_bash_functions(self, relative_file_path: str, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
            "docstring": "Regex-based detection of bash functions as fallback when LSP doesn't provide them.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
            "line_number": 291
          },
          {
            "name": "_find_function_end",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _find_function_end(self, lines: list[str], start_line: int) -> int:",
            "docstring": "Find the end line of a bash function by matching opening and closing braces.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lines",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 361
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 26
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_requests.LspNotification",
      "class_info": {
        "name": "LspNotification",
        "module": "solidlsp.lsp_protocol_handler.lsp_requests",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def __init__(self, send_notification):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "send_notification",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 424
          },
          {
            "name": "did_change_workspace_folders",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_workspace_folders(self, params: lsp_types.DidChangeWorkspaceFoldersParams) -> None:",
            "docstring": "The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace\nfolder configuration changes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeWorkspaceFoldersParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 427
          },
          {
            "name": "cancel_work_done_progress",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def cancel_work_done_progress(self, params: lsp_types.WorkDoneProgressCancelParams) -> None:",
            "docstring": "The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\ninitiated on the server side.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkDoneProgressCancelParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 433
          },
          {
            "name": "did_create_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_create_files(self, params: lsp_types.CreateFilesParams) -> None:",
            "docstring": "The did create files notification is sent from the client to the server when\nfiles were created from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 439
          },
          {
            "name": "did_rename_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_rename_files(self, params: lsp_types.RenameFilesParams) -> None:",
            "docstring": "The did rename files notification is sent from the client to the server when\nfiles were renamed from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 447
          },
          {
            "name": "did_delete_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_delete_files(self, params: lsp_types.DeleteFilesParams) -> None:",
            "docstring": "The will delete files request is sent from the client to the server before files are actually\ndeleted as long as the deletion is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 455
          },
          {
            "name": "did_open_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_open_notebook_document(self, params: lsp_types.DidOpenNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook opens.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidOpenNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 463
          },
          {
            "name": "did_change_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_notebook_document(self, params: lsp_types.DidChangeNotebookDocumentParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 470
          },
          {
            "name": "did_save_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_save_notebook_document(self, params: lsp_types.DidSaveNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook document is saved.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidSaveNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 473
          },
          {
            "name": "did_close_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_close_notebook_document(self, params: lsp_types.DidCloseNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook closes.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidCloseNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 480
          },
          {
            "name": "initialized",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def initialized(self, params: lsp_types.InitializedParams) -> None:",
            "docstring": "The initialized notification is sent from the client to the\nserver after the client is fully initialized and the server\nis allowed to send requests from the server to the client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializedParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 487
          },
          {
            "name": "exit",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def exit(self) -> None:",
            "docstring": "The exit event is sent from the client to the server to\nask the server to exit its process.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 494
          },
          {
            "name": "workspace_did_change_configuration",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def workspace_did_change_configuration(self, params: lsp_types.DidChangeConfigurationParams) -> None:",
            "docstring": "The configuration change notification is sent from the client to the server\nwhen the client's configuration has changed. The notification contains\nthe changed configuration as defined by the language client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeConfigurationParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 500
          },
          {
            "name": "did_open_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_open_text_document(self, params: lsp_types.DidOpenTextDocumentParams) -> None:",
            "docstring": "The document open notification is sent from the client to the server to signal\nnewly opened text documents. The document's truth is now managed by the client\nand the server must not try to read the document's truth using the document's\nuri. Open in this sense means it is managed by the client. It doesn't necessarily\nmean that its content is presented in an editor. An open notification must not\nbe sent more than once without a corresponding close notification send before.\nThis means open and close notification must be balanced and the max open count\nis one.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidOpenTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 507
          },
          {
            "name": "did_change_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_text_document(self, params: lsp_types.DidChangeTextDocumentParams) -> None:",
            "docstring": "The document change notification is sent from the client to the server to signal\nchanges to a text document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 519
          },
          {
            "name": "did_close_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_close_text_document(self, params: lsp_types.DidCloseTextDocumentParams) -> None:",
            "docstring": "The document close notification is sent from the client to the server when\nthe document got closed in the client. The document's truth now exists where\nthe document's uri points to (e.g. if the document's uri is a file uri the\ntruth now exists on disk). As with the open notification the close notification\nis about managing the document's content. Receiving a close notification\ndoesn't mean that the document was open in an editor before. A close\nnotification requires a previous open notification to be sent.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidCloseTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 525
          },
          {
            "name": "did_save_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_save_text_document(self, params: lsp_types.DidSaveTextDocumentParams) -> None:",
            "docstring": "The document save notification is sent from the client to the server when\nthe document got saved in the client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 536
          },
          {
            "name": "will_save_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def will_save_text_document(self, params: lsp_types.WillSaveTextDocumentParams) -> None:",
            "docstring": "A document will save notification is sent from the client to the server before\nthe document is actually saved.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 542
          },
          {
            "name": "did_change_watched_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_watched_files(self, params: lsp_types.DidChangeWatchedFilesParams) -> None:",
            "docstring": "The watched files notification is sent from the client to the server when\nthe client detects changes to file watched by the language client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeWatchedFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 548
          },
          {
            "name": "set_trace",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def set_trace(self, params: lsp_types.SetTraceParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SetTraceParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 554
          },
          {
            "name": "cancel_request",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def cancel_request(self, params: lsp_types.CancelParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CancelParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 557
          },
          {
            "name": "progress",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def progress(self, params: lsp_types.ProgressParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ProgressParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 560
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 423,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 25
    },
    {
      "full_name": "serena.config.serena_config.RegisteredProject",
      "class_info": {
        "name": "RegisteredProject",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self, project_root: str, project_config: 'ProjectConfig', project_instance: Optional['Project']=None) -> None:",
            "docstring": "Represents a registered project in the Serena configuration.\n\n:param project_root: the root directory of the project\n:param project_config: the configuration of the project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project_config",
                "annotation": "'ProjectConfig'",
                "default": null
              },
              {
                "name": "project_instance",
                "annotation": "Optional['Project']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 270
          },
          {
            "name": "_tostring_exclude_private",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_exclude_private(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 281
          },
          {
            "name": "project_name",
            "module": "serena.config.serena_config",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 285
          },
          {
            "name": "from_project_instance",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_instance",
                "annotation": "'Project'",
                "default": null
              }
            ],
            "return_annotation": "'RegisteredProject'",
            "line_number": 289
          },
          {
            "name": "matches_root_path",
            "module": "serena.config.serena_config",
            "signature": "def matches_root_path(self, path: str | Path) -> bool:",
            "docstring": "Check if the given path matches the project root path.\n\n:param path: the path to check\n:return: True if the path matches the project root, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 296
          },
          {
            "name": "get_project_instance",
            "module": "serena.config.serena_config",
            "signature": "def get_project_instance(self) -> 'Project':",
            "docstring": "Returns the project instance for this registered project, loading it if necessary.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 305
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 269,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 24
    },
    {
      "full_name": "solidlsp.language_servers.typescript_language_server.TypeScriptLanguageServer",
      "class_info": {
        "name": "TypeScriptLanguageServer",
        "module": "solidlsp.language_servers.typescript_language_server",
        "docstring": "Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a TypeScriptLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 46
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 65
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for TypeScript Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 74
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the TypeScript Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 137
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the TypeScript Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 177
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 254
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 41,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 24
    },
    {
      "full_name": "solidlsp.language_servers.vts_language_server.VtsLanguageServer",
      "class_info": {
        "name": "VtsLanguageServer",
        "module": "solidlsp.language_servers.vts_language_server",
        "docstring": "Provides TypeScript specific instantiation of the LanguageServer class using vtsls.\nContains various configurations and settings specific to TypeScript via vtsls wrapper.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a VtsLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 33
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 52
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for VTS Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 61
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the VTS Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 110
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the VTS Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 150
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 236
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 27,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 24
    },
    {
      "full_name": "serena.cli.ProjectCommands",
      "class_info": {
        "name": "ProjectCommands",
        "module": "serena.cli",
        "docstring": "Group for 'project' subcommands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 401
          },
          {
            "name": "generate_yml",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument",
              "click.option"
            ],
            "parameters": [
              {
                "name": "project_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "language",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 410
          },
          {
            "name": "index",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument",
              "click.option"
            ],
            "parameters": [
              {
                "name": "project",
                "annotation": "str",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 433
          },
          {
            "name": "index_deprecated",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument",
              "click.option"
            ],
            "parameters": [
              {
                "name": "project",
                "annotation": "str",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 440
          },
          {
            "name": "_index_project",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "project",
                "annotation": "str",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 445
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 398,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 23
    },
    {
      "full_name": "serena.config.serena_config.ProjectConfig",
      "class_info": {
        "name": "ProjectConfig",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 173
          },
          {
            "name": "autogenerate",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Autogenerate a project configuration for a given project root.\n\n:param project_root: the path to the project root\n:param project_name: the name of the project; if None, the name of the project will be the name of the directory\n    containing the project\n:param project_language: the programming language of the project; if None, it will be determined automatically\n:param save_to_disk: whether to save the project configuration to disk\n:return: the project configuration",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str | Path",
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "project_language",
                "annotation": "Language | None",
                "default": null
              },
              {
                "name": "save_to_disk",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 177
          },
          {
            "name": "rel_path_to_project_yml",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 220
          },
          {
            "name": "_from_dict",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Create a ProjectConfig instance from a configuration dictionary",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "data",
                "annotation": "dict[str, Any]",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 224
          },
          {
            "name": "load",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Load a ProjectConfig instance from the path to the project root.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "Path | str",
                "default": null
              },
              {
                "name": "autogenerate",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 251
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 162,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 23
    },
    {
      "full_name": "serena.symbol.LanguageServerSymbolRetriever",
      "class_info": {
        "name": "LanguageServerSymbolRetriever",
        "module": "serena.symbol",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.symbol",
            "signature": "def __init__(self, lang_server: SolidLanguageServer, agent: Union['SerenaAgent', None]=None) -> None:",
            "docstring": ":param lang_server: the language server to use for symbol retrieval as well as editing operations.\n:param agent: the agent to use (only needed for marking files as modified). You can pass None if you don't\n    need an agent to be aware of file modifications performed by the symbol manager.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang_server",
                "annotation": "SolidLanguageServer",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Union['SerenaAgent', None]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 444
          },
          {
            "name": "set_language_server",
            "module": "serena.symbol",
            "signature": "def set_language_server(self, lang_server: SolidLanguageServer) -> None:",
            "docstring": "Set the language server to use for symbol retrieval and editing operations.\nThis is useful if you want to change the language server after initializing the SymbolManager.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang_server",
                "annotation": "SolidLanguageServer",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 453
          },
          {
            "name": "get_language_server",
            "module": "serena.symbol",
            "signature": "def get_language_server(self) -> SolidLanguageServer:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SolidLanguageServer",
            "line_number": 460
          },
          {
            "name": "find_by_name",
            "module": "serena.symbol",
            "signature": "def find_by_name(self, name_path: str, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None, substring_matching: bool=False, within_relative_path: str | None=None) -> list[LanguageServerSymbol]:",
            "docstring": "Find all symbols that match the given name. See docstring of `Symbol.find` for more details.\nThe only parameter not mentioned there is `within_relative_path`, which can be used to restrict the search\nto symbols within a specific file or directory.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              },
              {
                "name": "substring_matching",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "within_relative_path",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "list[LanguageServerSymbol]",
            "line_number": 463
          },
          {
            "name": "get_document_symbols",
            "module": "serena.symbol",
            "signature": "def get_document_symbols(self, relative_path: str) -> list[LanguageServerSymbol]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[LanguageServerSymbol]",
            "line_number": 487
          },
          {
            "name": "find_by_location",
            "module": "serena.symbol",
            "signature": "def find_by_location(self, location: LanguageServerSymbolLocation) -> LanguageServerSymbol | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "location",
                "annotation": "LanguageServerSymbolLocation",
                "default": null
              }
            ],
            "return_annotation": "LanguageServerSymbol | None",
            "line_number": 492
          },
          {
            "name": "find_referencing_symbols",
            "module": "serena.symbol",
            "signature": "def find_referencing_symbols(self, name_path: str, relative_file_path: str, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[ReferenceInLanguageServerSymbol]:",
            "docstring": "Find all symbols that reference the symbol with the given name.\nIf multiple symbols fit the name (e.g. for variables that are overwritten), will use the first one.\n\n:param name_path: the name path of the symbol to find\n:param relative_file_path: the relative path of the file in which the referenced symbol is defined.\n:param include_body: whether to include the body of all symbols in the result.\n    Not recommended, as the referencing symbols will often be files, and thus the bodies will be very long.\n:param include_kinds: which kinds of symbols to include in the result.\n:param exclude_kinds: which kinds of symbols to exclude from the result.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              }
            ],
            "return_annotation": "list[ReferenceInLanguageServerSymbol]",
            "line_number": 502
          },
          {
            "name": "find_referencing_symbols_by_location",
            "module": "serena.symbol",
            "signature": "def find_referencing_symbols_by_location(self, symbol_location: LanguageServerSymbolLocation, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[ReferenceInLanguageServerSymbol]:",
            "docstring": "Find all symbols that reference the symbol at the given location.\n\n:param symbol_location: the location of the symbol for which to find references.\n    Does not need to include an end_line, as it is unused in the search.\n:param include_body: whether to include the body of all symbols in the result.\n    Not recommended, as the referencing symbols will often be files, and thus the bodies will be very long.\n    Note: you can filter out the bodies of the children if you set include_children_body=False\n    in the to_dict method.\n:param include_kinds: an optional sequence of ints representing the LSP symbol kind.\n    If provided, only symbols of the given kinds will be included in the result.\n:param exclude_kinds: If provided, symbols of the given kinds will be excluded from the result.\n    Takes precedence over include_kinds.\n:return: a list of symbols that reference the given symbol",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol_location",
                "annotation": "LanguageServerSymbolLocation",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "Sequence[SymbolKind] | None",
                "default": null
              }
            ],
            "return_annotation": "list[ReferenceInLanguageServerSymbol]",
            "line_number": 537
          },
          {
            "name": "get_symbol_overview",
            "module": "serena.symbol",
            "signature": "def get_symbol_overview(self, relative_path: str) -> dict[str, list[SymbolOverviewElement]]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, list[SymbolOverviewElement]]",
            "line_number": 587
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 443,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 22
    },
    {
      "full_name": "serena.tools.jetbrains_plugin_client.JetBrainsPluginClient",
      "class_info": {
        "name": "JetBrainsPluginClient",
        "module": "serena.tools.jetbrains_plugin_client",
        "docstring": "Python client for the Serena Backend Service.\n\nProvides simple methods to interact with all available endpoints.",
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def __init__(self, port: int, timeout: int=30):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "port",
                "annotation": "int",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 45
          },
          {
            "name": "_tostring_includes",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 51
          },
          {
            "name": "from_project",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "Project",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 55
          },
          {
            "name": "matches",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def matches(self, resolved_path: Path) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "resolved_path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 72
          },
          {
            "name": "_make_request",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def _make_request(self, method: str, endpoint: str, data: Optional[dict]=None) -> dict[str, Any]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "endpoint",
                "annotation": "str",
                "default": null
              },
              {
                "name": "data",
                "annotation": "Optional[dict]",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 78
          },
          {
            "name": "_pythonify_response",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "@staticmethod",
            "docstring": "Converts dictionary keys from camelCase to snake_case recursively.\n\n:response: the response in which to convert keys (dictionary or list)",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "response",
                "annotation": "T",
                "default": null
              }
            ],
            "return_annotation": "T",
            "line_number": 109
          },
          {
            "name": "project_root",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def project_root(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 127
          },
          {
            "name": "find_symbol",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def find_symbol(self, name_path: str, relative_path: str | None=None, include_body: bool=False, depth: int=0, include_location: bool=False) -> dict[str, Any]:",
            "docstring": "Find symbols by name.\n\n:param name_path: the name path to match\n:param relative_path: the relative path to which to restrict the search\n:param include_body: whether to include symbol body content\n:param depth: depth of children to include (0 = no children)\n\n:return: Dictionary containing 'symbols' list with matching symbols",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "depth",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_location",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 131
          },
          {
            "name": "find_references",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def find_references(self, name_path: str, relative_path: str) -> dict[str, Any]:",
            "docstring": "Find references to a symbol.\n\n:param name_path: the name path of the symbol\n:param relative_path: the relative path\n:return: dictionary containing 'symbols' list with symbol references",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 153
          },
          {
            "name": "get_symbols_overview",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def get_symbols_overview(self, relative_path: str) -> dict[str, Any]:",
            "docstring": ":param relative_path: the relative path to a source file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 164
          },
          {
            "name": "is_service_available",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def is_service_available(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 171
          },
          {
            "name": "close",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def close(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 178
          },
          {
            "name": "__enter__",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def __enter__(self) -> Self:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 181
          },
          {
            "name": "__exit__",
            "module": "serena.tools.jetbrains_plugin_client",
            "signature": "def __exit__(self, exc_type, exc_val, exc_tb):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc_type",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc_val",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc_tb",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 184
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 35,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 22
    },
    {
      "full_name": "solidlsp.language_servers.dart_language_server.DartLanguageServer",
      "class_info": {
        "name": "DartLanguageServer",
        "module": "solidlsp.language_servers.dart_language_server",
        "docstring": "Provides Dart specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Dart.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "def __init__(self, config, logger, repository_root_path, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a DartServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": null,
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": null,
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 18
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "'LanguageServerLogger'",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 33
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Dart Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Start the language server and yield when the server is ready.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 119
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 13,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 22
    },
    {
      "full_name": "solidlsp.language_servers.clangd_language_server.ClangdLanguageServer",
      "class_info": {
        "name": "ClangdLanguageServer",
        "module": "solidlsp.language_servers.clangd_language_server",
        "docstring": "Provides C/C++ specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C/C++.\nAs the project gets bigger in size, building index will take time. Try running clangd multiple times to ensure index is built properly.\nAlso make sure compile_commands.json is created at root of the source directory. Check clangd test case for example.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a ClangdLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for ClangdLanguageServer and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 48
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the clangd Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 102
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Clangd Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 130
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 20,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 22
    },
    {
      "full_name": "solidlsp.language_servers.kotlin_language_server.KotlinLanguageServer",
      "class_info": {
        "name": "KotlinLanguageServer",
        "module": "solidlsp.language_servers.kotlin_language_server",
        "docstring": "Provides Kotlin specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Kotlin.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a Kotlin Language Server instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 36
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Kotlin Language Server and return the paths.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "KotlinRuntimeDependencyPaths",
            "line_number": 61
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Kotlin Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 172
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Kotlin Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 425
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 31,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 22
    },
    {
      "full_name": "serena.tools.tools_base.Tool",
      "class_info": {
        "name": "Tool",
        "module": "serena.tools.tools_base",
        "docstring": null,
        "bases": [
          "Component"
        ],
        "methods": [
          {
            "name": "get_name_from_cls",
            "module": "serena.tools.tools_base",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 129
          },
          {
            "name": "get_name",
            "module": "serena.tools.tools_base",
            "signature": "def get_name(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 137
          },
          {
            "name": "get_apply_fn",
            "module": "serena.tools.tools_base",
            "signature": "def get_apply_fn(self) -> ApplyMethodProtocol:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "ApplyMethodProtocol",
            "line_number": 140
          },
          {
            "name": "can_edit",
            "module": "serena.tools.tools_base",
            "signature": "@classmethod",
            "docstring": "Returns whether this tool can perform editing operations on code.\n\n:return: True if the tool can edit code, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 147
          },
          {
            "name": "get_tool_description",
            "module": "serena.tools.tools_base",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 156
          },
          {
            "name": "get_apply_docstring_from_cls",
            "module": "serena.tools.tools_base",
            "signature": "@classmethod",
            "docstring": "Get the docstring for the apply method from the class (static metadata).\nNeeded for creating MCP tools in a separate process without running into serialization issues.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 163
          },
          {
            "name": "get_apply_docstring",
            "module": "serena.tools.tools_base",
            "signature": "def get_apply_docstring(self) -> str:",
            "docstring": "Gets the docstring for the tool application, used by the MCP server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 181
          },
          {
            "name": "get_apply_fn_metadata",
            "module": "serena.tools.tools_base",
            "signature": "def get_apply_fn_metadata(self) -> FuncMetadata:",
            "docstring": "Gets the metadata for the tool application function, used by the MCP server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "FuncMetadata",
            "line_number": 185
          },
          {
            "name": "get_apply_fn_metadata_from_cls",
            "module": "serena.tools.tools_base",
            "signature": "@classmethod",
            "docstring": "Get the metadata for the apply method from the class (static metadata).\nNeeded for creating MCP tools in a separate process without running into serialization issues.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "FuncMetadata",
            "line_number": 190
          },
          {
            "name": "_log_tool_application",
            "module": "serena.tools.tools_base",
            "signature": "def _log_tool_application(self, frame: Any) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "frame",
                "annotation": "Any",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 205
          },
          {
            "name": "_limit_length",
            "module": "serena.tools.tools_base",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "result",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 218
          },
          {
            "name": "is_active",
            "module": "serena.tools.tools_base",
            "signature": "def is_active(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 226
          },
          {
            "name": "apply_ex",
            "module": "serena.tools.tools_base",
            "signature": "def apply_ex(self, log_call: bool=True, catch_exceptions: bool=True, **kwargs) -> str:",
            "docstring": "Applies the tool with logging and exception handling, using the given keyword arguments",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "log_call",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "catch_exceptions",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 229
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 117,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 21
    },
    {
      "full_name": "solidlsp.ls_handler.LanguageServerTerminatedException",
      "class_info": {
        "name": "LanguageServerTerminatedException",
        "module": "solidlsp.ls_handler",
        "docstring": "Exception raised when the language server process has terminated unexpectedly.",
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, message: str, cause: Exception | None=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cause",
                "annotation": "Exception | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 44
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_handler",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 49
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 39,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 20
    },
    {
      "full_name": "serena.cli.SerenaConfigCommands",
      "class_info": {
        "name": "SerenaConfigCommands",
        "module": "serena.cli",
        "docstring": "Group for 'config' subcommands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 384
          },
          {
            "name": "edit",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command"
            ],
            "parameters": [],
            "return_annotation": "None",
            "line_number": 391
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 381,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 20
    },
    {
      "full_name": "serena.symbol.ReferenceInLanguageServerSymbol",
      "class_info": {
        "name": "ReferenceInLanguageServerSymbol",
        "module": "serena.symbol",
        "docstring": "Represents the location of a reference to another symbol within a symbol/file.\n\nThe contained symbol is the symbol within which the reference is located,\nnot the symbol that is referenced.",
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "from_lsp_reference",
            "module": "serena.symbol",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "reference",
                "annotation": "LSPReferenceInSymbol",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 436
          },
          {
            "name": "get_relative_path",
            "module": "serena.symbol",
            "signature": "def get_relative_path(self) -> str | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 439
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 414,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 20
    },
    {
      "full_name": "serena.code_editor.CodeEditor",
      "class_info": {
        "name": "CodeEditor",
        "module": "serena.code_editor",
        "docstring": null,
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.code_editor",
            "signature": "def __init__(self, project_root: str, agent: Optional['SerenaAgent']=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Optional['SerenaAgent']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 26
          },
          {
            "name": "_open_file_context",
            "module": "serena.code_editor",
            "signature": "@contextmanager",
            "docstring": "Context manager for opening a file",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator['CodeEditor.EditedFile']",
            "line_number": 46
          },
          {
            "name": "_edited_file_context",
            "module": "serena.code_editor",
            "signature": "@contextmanager",
            "docstring": "Context manager for editing a file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator['CodeEditor.EditedFile']",
            "line_number": 53
          },
          {
            "name": "_find_unique_symbol",
            "module": "serena.code_editor",
            "signature": "@abstractmethod",
            "docstring": "Finds the unique symbol with the given name in the given file.\nIf no such symbol exists, raises a ValueError.\n\n:param name_path: the name path\n:param relative_file_path: the relative path of the file in which to search for the symbol.\n:return: the unique symbol",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "TSymbol",
            "line_number": 68
          },
          {
            "name": "replace_body",
            "module": "serena.code_editor",
            "signature": "def replace_body(self, name_path: str, relative_file_path: str, body: str) -> None:",
            "docstring": "Replaces the body of the symbol with the given name_path in the given file.\n\n:param name_path: the name path of the symbol to replace.\n:param relative_file_path: the relative path of the file in which the symbol is defined.\n:param body: the new body",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 78
          },
          {
            "name": "_count_leading_newlines",
            "module": "serena.code_editor",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "Iterable",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 99
          },
          {
            "name": "_count_trailing_newlines",
            "module": "serena.code_editor",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "Reversible",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 111
          },
          {
            "name": "insert_after_symbol",
            "module": "serena.code_editor",
            "signature": "def insert_after_symbol(self, name_path: str, relative_file_path: str, body: str) -> None:",
            "docstring": "Inserts content after the symbol with the given name in the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 114
          },
          {
            "name": "insert_before_symbol",
            "module": "serena.code_editor",
            "signature": "def insert_before_symbol(self, name_path: str, relative_file_path: str, body: str) -> None:",
            "docstring": "Inserts content before the symbol with the given name in the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 148
          },
          {
            "name": "insert_at_line",
            "module": "serena.code_editor",
            "signature": "def insert_at_line(self, relative_path: str, line: int, content: str) -> None:",
            "docstring": "Inserts content at the given line in the given file.\n\n:param relative_path: the relative path of the file in which to insert content\n:param line: the 0-based index of the line to insert content at\n:param content: the content to insert",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 176
          },
          {
            "name": "delete_lines",
            "module": "serena.code_editor",
            "signature": "def delete_lines(self, relative_path: str, start_line: int, end_line: int) -> None:",
            "docstring": "Deletes lines in the given file.\n\n:param relative_path: the relative path of the file in which to delete lines\n:param start_line: the 0-based index of the first line to delete (inclusive)\n:param end_line: the 0-based index of the last line to delete (inclusive)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 187
          },
          {
            "name": "delete_symbol",
            "module": "serena.code_editor",
            "signature": "def delete_symbol(self, name_path: str, relative_file_path: str) -> None:",
            "docstring": "Deletes the symbol with the given name in the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 203
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 25,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 20
    },
    {
      "full_name": "serena.cli.ProjectType",
      "class_info": {
        "name": "ProjectType",
        "module": "serena.cli",
        "docstring": "ParamType allowing either a project name or a path to a project directory.",
        "bases": [
          "click.ParamType"
        ],
        "methods": [
          {
            "name": "convert",
            "module": "serena.cli",
            "signature": "def convert(self, value: str, param: Any, ctx: Any) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": "str",
                "default": null
              },
              {
                "name": "param",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "ctx",
                "annotation": "Any",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 64
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 59,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 19
    },
    {
      "full_name": "serena.tools.symbol_tools.RestartLanguageServerTool",
      "class_info": {
        "name": "RestartLanguageServerTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Restarts the language server, may be necessary when edits not through Serena happen.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Use this tool only on explicit user request or after confirmation.\nIt may be necessary to restart the language server if it hangs.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 41
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 38,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 19
    },
    {
      "full_name": "serena.tools.config_tools.ActivateProjectTool",
      "class_info": {
        "name": "ActivateProjectTool",
        "module": "serena.tools.config_tools",
        "docstring": "Activates a project by name.",
        "bases": [
          "Tool",
          "ToolMarkerDoesNotRequireActiveProject"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, project: str) -> str:",
            "docstring": "Activates the project with the given name.\n\n:param project: the name of a registered project to activate or a path to a project directory",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 12
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 7,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 19
    },
    {
      "full_name": "serena.tools.config_tools.RemoveProjectTool",
      "class_info": {
        "name": "RemoveProjectTool",
        "module": "serena.tools.config_tools",
        "docstring": "Removes a project from the Serena configuration.",
        "bases": [
          "Tool",
          "ToolMarkerDoesNotRequireActiveProject",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, project_name: str) -> str:",
            "docstring": "Removes a project from the Serena configuration.\n\n:param project_name: Name of the project to remove",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 43
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 38,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 19
    },
    {
      "full_name": "serena.tools.config_tools.GetCurrentConfigTool",
      "class_info": {
        "name": "GetCurrentConfigTool",
        "module": "serena.tools.config_tools",
        "docstring": "Prints the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
        "bases": [
          "Tool",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Print the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 79
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 74,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 19
    },
    {
      "full_name": "interprompt.multilang_prompt.MultiLangPromptCollection",
      "class_info": {
        "name": "MultiLangPromptCollection",
        "module": "interprompt.multilang_prompt",
        "docstring": "Main class for managing a collection of prompt templates and prompt lists, with support for multiple languages.\nAll data will be read from the yamls directly contained in the given directory on initialization.\nIt is thus assumed that you manage one directory per prompt collection.\n\nThe yamls are assumed to be either of the form\n\n```yaml\nlang: <language_code> # optional, defaults to \"default\"\nprompts:\n  <prompt_name>:\n    <prompt_template_string>\n  <prompt_list_name>: [<prompt_string_1>, <prompt_string_2>, ...]\n\n```\n\nWhen specifying prompt templates for multiple languages, make sure that the Jinja template parameters\n(inferred from the things inside the `{{ }}` in the template strings) are the same for all languages\n(you will get an exception otherwise).\n\nThe prompt names must be unique (for the same language) within the collection.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __init__(self, prompts_dir: str | list[str], fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> None:",
            "docstring": ":param prompts_dir: the directory containing the prompt templates and prompt lists.\n    If a list is provided, will look for prompt templates in the dirs from left to right\n    (first one containing the desired template wins).\n:param fallback_mode: the fallback mode to use when a prompt template or prompt list is not found for the requested language.\n    May be reset after initialization.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompts_dir",
                "annotation": "str | list[str]",
                "default": null
              },
              {
                "name": "fallback_mode",
                "annotation": "LanguageFallbackMode",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 221
          },
          {
            "name": "_add_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def _add_prompt_template(self, name: str, template_str: str, lang_code: str=DEFAULT_LANG_CODE, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
            "docstring": ":param name: name of the prompt template\n:param template_str: the Jinja template string\n:param lang_code: the language code for which to add the prompt template.\n:param on_name_collision: how to deal with name/lang_code collisions",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "template_str",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "on_name_collision",
                "annotation": "Literal['skip', 'overwrite', 'raise']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 248
          },
          {
            "name": "_add_prompt_list",
            "module": "interprompt.multilang_prompt",
            "signature": "def _add_prompt_list(self, name: str, prompt_list: list[str], lang_code: str=DEFAULT_LANG_CODE, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
            "docstring": ":param name: name of the prompt list\n:param prompt_list: a list of prompts\n:param lang_code: the language code for which to add the prompt list.\n:param on_name_collision: how to deal with name/lang_code collisions",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "prompt_list",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "on_name_collision",
                "annotation": "Literal['skip', 'overwrite', 'raise']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 277
          },
          {
            "name": "_load_from_disc",
            "module": "interprompt.multilang_prompt",
            "signature": "def _load_from_disc(self, prompts_dir: str, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
            "docstring": "Loads all prompt templates and prompt lists from yaml files in the given directory.\n\n:param prompts_dir:\n:param on_name_collision: how to deal with name/lang_code collisions",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompts_dir",
                "annotation": "str",
                "default": null
              },
              {
                "name": "on_name_collision",
                "annotation": "Literal['skip', 'overwrite', 'raise']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 305
          },
          {
            "name": "get_prompt_template_names",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_template_names(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 337
          },
          {
            "name": "get_prompt_list_names",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_list_names(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 340
          },
          {
            "name": "__len__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __len__(self) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 343
          },
          {
            "name": "get_multilang_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_multilang_prompt_template(self, prompt_name: str) -> MultiLangPromptTemplate:",
            "docstring": "The MultiLangPromptTemplate object for the given prompt name. For single-language use cases, you should use the `get_prompt_template` method instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "MultiLangPromptTemplate",
            "line_number": 346
          },
          {
            "name": "get_multilang_prompt_list",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_multilang_prompt_list(self, prompt_name: str) -> MultiLangPromptList:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "MultiLangPromptList",
            "line_number": 350
          },
          {
            "name": "get_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_template(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> PromptTemplate:",
            "docstring": "The PromptTemplate object for the given prompt name and language code.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "PromptTemplate",
            "line_number": 353
          },
          {
            "name": "get_prompt_template_parameters",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_template_parameters(self, prompt_name: str) -> list[str]:",
            "docstring": "The parameters of the PromptTemplate object for the given prompt name.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 361
          },
          {
            "name": "get_prompt_list",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_list(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> PromptList:",
            "docstring": "The PromptList object for the given prompt name and language code.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "PromptList",
            "line_number": 365
          },
          {
            "name": "_has_prompt_list",
            "module": "interprompt.multilang_prompt",
            "signature": "def _has_prompt_list(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 369
          },
          {
            "name": "_has_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def _has_prompt_template(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 375
          },
          {
            "name": "render_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def render_prompt_template(self, prompt_name: str, params: dict[str, Any], lang_code: str=DEFAULT_LANG_CODE) -> str:",
            "docstring": "Renders the prompt template for the given prompt name and language code.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict[str, Any]",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 381
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 197,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.ls_types.DiagnosticsSeverity",
      "class_info": {
        "name": "DiagnosticsSeverity",
        "module": "solidlsp.ls_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 322,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.ls_types.Diagnostic",
      "class_info": {
        "name": "Diagnostic",
        "module": "solidlsp.ls_types",
        "docstring": "Diagnostic information for a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 329,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.agent.ProjectNotFoundError",
      "class_info": {
        "name": "ProjectNotFoundError",
        "module": "serena.agent",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 43,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.code_editor.LanguageServerCodeEditor",
      "class_info": {
        "name": "LanguageServerCodeEditor",
        "module": "serena.code_editor",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.code_editor",
            "signature": "def __init__(self, symbol_retriever: LanguageServerSymbolRetriever, agent: Optional['SerenaAgent']=None):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol_retriever",
                "annotation": "LanguageServerSymbolRetriever",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Optional['SerenaAgent']",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 215
          },
          {
            "name": "_lang_server",
            "module": "serena.code_editor",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SolidLanguageServer",
            "line_number": 220
          },
          {
            "name": "_open_file_context",
            "module": "serena.code_editor",
            "signature": "@contextmanager",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator['CodeEditor.EditedFile']",
            "line_number": 239
          },
          {
            "name": "_get_code_file_content",
            "module": "serena.code_editor",
            "signature": "def _get_code_file_content(self, relative_path: str) -> str:",
            "docstring": "Get the content of a file using the language server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 243
          },
          {
            "name": "_find_unique_symbol",
            "module": "serena.code_editor",
            "signature": "def _find_unique_symbol(self, name_path: str, relative_file_path: str) -> LanguageServerSymbol:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "LanguageServerSymbol",
            "line_number": 247
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 214,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.config.serena_config.SerenaConfigError",
      "class_info": {
        "name": "SerenaConfigError",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 140,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.config.context_mode.SerenaAgentMode",
      "class_info": {
        "name": "SerenaAgentMode",
        "module": "serena.config.context_mode",
        "docstring": "Represents a mode of operation for the agent, typically read off a YAML file.\nAn agent can be in multiple modes simultaneously as long as they are not mutually exclusive.\nThe modes can be adjusted after the agent is running, for example for switching from planning to editing.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.context_mode",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 47
          },
          {
            "name": "print_overview",
            "module": "serena.config.context_mode",
            "signature": "def print_overview(self) -> None:",
            "docstring": "Print an overview of the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 50
          },
          {
            "name": "from_yaml",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a mode from a YAML file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "yaml_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 57
          },
          {
            "name": "get_path",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Get the path to the YAML file for a mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 65
          },
          {
            "name": "from_name",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a registered Serena mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 81
          },
          {
            "name": "from_name_internal",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Loads an internal Serena mode",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 87
          },
          {
            "name": "list_registered_mode_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all registered modes (from the corresponding YAML files in the serena repo).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_user_modes",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 95
          },
          {
            "name": "list_custom_mode_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all custom modes defined by the user.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 103
          },
          {
            "name": "load_default_modes",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load the default modes (interactive and editing).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[Self]",
            "line_number": 108
          },
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_or_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 113
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 33,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.tools.tools_base.ToolMarkerDoesNotRequireActiveProject",
      "class_info": {
        "name": "ToolMarkerDoesNotRequireActiveProject",
        "module": "serena.tools.tools_base",
        "docstring": null,
        "bases": [
          "ToolMarker"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 88,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentDiagnosticReportKind",
      "class_info": {
        "name": "DocumentDiagnosticReportKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The document diagnostic report kinds.\n\n@since 3.17.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 99,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticSeverity",
      "class_info": {
        "name": "DiagnosticSeverity",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The diagnostic's severity.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 514,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticTag",
      "class_info": {
        "name": "DiagnosticTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The diagnostic tags.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 527,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ConfigurationParams",
      "class_info": {
        "name": "ConfigurationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a configuration request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 870,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentDiagnosticParams",
      "class_info": {
        "name": "DocumentDiagnosticParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters of the document diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1633,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentDiagnosticReportPartialResult",
      "class_info": {
        "name": "DocumentDiagnosticReportPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A partial result for a document diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1652,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticServerCancellationData",
      "class_info": {
        "name": "DiagnosticServerCancellationData",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Cancellation data returned from a diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1664,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticRegistrationOptions",
      "class_info": {
        "name": "DiagnosticRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Diagnostic registration options.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1673,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceDiagnosticParams",
      "class_info": {
        "name": "WorkspaceDiagnosticParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters of the workspace diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1697,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceDiagnosticReport",
      "class_info": {
        "name": "WorkspaceDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1715,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceDiagnosticReportPartialResult",
      "class_info": {
        "name": "WorkspaceDiagnosticReportPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A partial result for a workspace diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1724,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeConfigurationParams",
      "class_info": {
        "name": "DidChangeConfigurationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a change configuration notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1878,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeConfigurationRegistrationOptions",
      "class_info": {
        "name": "DidChangeConfigurationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1885,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PublishDiagnosticsParams",
      "class_info": {
        "name": "PublishDiagnosticsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The publish diagnostic notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2020,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ConfigurationItem",
      "class_info": {
        "name": "ConfigurationItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3055,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RelatedFullDocumentDiagnosticReport",
      "class_info": {
        "name": "RelatedFullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A full diagnostic report with a set of related documents.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3456,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RelatedUnchangedDocumentDiagnosticReport",
      "class_info": {
        "name": "RelatedUnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An unchanged diagnostic report with a set of related documents.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3485,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FullDocumentDiagnosticReport",
      "class_info": {
        "name": "FullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A diagnostic report with a full set of problems.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3514,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.UnchangedDocumentDiagnosticReport",
      "class_info": {
        "name": "UnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A diagnostic report indicating that the last returned\nreport is still accurate.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3530,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticOptions",
      "class_info": {
        "name": "DiagnosticOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Diagnostic options.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3547,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Diagnostic",
      "class_info": {
        "name": "Diagnostic",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3831,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceFullDocumentDiagnosticReport",
      "class_info": {
        "name": "WorkspaceFullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A full document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4285,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceUnchangedDocumentDiagnosticReport",
      "class_info": {
        "name": "WorkspaceUnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An unchanged document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4306,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticRelatedInformation",
      "class_info": {
        "name": "DiagnosticRelatedInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4497,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeConfigurationClientCapabilities",
      "class_info": {
        "name": "DidChangeConfigurationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4835,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticWorkspaceClientCapabilities",
      "class_info": {
        "name": "DiagnosticWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Workspace client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4962,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PublishDiagnosticsClientCapabilities",
      "class_info": {
        "name": "PublishDiagnosticsClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The publish diagnostic client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5268,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DiagnosticClientCapabilities",
      "class_info": {
        "name": "DiagnosticClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5406,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 18
    },
    {
      "full_name": "serena.config.context_mode.SerenaAgentContext",
      "class_info": {
        "name": "SerenaAgentContext",
        "module": "serena.config.context_mode",
        "docstring": "Represents a context where the agent is operating (an IDE, a chat, etc.), typically read off a YAML file.\nAn agent can only be in a single context at a time.\nThe contexts cannot be changed after the agent is running.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.context_mode",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 136
          },
          {
            "name": "from_yaml",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a context from a YAML file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "yaml_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 140
          },
          {
            "name": "get_path",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Get the path to the YAML file for a context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 151
          },
          {
            "name": "from_name",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a registered Serena context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 167
          },
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_or_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 173
          },
          {
            "name": "list_registered_context_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all registered contexts (from the corresponding YAML files in the serena repo).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_user_contexts",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 179
          },
          {
            "name": "list_custom_context_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all custom contexts defined by the user.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 187
          },
          {
            "name": "load_default",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load the default context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 192
          },
          {
            "name": "print_overview",
            "module": "serena.config.context_mode",
            "signature": "def print_overview(self) -> None:",
            "docstring": "Print an overview of the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 196
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 120,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 17
    },
    {
      "full_name": "interprompt.multilang_prompt.MultiLangPromptTemplate",
      "class_info": {
        "name": "MultiLangPromptTemplate",
        "module": "interprompt.multilang_prompt",
        "docstring": "Represents a prompt template with support for multiple languages.\nThe parameters of all prompt templates (for all languages) are (must be) the same.",
        "bases": [
          "ParameterizedTemplateInterface"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __init__(self, name: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 134
          },
          {
            "name": "__len__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __len__(self) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 137
          },
          {
            "name": "name",
            "module": "interprompt.multilang_prompt",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 141
          },
          {
            "name": "add_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def add_prompt_template(self, prompt_template: PromptTemplate, lang_code: str=DEFAULT_LANG_CODE, allow_overwrite: bool=False) -> None:",
            "docstring": "Adds a prompt template for a new language.\nThe parameters of all prompt templates (for all languages) are (must be) the same, so if a prompt template is already registered,\nthe parameters of the new prompt template should be the same as the existing ones.\n\n:param prompt_template: the prompt template to add\n:param lang_code: the language code for which to add the prompt template. For single-language use cases, you should always use the default language code.\n:param allow_overwrite: whether to allow overwriting an existing entry for the same language",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_template",
                "annotation": "PromptTemplate",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "allow_overwrite",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 144
          },
          {
            "name": "get_prompt_template",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_prompt_template(self, lang_code: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> PromptTemplate:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fallback_mode",
                "annotation": "LanguageFallbackMode",
                "default": null
              }
            ],
            "return_annotation": "PromptTemplate",
            "line_number": 167
          },
          {
            "name": "get_parameters",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_parameters(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 172
          },
          {
            "name": "render",
            "module": "interprompt.multilang_prompt",
            "signature": "def render(self, params: dict[str, Any], lang_code: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict[str, Any]",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fallback_mode",
                "annotation": "LanguageFallbackMode",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 180
          },
          {
            "name": "has_item",
            "module": "interprompt.multilang_prompt",
            "signature": "def has_item(self, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 189
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 128,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 16
    },
    {
      "full_name": "serena.symbol.LanguageServerSymbolLocation",
      "class_info": {
        "name": "LanguageServerSymbolLocation",
        "module": "serena.symbol",
        "docstring": "Represents the (start) location of a symbol identifier, which, within Serena, uniquely identifies the symbol.",
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "serena.symbol",
            "signature": "def __post_init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 44
          },
          {
            "name": "to_dict",
            "module": "serena.symbol",
            "signature": "def to_dict(self, include_relative_path: bool=True) -> dict[str, Any]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_relative_path",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 48
          },
          {
            "name": "has_position_in_file",
            "module": "serena.symbol",
            "signature": "def has_position_in_file(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 54
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 16
    },
    {
      "full_name": "serena.tools.tools_base.Component",
      "class_info": {
        "name": "Component",
        "module": "serena.tools.tools_base",
        "docstring": null,
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.tools.tools_base",
            "signature": "def __init__(self, agent: 'SerenaAgent'):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "agent",
                "annotation": "'SerenaAgent'",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 30
          },
          {
            "name": "get_project_root",
            "module": "serena.tools.tools_base",
            "signature": "def get_project_root(self) -> str:",
            "docstring": ":return: the root directory of the active project, raises a ValueError if no active project configuration is set",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 33
          },
          {
            "name": "prompt_factory",
            "module": "serena.tools.tools_base",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PromptFactory",
            "line_number": 40
          },
          {
            "name": "memories_manager",
            "module": "serena.tools.tools_base",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'MemoriesManager'",
            "line_number": 44
          },
          {
            "name": "create_language_server_symbol_retriever",
            "module": "serena.tools.tools_base",
            "signature": "def create_language_server_symbol_retriever(self) -> LanguageServerSymbolRetriever:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "LanguageServerSymbolRetriever",
            "line_number": 48
          },
          {
            "name": "project",
            "module": "serena.tools.tools_base",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Project",
            "line_number": 56
          },
          {
            "name": "create_code_editor",
            "module": "serena.tools.tools_base",
            "signature": "def create_code_editor(self) -> 'CodeEditor':",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'CodeEditor'",
            "line_number": 59
          },
          {
            "name": "lines_read",
            "module": "serena.tools.tools_base",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'LinesRead'",
            "line_number": 68
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 29,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 16
    },
    {
      "full_name": "solidlsp.language_servers.elixir_tools.elixir_tools.ElixirTools",
      "class_info": {
        "name": "ElixirTools",
        "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
        "docstring": "Provides Elixir specific instantiation of the LanguageServer class using Next LS from elixir-tools.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 28
          },
          {
            "name": "_is_next_ls_internal_file",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def _is_next_ls_internal_file(self, abs_path: str) -> bool:",
            "docstring": "Check if an absolute path is a Next LS internal file that should be ignored.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "abs_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 37
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@override",
            "docstring": "Override to filter out Next LS internal files from references.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 50
          },
          {
            "name": "_get_elixir_version",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@classmethod",
            "docstring": "Get the installed Elixir version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 73
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Next LS.\nDownloads the Next LS binary for the current platform and returns the path to the executable.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 84
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 168
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Next LS Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 188
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def _start_server(self):",
            "docstring": "Start Next LS server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 248
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 16
    },
    {
      "full_name": "solidlsp.ls_logger.LanguageServerLogger",
      "class_info": {
        "name": "LanguageServerLogger",
        "module": "solidlsp.ls_logger",
        "docstring": "Logger class",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_logger",
            "signature": "def __init__(self, json_format: bool=False, log_level: int=logging.INFO) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "json_format",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 30
          },
          {
            "name": "log",
            "module": "solidlsp.ls_logger",
            "signature": "def log(self, debug_message: str, level: int, sanitized_error_message: str='', stacklevel: int=2) -> None:",
            "docstring": "Log the debug and sanitized messages using the logger",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "debug_message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "level",
                "annotation": "int",
                "default": null
              },
              {
                "name": "sanitized_error_message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "stacklevel",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 35
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 25,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "serena.cli.PromptCommands",
      "class_info": {
        "name": "PromptCommands",
        "module": "serena.cli",
        "docstring": null,
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 505
          },
          {
            "name": "_get_user_prompt_yaml_path",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "prompt_yaml_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 509
          },
          {
            "name": "list",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command"
            ],
            "parameters": [],
            "return_annotation": "None",
            "line_number": 515
          },
          {
            "name": "create_override",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": ":param prompt_yaml_name: The yaml name of the prompt you want to override. Call the `list` command for discovering valid prompt yaml names.\n:return:",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "prompt_yaml_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 527
          },
          {
            "name": "edit_override",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": ":param prompt_yaml_name: The yaml name of the prompt override to edit.\n:return:",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "prompt_yaml_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 545
          },
          {
            "name": "list_overrides",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command"
            ],
            "parameters": [],
            "return_annotation": "None",
            "line_number": 561
          },
          {
            "name": "delete_override",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": ":param prompt_yaml_name:  The yaml name of the prompt override to delete.\"\n:return:",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "prompt_yaml_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 572
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 504,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "serena.symbol.JetBrainsSymbol",
      "class_info": {
        "name": "JetBrainsSymbol",
        "module": "serena.symbol",
        "docstring": null,
        "bases": [
          "Symbol"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.symbol",
            "signature": "def __init__(self, symbol_dict: dict, project: Project) -> None:",
            "docstring": ":param symbol_dict: dictionary as returned by the JetBrains plugin client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol_dict",
                "annotation": "dict",
                "default": null
              },
              {
                "name": "project",
                "annotation": "Project",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 598
          },
          {
            "name": "get_relative_path",
            "module": "serena.symbol",
            "signature": "def get_relative_path(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 608
          },
          {
            "name": "get_file_content",
            "module": "serena.symbol",
            "signature": "def get_file_content(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 611
          },
          {
            "name": "is_position_in_file_available",
            "module": "serena.symbol",
            "signature": "def is_position_in_file_available(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 618
          },
          {
            "name": "get_body_start_position",
            "module": "serena.symbol",
            "signature": "def get_body_start_position(self) -> PositionInFile | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 621
          },
          {
            "name": "get_body_end_position",
            "module": "serena.symbol",
            "signature": "def get_body_end_position(self) -> PositionInFile | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 630
          },
          {
            "name": "is_neighbouring_definition_separated_by_empty_line",
            "module": "serena.symbol",
            "signature": "def is_neighbouring_definition_separated_by_empty_line(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 639
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 597,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "serena.generated.generated_prompt_factory.PromptFactory",
      "class_info": {
        "name": "PromptFactory",
        "module": "serena.generated.generated_prompt_factory",
        "docstring": "A class for retrieving and rendering prompt templates and prompt lists.",
        "bases": [
          "PromptFactoryBase"
        ],
        "methods": [
          {
            "name": "create_onboarding_prompt",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_onboarding_prompt(self, *, system: Any) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 17
          },
          {
            "name": "create_think_about_collected_information",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_think_about_collected_information(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 20
          },
          {
            "name": "create_think_about_task_adherence",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_think_about_task_adherence(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 23
          },
          {
            "name": "create_think_about_whether_you_are_done",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_think_about_whether_you_are_done(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 26
          },
          {
            "name": "create_summarize_changes",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_summarize_changes(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 29
          },
          {
            "name": "create_prepare_for_new_conversation",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_prepare_for_new_conversation(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 32
          },
          {
            "name": "create_system_prompt",
            "module": "serena.generated.generated_prompt_factory",
            "signature": "def create_system_prompt(self, *, available_markers: Any, available_tools: Any, context_system_prompt: Any, mode_system_prompts: Any) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 35
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__PublishDiagnosticsClientCapabilities_tagSupport_Type_1",
      "class_info": {
        "name": "__PublishDiagnosticsClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5812,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "solidlsp.language_servers.intelephense.Intelephense",
      "class_info": {
        "name": "Intelephense",
        "module": "solidlsp.language_servers.intelephense",
        "docstring": "Provides PHP specific instantiation of the LanguageServer class using Intelephense.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 30
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Intelephense and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 38
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 85
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the TypeScript Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 102
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "def _start_server(self):",
            "docstring": "Start Intelephense server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 129
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 173
          },
          {
            "name": "_send_definition_request",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "definition_params",
                "annotation": "DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 183
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "solidlsp.language_servers.gopls.Gopls",
      "class_info": {
        "name": "Gopls",
        "module": "solidlsp.language_servers.gopls",
        "docstring": "Provides Go specific instantiation of the LanguageServer class using gopls.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 23
          },
          {
            "name": "_get_go_version",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Get the installed Go version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 31
          },
          {
            "name": "_get_gopls_version",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Get the installed gopls version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 42
          },
          {
            "name": "_setup_runtime_dependency",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Check if required Go runtime dependencies are available.\nRaises RuntimeError with helpful message if dependencies are missing.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 53
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.gopls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 74
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Go Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.gopls",
            "signature": "def _start_server(self):",
            "docstring": "Start gopls server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 122
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 17,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 15
    },
    {
      "full_name": "solidlsp.ls_config.LanguageServerConfig",
      "class_info": {
        "name": "LanguageServerConfig",
        "module": "solidlsp.ls_config",
        "docstring": "Configuration parameters",
        "bases": [],
        "methods": [
          {
            "name": "from_dict",
            "module": "solidlsp.ls_config",
            "signature": "@classmethod",
            "docstring": "Create a MultilspyConfig instance from a dictionary",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "env",
                "annotation": "dict",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 126
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 114,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 14
    },
    {
      "full_name": "serena.dashboard.SerenaDashboardAPI",
      "class_info": {
        "name": "SerenaDashboardAPI",
        "module": "serena.dashboard",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.dashboard",
            "signature": "def __init__(self, memory_log_handler: MemoryLogHandler, tool_names: list[str], shutdown_callback: Callable[[], None] | None=None, tool_usage_stats: ToolUsageStats | None=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "memory_log_handler",
                "annotation": "MemoryLogHandler",
                "default": null
              },
              {
                "name": "tool_names",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "shutdown_callback",
                "annotation": "Callable[[], None] | None",
                "default": null
              },
              {
                "name": "tool_usage_stats",
                "annotation": "ToolUsageStats | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 41
          },
          {
            "name": "memory_log_handler",
            "module": "serena.dashboard",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "MemoryLogHandler",
            "line_number": 56
          },
          {
            "name": "_setup_routes",
            "module": "serena.dashboard",
            "signature": "def _setup_routes(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 59
          },
          {
            "name": "_get_log_messages",
            "module": "serena.dashboard",
            "signature": "def _get_log_messages(self, request_log: RequestLog) -> ResponseLog:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_log",
                "annotation": "RequestLog",
                "default": null
              }
            ],
            "return_annotation": "ResponseLog",
            "line_number": 106
          },
          {
            "name": "_get_tool_names",
            "module": "serena.dashboard",
            "signature": "def _get_tool_names(self) -> ResponseToolNames:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "ResponseToolNames",
            "line_number": 111
          },
          {
            "name": "_get_tool_stats",
            "module": "serena.dashboard",
            "signature": "def _get_tool_stats(self) -> ResponseToolStats:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "ResponseToolStats",
            "line_number": 114
          },
          {
            "name": "_clear_tool_stats",
            "module": "serena.dashboard",
            "signature": "def _clear_tool_stats(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 120
          },
          {
            "name": "_shutdown",
            "module": "serena.dashboard",
            "signature": "def _shutdown(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 124
          },
          {
            "name": "_find_first_free_port",
            "module": "serena.dashboard",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "start_port",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 134
          },
          {
            "name": "run",
            "module": "serena.dashboard",
            "signature": "def run(self, host: str='0.0.0.0', port: int=24282) -> int:",
            "docstring": "Runs the dashboard on the given host and port and returns the port number.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "host",
                "annotation": "str",
                "default": null
              },
              {
                "name": "port",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 146
          },
          {
            "name": "run_in_thread",
            "module": "serena.dashboard",
            "signature": "def run_in_thread(self) -> tuple[threading.Thread, int]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "tuple[threading.Thread, int]",
            "line_number": 158
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 38,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 14
    },
    {
      "full_name": "solidlsp.language_servers.terraform_ls.TerraformLS",
      "class_info": {
        "name": "TerraformLS",
        "module": "solidlsp.language_servers.terraform_ls",
        "docstring": "Provides Terraform specific instantiation of the LanguageServer class using terraform-ls.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 25
          },
          {
            "name": "_ensure_tf_command_available",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 29
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for terraform-ls.\nDownloads and installs terraform-ls if not already present.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 60
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a TerraformLS instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 118
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Terraform Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 138
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "def _start_server(self):",
            "docstring": "Start terraform-ls server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 169
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 14
    },
    {
      "full_name": "interprompt.multilang_prompt._MultiLangContainer",
      "class_info": {
        "name": "_MultiLangContainer",
        "module": "interprompt.multilang_prompt",
        "docstring": "A container of items (usually, all having the same semantic meaning) which are associated with different languages.\nCan also be used for single-language purposes by always using the default language code.",
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __init__(self, name: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 69
          },
          {
            "name": "_tostring_excludes",
            "module": "interprompt.multilang_prompt",
            "signature": "def _tostring_excludes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 74
          },
          {
            "name": "_tostring_additional_entries",
            "module": "interprompt.multilang_prompt",
            "signature": "def _tostring_additional_entries(self) -> dict[str, Any]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "dict[str, Any]",
            "line_number": 77
          },
          {
            "name": "get_language_codes",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_language_codes(self) -> list[str]:",
            "docstring": "The language codes for which items are registered in the container.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 80
          },
          {
            "name": "add_item",
            "module": "interprompt.multilang_prompt",
            "signature": "def add_item(self, item: T, lang_code: str=DEFAULT_LANG_CODE, allow_overwrite: bool=False) -> None:",
            "docstring": "Adds an item to the container, representing the same semantic entity as the other items in the container but in a different language.\n\n:param item: the item to add\n:param lang_code: the language shortcode for which to add the item. Use the default for single-language use cases.\n:param allow_overwrite: if True, allow overwriting an existing entry for the same language",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "item",
                "annotation": "T",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "allow_overwrite",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 84
          },
          {
            "name": "has_item",
            "module": "interprompt.multilang_prompt",
            "signature": "def has_item(self, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 95
          },
          {
            "name": "get_item",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_item(self, lang: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> T:",
            "docstring": "Gets the item for the given language.\n\n:param lang: the language shortcode for which to obtain the prompt template. A default language can be specified.\n:param fallback_mode: defines what to do if there is no item for the given language\n:return: the item",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lang",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fallback_mode",
                "annotation": "LanguageFallbackMode",
                "default": null
              }
            ],
            "return_annotation": "T",
            "line_number": 98
          },
          {
            "name": "__len__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __len__(self) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 124
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 63,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "solidlsp.ls_handler.Request",
      "class_info": {
        "name": "Request",
        "module": "solidlsp.ls_handler",
        "docstring": null,
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, request_id: int, method: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "int",
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 63
          },
          {
            "name": "_tostring_includes",
            "module": "solidlsp.ls_handler",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 69
          },
          {
            "name": "on_result",
            "module": "solidlsp.ls_handler",
            "signature": "def on_result(self, params: PayloadLike) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "PayloadLike",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 72
          },
          {
            "name": "on_error",
            "module": "solidlsp.ls_handler",
            "signature": "def on_error(self, err: Exception) -> None:",
            "docstring": ":param err: the error that occurred while processing the request (typically an LSPError\n    for errors returned by the LS or LanguageServerTerminatedException if the error\n    is due to the language server process terminating unexpectedly).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "err",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 76
          },
          {
            "name": "get_result",
            "module": "solidlsp.ls_handler",
            "signature": "def get_result(self, timeout: float | None=None) -> Result:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "Result",
            "line_number": 85
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 53,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.cli.ModeCommands",
      "class_info": {
        "name": "ModeCommands",
        "module": "serena.cli",
        "docstring": "Group for 'mode' subcommands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 232
          },
          {
            "name": "list",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command"
            ],
            "parameters": [],
            "return_annotation": "None",
            "line_number": 237
          },
          {
            "name": "create",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.option",
              "click.option"
            ],
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "from_internal",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 257
          },
          {
            "name": "edit",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "mode_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 279
          },
          {
            "name": "delete",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "mode_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 295
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 229,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.cli.ContextCommands",
      "class_info": {
        "name": "ContextCommands",
        "module": "serena.cli",
        "docstring": "Group for 'context' subcommands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 307
          },
          {
            "name": "list",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command"
            ],
            "parameters": [],
            "return_annotation": "None",
            "line_number": 314
          },
          {
            "name": "create",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.option",
              "click.option"
            ],
            "parameters": [
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "from_internal",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 334
          },
          {
            "name": "edit",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "context_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 356
          },
          {
            "name": "delete",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument"
            ],
            "parameters": [
              {
                "name": "context_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 372
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 304,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.symbol.Symbol",
      "class_info": {
        "name": "Symbol",
        "module": "serena.symbol",
        "docstring": null,
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "get_body_start_position",
            "module": "serena.symbol",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 82
          },
          {
            "name": "get_body_end_position",
            "module": "serena.symbol",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile | None",
            "line_number": 86
          },
          {
            "name": "get_body_start_position_or_raise",
            "module": "serena.symbol",
            "signature": "def get_body_start_position_or_raise(self) -> PositionInFile:",
            "docstring": "Get the start position of the symbol body, raising an error if it is not defined.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile",
            "line_number": 89
          },
          {
            "name": "get_body_end_position_or_raise",
            "module": "serena.symbol",
            "signature": "def get_body_end_position_or_raise(self) -> PositionInFile:",
            "docstring": "Get the end position of the symbol body, raising an error if it is not defined.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PositionInFile",
            "line_number": 98
          },
          {
            "name": "is_neighbouring_definition_separated_by_empty_line",
            "module": "serena.symbol",
            "signature": "@abstractmethod",
            "docstring": ":return: whether a symbol definition of this symbol's kind is usually separated from the\n    previous/next definition by at least one empty line.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 108
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 80,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.mcp.SerenaMCPFactorySingleProcess",
      "class_info": {
        "name": "SerenaMCPFactorySingleProcess",
        "module": "serena.mcp",
        "docstring": "MCP server factory where the SerenaAgent and its language server run in the same process as the MCP server",
        "bases": [
          "SerenaMCPFactory"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.mcp",
            "signature": "def __init__(self, context: str=DEFAULT_CONTEXT, project: str | None=None, memory_log_handler: MemoryLogHandler | None=None):",
            "docstring": ":param context: The context name or path to context file\n:param project: Either an absolute path to the project directory or a name of an already registered project.\n    If the project passed here hasn't been registered yet, it will be registered automatically and can be activated by its name\n    afterward.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "context",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "memory_log_handler",
                "annotation": "MemoryLogHandler | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 201
          },
          {
            "name": "_instantiate_agent",
            "module": "serena.mcp",
            "signature": "def _instantiate_agent(self, serena_config: SerenaConfig, modes: list[SerenaAgentMode]) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "serena_config",
                "annotation": "SerenaConfig",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[SerenaAgentMode]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 212
          },
          {
            "name": "_iter_tools",
            "module": "serena.mcp",
            "signature": "def _iter_tools(self) -> Iterator[Tool]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Iterator[Tool]",
            "line_number": 217
          },
          {
            "name": "_get_initial_instructions",
            "module": "serena.mcp",
            "signature": "def _get_initial_instructions(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 221
          },
          {
            "name": "server_lifespan",
            "module": "serena.mcp",
            "signature": "@asynccontextmanager",
            "docstring": null,
            "is_method": true,
            "is_async": true,
            "decorators": [
              "asynccontextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mcp_server",
                "annotation": "FastMCP",
                "default": null
              }
            ],
            "return_annotation": "AsyncIterator[None]",
            "line_number": 227
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 196,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.gui_log_viewer.GuiLogViewerHandler",
      "class_info": {
        "name": "GuiLogViewerHandler",
        "module": "serena.gui_log_viewer",
        "docstring": "A logging handler that sends log records to a ThreadedLogViewer instance.\nThis handler can be integrated with Python's standard logging module\nto direct log entries to a GUI log viewer.",
        "bases": [
          "logging.Handler"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.gui_log_viewer",
            "signature": "def __init__(self, log_viewer: GuiLogViewer, level=logging.NOTSET, format_string: str | None='%(levelname)-5s %(asctime)-15s %(name)s:%(funcName)s:%(lineno)d - %(message)s'):",
            "docstring": "Initialize the handler with a ThreadedLogViewer instance.\n\nArgs:\n    log_viewer: A ThreadedLogViewer instance that will display the logs\n    level: The logging level (default: NOTSET which captures all logs)\n    format_string: the format string",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "log_viewer",
                "annotation": "GuiLogViewer",
                "default": null
              },
              {
                "name": "level",
                "annotation": null,
                "default": null
              },
              {
                "name": "format_string",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 324
          },
          {
            "name": "is_instance_registered",
            "module": "serena.gui_log_viewer",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 348
          },
          {
            "name": "emit",
            "module": "serena.gui_log_viewer",
            "signature": "def emit(self, record):",
            "docstring": "Emit a log record to the ThreadedLogViewer.\n\nArgs:\n    record: The log record to emit",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "record",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 354
          },
          {
            "name": "close",
            "module": "serena.gui_log_viewer",
            "signature": "def close(self):",
            "docstring": "Close the handler and optionally stop the log viewer.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 378
          },
          {
            "name": "stop_viewer",
            "module": "serena.gui_log_viewer",
            "signature": "def stop_viewer(self):",
            "docstring": "Explicitly stop the associated log viewer.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 386
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 317,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "serena.util.logging.MemoryLogHandler",
      "class_info": {
        "name": "MemoryLogHandler",
        "module": "serena.util.logging",
        "docstring": null,
        "bases": [
          "logging.Handler"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.util.logging",
            "signature": "def __init__(self, level: int=logging.NOTSET) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "level",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 11
          },
          {
            "name": "add_emit_callback",
            "module": "serena.util.logging",
            "signature": "def add_emit_callback(self, callback: Callable[[str], None]) -> None:",
            "docstring": "Adds a callback that will be called with each log message.\nThe callback should accept a single string argument (the log message).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "callback",
                "annotation": "Callable[[str], None]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 23
          },
          {
            "name": "emit",
            "module": "serena.util.logging",
            "signature": "def emit(self, record: logging.LogRecord) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "record",
                "annotation": "logging.LogRecord",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 30
          },
          {
            "name": "_process_queue",
            "module": "serena.util.logging",
            "signature": "def _process_queue(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 34
          },
          {
            "name": "get_log_messages",
            "module": "serena.util.logging",
            "signature": "def get_log_messages(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 48
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 10,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "solidlsp.language_servers.solargraph.Solargraph",
      "class_info": {
        "name": "Solargraph",
        "module": "solidlsp.language_servers.solargraph",
        "docstring": "Provides Ruby specific instantiation of the LanguageServer class using Solargraph.\nContains various configurations and settings specific to Ruby.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a Solargraph instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 30
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 55
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@staticmethod",
            "docstring": "Setup runtime dependencies for Solargraph and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 59
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Solargraph Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 153
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Solargraph Language Server for Ruby",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 173
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "solidlsp.language_servers.omnisharp.OmniSharp",
      "class_info": {
        "name": "OmniSharp",
        "module": "solidlsp.language_servers.omnisharp",
        "docstring": "Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates an OmniSharp instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 62
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 116
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Omnisharp Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 120
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for OmniSharp.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 145
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Omnisharp Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 207
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 57,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "solidlsp.language_servers.rust_analyzer.RustAnalyzer",
      "class_info": {
        "name": "RustAnalyzer",
        "module": "solidlsp.language_servers.rust_analyzer",
        "docstring": "Provides Rust specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Rust.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a RustAnalyzer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 48
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for rust_analyzer and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 52
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Rust Analyzer Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 119
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Rust Analyzer Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 592
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "solidlsp.language_servers.eclipse_jdtls.EclipseJDTLS",
      "class_info": {
        "name": "EclipseJDTLS",
        "module": "solidlsp.language_servers.eclipse_jdtls",
        "docstring": "The EclipseJDTLS class provides a Java specific implementation of the LanguageServer class",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a new EclipseJDTLS instance initializing the language server settings appropriately.\nThis class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 46
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 141
          },
          {
            "name": "_setupRuntimeDependencies",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for EclipseJDTLS and return the paths.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "RuntimeDependencyPaths",
            "line_number": 159
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def _get_initialize_params(self, repository_absolute_path: str) -> InitializeParams:",
            "docstring": "Returns the initialize parameters for the EclipseJDTLS server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 319
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Eclipse JDTLS Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 644
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 41,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 13
    },
    {
      "full_name": "interprompt.multilang_prompt.PromptTemplate",
      "class_info": {
        "name": "PromptTemplate",
        "module": "interprompt.multilang_prompt",
        "docstring": null,
        "bases": [
          "ToStringMixin",
          "ParameterizedTemplateInterface"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __init__(self, name: str, jinja_template_string: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "jinja_template_string",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 15
          },
          {
            "name": "_tostring_exclude_private",
            "module": "interprompt.multilang_prompt",
            "signature": "def _tostring_exclude_private(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 19
          },
          {
            "name": "render",
            "module": "interprompt.multilang_prompt",
            "signature": "def render(self, **params: Any) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 22
          },
          {
            "name": "get_parameters",
            "module": "interprompt.multilang_prompt",
            "signature": "def get_parameters(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 25
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 14,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "solidlsp.ls_config.Language",
      "class_info": {
        "name": "Language",
        "module": "solidlsp.ls_config",
        "docstring": "Possible languages with Multilspy.",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [
          {
            "name": "iter_all",
            "module": "solidlsp.ls_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_experimental",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Iterable[Self]",
            "line_number": 57
          },
          {
            "name": "is_experimental",
            "module": "solidlsp.ls_config",
            "signature": "def is_experimental(self) -> bool:",
            "docstring": "Check if the language server is experimental or deprecated.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 62
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_config",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 68
          },
          {
            "name": "get_source_fn_matcher",
            "module": "solidlsp.ls_config",
            "signature": "def get_source_fn_matcher(self) -> FilenameMatcher:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "FilenameMatcher",
            "line_number": 71
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "serena.code_editor.EditedFile",
      "class_info": {
        "name": "EditedFile",
        "module": "serena.code_editor",
        "docstring": null,
        "bases": [
          "CodeEditor.EditedFile"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.code_editor",
            "signature": "def __init__(self, relative_path: str, project: Project):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project",
                "annotation": "Project",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 265
          },
          {
            "name": "get_contents",
            "module": "serena.code_editor",
            "signature": "def get_contents(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 271
          },
          {
            "name": "delete_text_between_positions",
            "module": "serena.code_editor",
            "signature": "def delete_text_between_positions(self, start_pos: PositionInFile, end_pos: PositionInFile) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "start_pos",
                "annotation": "PositionInFile",
                "default": null
              },
              {
                "name": "end_pos",
                "annotation": "PositionInFile",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 274
          },
          {
            "name": "insert_text_at_position",
            "module": "serena.code_editor",
            "signature": "def insert_text_at_position(self, pos: PositionInFile, text: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "pos",
                "annotation": "PositionInFile",
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 279
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 264,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "serena.gui_log_viewer.GuiLogViewer",
      "class_info": {
        "name": "GuiLogViewer",
        "module": "serena.gui_log_viewer",
        "docstring": "A class that creates a Tkinter GUI for displaying log messages in a separate thread.\nThe log viewer supports coloring based on log levels (DEBUG, INFO, WARNING, ERROR).\nIt can also highlight tool names in boldface when they appear in log messages.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.gui_log_viewer",
            "signature": "def __init__(self, mode: Literal['dashboard', 'error'], title='Log Viewer', memory_log_handler: MemoryLogHandler | None=None, width=800, height=600):",
            "docstring": ":param mode: the mode; if \"dashboard\", run a dashboard with logs and some control options; if \"error\", run\n    a simple error log viewer (for fatal exceptions)\n:param title: the window title\n:param memory_log_handler: an optional log handler from which to obtain log messages; If not provided,\n    must pass the instance to a `GuiLogViewerHandler` to add log messages.\n:param width: the initial window width\n:param height: the initial window height",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mode",
                "annotation": "Literal['dashboard', 'error']",
                "default": null
              },
              {
                "name": "title",
                "annotation": null,
                "default": null
              },
              {
                "name": "memory_log_handler",
                "annotation": "MemoryLogHandler | None",
                "default": null
              },
              {
                "name": "width",
                "annotation": null,
                "default": null
              },
              {
                "name": "height",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 34
          },
          {
            "name": "start",
            "module": "serena.gui_log_viewer",
            "signature": "def start(self):",
            "docstring": "Start the log viewer in a separate thread.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 74
          },
          {
            "name": "stop",
            "module": "serena.gui_log_viewer",
            "signature": "def stop(self):",
            "docstring": "Stop the log viewer.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 83
          },
          {
            "name": "set_tool_names",
            "module": "serena.gui_log_viewer",
            "signature": "def set_tool_names(self, tool_names):",
            "docstring": "Set or update the list of tool names to be highlighted in log messages.\n\nArgs:\n    tool_names (list): A list of tool name strings to highlight",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_names",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 91
          },
          {
            "name": "add_log",
            "module": "serena.gui_log_viewer",
            "signature": "def add_log(self, message):",
            "docstring": "Add a log message to the viewer.\n\nArgs:\n    message (str): The log message to display",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 101
          },
          {
            "name": "_determine_log_level",
            "module": "serena.gui_log_viewer",
            "signature": "def _determine_log_level(self, message):",
            "docstring": "Determine the log level from the message.\n\nArgs:\n    message (str): The log message\n\nReturns:\n    LogLevel: The determined log level",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 111
          },
          {
            "name": "_process_queue",
            "module": "serena.gui_log_viewer",
            "signature": "def _process_queue(self):",
            "docstring": "Process messages from the queue and update the text widget.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 134
          },
          {
            "name": "run_gui",
            "module": "serena.gui_log_viewer",
            "signature": "def run_gui(self):",
            "docstring": "Run the GUI",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 213
          },
          {
            "name": "_shutdown_server",
            "module": "serena.gui_log_viewer",
            "signature": "def _shutdown_server(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 310
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 27,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "serena.util.thread.ExecutionResult",
      "class_info": {
        "name": "ExecutionResult",
        "module": "serena.util.thread",
        "docstring": null,
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.util.thread",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 25
          },
          {
            "name": "set_result_value",
            "module": "serena.util.thread",
            "signature": "def set_result_value(self, value: T) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": "T",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 30
          },
          {
            "name": "set_timed_out",
            "module": "serena.util.thread",
            "signature": "def set_timed_out(self, exception: TimeoutException) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exception",
                "annotation": "TimeoutException",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 34
          },
          {
            "name": "set_exception",
            "module": "serena.util.thread",
            "signature": "def set_exception(self, exception: Exception) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exception",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 38
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 18,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.server.LSPError",
      "class_info": {
        "name": "LSPError",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def __init__(self, code: ErrorCodes, message: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "code",
                "annotation": "ErrorCodes",
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 63
          },
          {
            "name": "to_lsp",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def to_lsp(self) -> StringDict:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "StringDict",
            "line_number": 67
          },
          {
            "name": "from_lsp",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "d",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "'LSPError'",
            "line_number": 71
          },
          {
            "name": "__str__",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 74
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 62,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "solidlsp.language_servers.pyright_server.PyrightServer",
      "class_info": {
        "name": "PyrightServer",
        "module": "solidlsp.language_servers.pyright_server",
        "docstring": "Provides Python specific instantiation of the LanguageServer class using Pyright.\nContains various configurations and settings specific to Python.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a PyrightServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 50
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Pyright Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 54
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Pyright Language Server and waits for initial workspace analysis to complete.\n\nThis prevents zombie processes by ensuring Pyright has finished its initial background\ntasks before we consider the server ready.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and workspace analysis is complete\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown cleanly\n```",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 112
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 21,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "solidlsp.language_servers.jedi_server.JediServer",
      "class_info": {
        "name": "JediServer",
        "module": "solidlsp.language_servers.jedi_server",
        "docstring": "Provides Python specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Python.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a JediServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 24
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 40
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Jedi Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 44
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the JEDI Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 155
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "solidlsp.language_servers.clojure_lsp.ClojureLSP",
      "class_info": {
        "name": "ClojureLSP",
        "module": "solidlsp.language_servers.clojure_lsp",
        "docstring": "Provides a clojure-lsp specific instantiation of the LanguageServer class. Contains various configurations and settings specific to clojure.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a ClojureLSP instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 81
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for clojure-lsp and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 102
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "@staticmethod",
            "docstring": "Returns the init params for clojure-lsp.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 124
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "def _start_server(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 156
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 42,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 12
    },
    {
      "full_name": "interprompt.jinja_template.JinjaTemplate",
      "class_info": {
        "name": "JinjaTemplate",
        "module": "interprompt.jinja_template",
        "docstring": null,
        "bases": [
          "ParameterizedTemplateInterface"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.jinja_template",
            "signature": "def __init__(self, template_string: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "template_string",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 27
          },
          {
            "name": "render",
            "module": "interprompt.jinja_template",
            "signature": "def render(self, **params: Any) -> str:",
            "docstring": "Renders the template with the given kwargs. You can find out which parameters are required by calling get_parameter_names().",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 33
          },
          {
            "name": "get_parameters",
            "module": "interprompt.jinja_template",
            "signature": "def get_parameters(self) -> list[str]:",
            "docstring": "A sorted list of parameter names that are extracted from the template string. It is impossible to know the types of the parameter\nvalues, they can be primitives, dicts or dict-like objects.\n\n:return: the list of parameter names",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 37
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "solidlsp.ls_exceptions.SolidLSPException",
      "class_info": {
        "name": "SolidLSPException",
        "module": "solidlsp.ls_exceptions",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_exceptions",
            "signature": "def __init__(self, message: str, cause: Exception | None=None):",
            "docstring": "Initializes the exception with the given message.\n\n:param message: the message describing the exception\n:param cause: the original exception that caused this exception, if any.\n    For exceptions raised during request handling, this is typically\n        * an LSPError for errors returned by the LSP server\n        * LanguageServerTerminatedException for errors due to the language server having terminated.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cause",
                "annotation": "Exception | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 7
          },
          {
            "name": "is_language_server_terminated",
            "module": "solidlsp.ls_exceptions",
            "signature": "def is_language_server_terminated(self):",
            "docstring": ":return: True if the exception is caused by the language server having terminated as indicated\n    by the causing exception being an instance of LanguageServerTerminatedException.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 20
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_exceptions",
            "signature": "def __str__(self) -> str:",
            "docstring": "Returns a string representation of the exception.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 29
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 6,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.analytics.AnthropicTokenCount",
      "class_info": {
        "name": "AnthropicTokenCount",
        "module": "serena.analytics",
        "docstring": "The exact count using the Anthropic API.\nCounting is free, but has a rate limit and will require an API key,\n(typically, set through an env variable).\nSee https://docs.anthropic.com/en/docs/build-with-claude/token-counting",
        "bases": [
          "TokenCountEstimator"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.analytics",
            "signature": "def __init__(self, model_name: str='claude-sonnet-4-20250514', api_key: str | None=None):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "api_key",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 54
          },
          {
            "name": "_send_count_tokens_request",
            "module": "serena.analytics",
            "signature": "def _send_count_tokens_request(self, text: str) -> MessageTokensCount:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "MessageTokensCount",
            "line_number": 62
          },
          {
            "name": "estimate_token_count",
            "module": "serena.analytics",
            "signature": "def estimate_token_count(self, text: str) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 68
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 46,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.analytics.RegisteredTokenCountEstimator",
      "class_info": {
        "name": "RegisteredTokenCountEstimator",
        "module": "serena.analytics",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [
          {
            "name": "get_valid_names",
            "module": "serena.analytics",
            "signature": "@classmethod",
            "docstring": "Get a list of all registered token count estimator names.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 80
          },
          {
            "name": "_create_estimator",
            "module": "serena.analytics",
            "signature": "def _create_estimator(self) -> TokenCountEstimator:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "TokenCountEstimator",
            "line_number": 86
          },
          {
            "name": "load_estimator",
            "module": "serena.analytics",
            "signature": "def load_estimator(self) -> TokenCountEstimator:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "TokenCountEstimator",
            "line_number": 95
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 75,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.cli.TopLevelCommands",
      "class_info": {
        "name": "TopLevelCommands",
        "module": "serena.cli",
        "docstring": "Root CLI group containing the core Serena commands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 98
          },
          {
            "name": "start_mcp_server",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.option",
              "click.option",
              "click.argument",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option",
              "click.option"
            ],
            "parameters": [
              {
                "name": "project",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "project_file_arg",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "context",
                "annotation": "str",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "tuple[str, ...]",
                "default": null
              },
              {
                "name": "transport",
                "annotation": "Literal['stdio', 'sse']",
                "default": null
              },
              {
                "name": "host",
                "annotation": "str",
                "default": null
              },
              {
                "name": "port",
                "annotation": "int",
                "default": null
              },
              {
                "name": "enable_web_dashboard",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "enable_gui_log_window",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None",
                "default": null
              },
              {
                "name": "trace_lsp_communication",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "tool_timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 131
          },
          {
            "name": "print_system_prompt",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument",
              "click.option",
              "click.option",
              "click.option",
              "click.option"
            ],
            "parameters": [
              {
                "name": "project",
                "annotation": "str",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "str",
                "default": null
              },
              {
                "name": "only_instructions",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "context",
                "annotation": "str",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "tuple[str, ...]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 206
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 95,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.cli.ToolCommands",
      "class_info": {
        "name": "ToolCommands",
        "module": "serena.cli",
        "docstring": "Group for 'tool' subcommands.",
        "bases": [
          "AutoRegisteringGroup"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 464
          },
          {
            "name": "list",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.option"
            ],
            "parameters": [
              {
                "name": "quiet",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 473
          },
          {
            "name": "description",
            "module": "serena.cli",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod",
              "click.command",
              "click.argument",
              "click.option"
            ],
            "parameters": [
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 488
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 461,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.mcp.SerenaMCPFactory",
      "class_info": {
        "name": "SerenaMCPFactory",
        "module": "serena.mcp",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.mcp",
            "signature": "def __init__(self, context: str=DEFAULT_CONTEXT, project: str | None=None):",
            "docstring": ":param context: The context name or path to context file\n:param project: Either an absolute path to the project directory or a name of an already registered project.\n    If the project passed here hasn't been registered yet, it will be registered automatically and can be activated by its name\n    afterward.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "context",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 49
          },
          {
            "name": "make_mcp_tool",
            "module": "serena.mcp",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "tool",
                "annotation": "Tool",
                "default": null
              }
            ],
            "return_annotation": "MCPTool",
            "line_number": 60
          },
          {
            "name": "_iter_tools",
            "module": "serena.mcp",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Iterator[Tool]",
            "line_number": 112
          },
          {
            "name": "_set_mcp_tools",
            "module": "serena.mcp",
            "signature": "def _set_mcp_tools(self, mcp: FastMCP) -> None:",
            "docstring": "Update the tools in the MCP server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mcp",
                "annotation": "FastMCP",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 116
          },
          {
            "name": "_instantiate_agent",
            "module": "serena.mcp",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "serena_config",
                "annotation": "SerenaConfig",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[SerenaAgentMode]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 126
          },
          {
            "name": "create_mcp_server",
            "module": "serena.mcp",
            "signature": "def create_mcp_server(self, host: str='0.0.0.0', port: int=8000, modes: Sequence[str]=DEFAULT_MODES, enable_web_dashboard: bool | None=None, enable_gui_log_window: bool | None=None, log_level: Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None=None, trace_lsp_communication: bool | None=None, tool_timeout: float | None=None) -> FastMCP:",
            "docstring": "Create an MCP server with process-isolated SerenaAgent to prevent asyncio contamination.\n\n:param host: The host to bind to\n:param port: The port to bind to\n:param modes: List of mode names or paths to mode files\n:param enable_web_dashboard: Whether to enable the web dashboard. If not specified, will take the value from the serena configuration.\n:param enable_gui_log_window: Whether to enable the GUI log window. It currently does not work on macOS, and setting this to True will be ignored then.\n    If not specified, will take the value from the serena configuration.\n:param log_level: Log level. If not specified, will take the value from the serena configuration.\n:param trace_lsp_communication: Whether to trace the communication between Serena and the language servers.\n    This is useful for debugging language server issues.\n:param tool_timeout: Timeout in seconds for tool execution. If not specified, will take the value from the serena configuration.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "host",
                "annotation": "str",
                "default": null
              },
              {
                "name": "port",
                "annotation": "int",
                "default": null
              },
              {
                "name": "modes",
                "annotation": "Sequence[str]",
                "default": null
              },
              {
                "name": "enable_web_dashboard",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "enable_gui_log_window",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None",
                "default": null
              },
              {
                "name": "trace_lsp_communication",
                "annotation": "bool | None",
                "default": null
              },
              {
                "name": "tool_timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "FastMCP",
            "line_number": 129
          },
          {
            "name": "server_lifespan",
            "module": "serena.mcp",
            "signature": "@asynccontextmanager",
            "docstring": "Manage server startup and shutdown lifecycle.",
            "is_method": true,
            "is_async": true,
            "decorators": [
              "asynccontextmanager",
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "mcp_server",
                "annotation": "FastMCP",
                "default": null
              }
            ],
            "return_annotation": "AsyncIterator[None]",
            "line_number": 187
          },
          {
            "name": "_get_initial_instructions",
            "module": "serena.mcp",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 192
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 48,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.util.file_system.GitignoreParser",
      "class_info": {
        "name": "GitignoreParser",
        "module": "serena.util.file_system",
        "docstring": "Parser for gitignore files in a repository.\n\nThis class handles parsing multiple gitignore files throughout a repository\nand provides methods to check if paths should be ignored.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.util.file_system",
            "signature": "def __init__(self, repo_root: str) -> None:",
            "docstring": "Initialize the parser for a repository.\n\n:param repo_root: Root directory of the repository",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "repo_root",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 119
          },
          {
            "name": "_load_gitignore_files",
            "module": "serena.util.file_system",
            "signature": "def _load_gitignore_files(self) -> None:",
            "docstring": "Load all gitignore files from the repository.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 129
          },
          {
            "name": "_find_gitignore_files",
            "module": "serena.util.file_system",
            "signature": "def _find_gitignore_files(self) -> list[str]:",
            "docstring": "Find all .gitignore files in the repository.\n\n:return: List of absolute paths to .gitignore files",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 138
          },
          {
            "name": "_create_ignore_spec",
            "module": "serena.util.file_system",
            "signature": "def _create_ignore_spec(self, gitignore_file_path: str) -> GitignoreSpec:",
            "docstring": "Create a GitignoreSpec from a single gitignore file.\n\n:param gitignore_file_path: Path to the .gitignore file\n:return: GitignoreSpec object for the gitignore patterns",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "gitignore_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "GitignoreSpec",
            "line_number": 146
          },
          {
            "name": "_parse_gitignore_content",
            "module": "serena.util.file_system",
            "signature": "def _parse_gitignore_content(self, content: str, gitignore_dir: str) -> list[str]:",
            "docstring": "Parse gitignore content and adjust patterns based on the gitignore file location.\n\n:param content: Content of the .gitignore file\n:param gitignore_dir: Directory containing the .gitignore file (absolute path)\n:return: List of adjusted patterns",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              },
              {
                "name": "gitignore_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 165
          },
          {
            "name": "should_ignore",
            "module": "serena.util.file_system",
            "signature": "def should_ignore(self, path: str) -> bool:",
            "docstring": "Check if a path should be ignored based on the gitignore rules.\n\n:param path: Path to check (absolute or relative to repo_root)\n:return: True if the path should be ignored, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 241
          },
          {
            "name": "get_ignore_specs",
            "module": "serena.util.file_system",
            "signature": "def get_ignore_specs(self) -> list[GitignoreSpec]:",
            "docstring": "Get all loaded gitignore specs.\n\n:return: List of GitignoreSpec objects",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[GitignoreSpec]",
            "line_number": 280
          },
          {
            "name": "reload",
            "module": "serena.util.file_system",
            "signature": "def reload(self) -> None:",
            "docstring": "Reload all gitignore files from the repository.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 288
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 111,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "solidlsp.language_servers.common.RuntimeDependencyCollection",
      "class_info": {
        "name": "RuntimeDependencyCollection",
        "module": "solidlsp.language_servers.common",
        "docstring": "Utility to handle installation of runtime dependencies.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.common",
            "signature": "def __init__(self, dependencies: Sequence[RuntimeDependency]):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dependencies",
                "annotation": "Sequence[RuntimeDependency]",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 35
          },
          {
            "name": "for_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def for_platform(self, platform_id: str) -> list[RuntimeDependency]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "platform_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[RuntimeDependency]",
            "line_number": 38
          },
          {
            "name": "for_current_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def for_current_platform(self) -> list[RuntimeDependency]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[RuntimeDependency]",
            "line_number": 41
          },
          {
            "name": "single_for_current_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def single_for_current_platform(self) -> RuntimeDependency:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "RuntimeDependency",
            "line_number": 44
          },
          {
            "name": "binary_path",
            "module": "solidlsp.language_servers.common",
            "signature": "def binary_path(self, target_dir: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 50
          },
          {
            "name": "install",
            "module": "solidlsp.language_servers.common",
            "signature": "def install(self, logger: LanguageServerLogger, target_dir: str) -> dict[str, str]:",
            "docstring": "Install all dependencies for the current platform into *target_dir*.\n\nReturns a mapping from dependency id to the resolved binary path.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, str]",
            "line_number": 56
          },
          {
            "name": "_run_command",
            "module": "solidlsp.language_servers.common",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "command",
                "annotation": "str | list[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 75
          },
          {
            "name": "_install_from_url",
            "module": "solidlsp.language_servers.common",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 110
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 32,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 11
    },
    {
      "full_name": "serena.analytics.TiktokenCountEstimator",
      "class_info": {
        "name": "TiktokenCountEstimator",
        "module": "serena.analytics",
        "docstring": "Approximate token count using tiktoken.",
        "bases": [
          "TokenCountEstimator"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.analytics",
            "signature": "def __init__(self, model_name: str='gpt-4o'):",
            "docstring": "The tokenizer will be downloaded on the first initialization, which may take some time.\n\n:param model_name: see `tiktoken.model` to see available models.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "model_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 31
          },
          {
            "name": "estimate_token_count",
            "module": "serena.analytics",
            "signature": "def estimate_token_count(self, text: str) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 42
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 10
    },
    {
      "full_name": "serena.analytics.ToolUsageStats",
      "class_info": {
        "name": "ToolUsageStats",
        "module": "serena.analytics",
        "docstring": "A class to record and manage tool usage statistics.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.analytics",
            "signature": "def __init__(self, token_count_estimator: RegisteredTokenCountEstimator=RegisteredTokenCountEstimator.TIKTOKEN_GPT4O):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "token_count_estimator",
                "annotation": "RegisteredTokenCountEstimator",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 108
          },
          {
            "name": "token_estimator_name",
            "module": "serena.analytics",
            "signature": "@property",
            "docstring": "Get the name of the registered token count estimator used.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 115
          },
          {
            "name": "_estimate_token_count",
            "module": "serena.analytics",
            "signature": "def _estimate_token_count(self, text: str) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 135
          },
          {
            "name": "get_stats",
            "module": "serena.analytics",
            "signature": "def get_stats(self, tool_name: str) -> ToolUsageStats.Entry:",
            "docstring": "Get (a copy of) the current usage statistics for a specific tool.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "ToolUsageStats.Entry",
            "line_number": 138
          },
          {
            "name": "record_tool_usage",
            "module": "serena.analytics",
            "signature": "def record_tool_usage(self, tool_name: str, input_str: str, output_str: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "input_str",
                "annotation": "str",
                "default": null
              },
              {
                "name": "output_str",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 145
          },
          {
            "name": "get_tool_stats_dict",
            "module": "serena.analytics",
            "signature": "def get_tool_stats_dict(self) -> dict[str, dict[str, int]]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "dict[str, dict[str, int]]",
            "line_number": 152
          },
          {
            "name": "clear",
            "module": "serena.analytics",
            "signature": "def clear(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 156
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 103,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 10
    },
    {
      "full_name": "serena.agno.SerenaAgnoToolkit",
      "class_info": {
        "name": "SerenaAgnoToolkit",
        "module": "serena.agno",
        "docstring": null,
        "bases": [
          "Toolkit"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.agno",
            "signature": "def __init__(self, serena_agent: SerenaAgent):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "serena_agent",
                "annotation": "SerenaAgent",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 26
          },
          {
            "name": "_create_agno_function",
            "module": "serena.agno",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "tool",
                "annotation": "Tool",
                "default": null
              }
            ],
            "return_annotation": "Function",
            "line_number": 33
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 25,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 10
    },
    {
      "full_name": "solidlsp.ls_utils.PlatformId",
      "class_info": {
        "name": "PlatformId",
        "module": "solidlsp.ls_utils",
        "docstring": "multilspy supported platforms",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [
          {
            "name": "is_windows",
            "module": "solidlsp.ls_utils",
            "signature": "def is_windows(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 251
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 234,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.analytics.TokenCountEstimator",
      "class_info": {
        "name": "TokenCountEstimator",
        "module": "serena.analytics",
        "docstring": null,
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "estimate_token_count",
            "module": "serena.analytics",
            "signature": "@abstractmethod",
            "docstring": "Estimate the number of tokens in the given text.\nThis is an abstract method that should be implemented by subclasses.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "text",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 19
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 17,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.text_utils.MatchedConsecutiveLines",
      "class_info": {
        "name": "MatchedConsecutiveLines",
        "module": "serena.text_utils",
        "docstring": "Represents a collection of consecutive lines found through some criterion in a text file or a string.\nMay include lines before, after, and matched.",
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "serena.text_utils",
            "signature": "def __post_init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 69
          },
          {
            "name": "start_line",
            "module": "serena.text_utils",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 81
          },
          {
            "name": "end_line",
            "module": "serena.text_utils",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 85
          },
          {
            "name": "num_matched_lines",
            "module": "serena.text_utils",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 89
          },
          {
            "name": "to_display_string",
            "module": "serena.text_utils",
            "signature": "def to_display_string(self, include_line_numbers: bool=True) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_line_numbers",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 92
          },
          {
            "name": "from_file_contents",
            "module": "serena.text_utils",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "file_contents",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              },
              {
                "name": "source_file_path",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 96
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 54,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.agent.MemoriesManager",
      "class_info": {
        "name": "MemoriesManager",
        "module": "serena.agent",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.agent",
            "signature": "def __init__(self, project_root: str):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 64
          },
          {
            "name": "_get_memory_file_path",
            "module": "serena.agent",
            "signature": "def _get_memory_file_path(self, name: str) -> Path:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 68
          },
          {
            "name": "load_memory",
            "module": "serena.agent",
            "signature": "def load_memory(self, name: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 74
          },
          {
            "name": "save_memory",
            "module": "serena.agent",
            "signature": "def save_memory(self, name: str, content: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 81
          },
          {
            "name": "list_memories",
            "module": "serena.agent",
            "signature": "def list_memories(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 87
          },
          {
            "name": "delete_memory",
            "module": "serena.agent",
            "signature": "def delete_memory(self, name: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 90
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 63,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.cli.AutoRegisteringGroup",
      "class_info": {
        "name": "AutoRegisteringGroup",
        "module": "serena.cli",
        "docstring": "A click.Group subclass that automatically registers any click.Command\nattributes defined on the class into the group.\n\nAfter initialization, it inspects its own class for attributes that are\ninstances of click.Command (typically created via @click.command) and\ncalls self.add_command(cmd) on each. This lets you define your commands\nas static methods on the subclass for IDE-friendly organization without\nmanual registration.",
        "bases": [
          "click.Group"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.cli",
            "signature": "def __init__(self, name: str, help: str):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "help",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 86
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 74,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.prompt_factory.SerenaPromptFactory",
      "class_info": {
        "name": "SerenaPromptFactory",
        "module": "serena.prompt_factory",
        "docstring": "A class for retrieving and rendering prompt templates and prompt lists.",
        "bases": [
          "PromptFactory"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.prompt_factory",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 12
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 7,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.util.thread.TimeoutException",
      "class_info": {
        "name": "TimeoutException",
        "module": "serena.util.thread",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.util.thread",
            "signature": "def __init__(self, message: str, timeout: float) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 10
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 9,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.config.serena_config.ToolSet",
      "class_info": {
        "name": "ToolSet",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self, tool_names: set[str]) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_names",
                "annotation": "set[str]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 69
          },
          {
            "name": "default",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": ":return: the default tool set, which contains all tools that are enabled by default",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 73
          },
          {
            "name": "apply",
            "module": "serena.config.serena_config",
            "signature": "def apply(self, *tool_inclusion_definitions: 'ToolInclusionDefinition') -> 'ToolSet':",
            "docstring": ":param tool_inclusion_definitions: the definitions to apply\n:return: a new tool set with the definitions applied",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 81
          },
          {
            "name": "without_editing_tools",
            "module": "serena.config.serena_config",
            "signature": "def without_editing_tools(self) -> 'ToolSet':",
            "docstring": ":return: a new tool set that excludes all tools that can edit",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 111
          },
          {
            "name": "get_tool_names",
            "module": "serena.config.serena_config",
            "signature": "def get_tool_names(self) -> set[str]:",
            "docstring": "Returns the names of the tools that are currently included in the tool set.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "set[str]",
            "line_number": 124
          },
          {
            "name": "includes_name",
            "module": "serena.config.serena_config",
            "signature": "def includes_name(self, tool_name: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 130
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 68,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.config.context_mode.RegisteredContext",
      "class_info": {
        "name": "RegisteredContext",
        "module": "serena.config.context_mode",
        "docstring": "A registered context.",
        "bases": [
          "Enum"
        ],
        "methods": [
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "def load(self) -> SerenaAgentContext:",
            "docstring": "Load the context.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SerenaAgentContext",
            "line_number": 213
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 203,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.config.context_mode.RegisteredMode",
      "class_info": {
        "name": "RegisteredMode",
        "module": "serena.config.context_mode",
        "docstring": "A registered mode.",
        "bases": [
          "Enum"
        ],
        "methods": [
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "def load(self) -> SerenaAgentMode:",
            "docstring": "Load the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SerenaAgentMode",
            "line_number": 230
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 218,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.ReadFileTool",
      "class_info": {
        "name": "ReadFileTool",
        "module": "serena.tools.file_tools",
        "docstring": "Reads a file within the project directory.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, start_line: int=0, end_line: int | None=None, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Reads the given file or a chunk of it. Generally, symbolic operations\nlike find_symbol or find_referencing_symbols should be preferred if you know which symbols you are looking for.\n\n:param relative_path: the relative path to the file to read\n:param start_line: the 0-based index of the first line to be retrieved.\n:param end_line: the 0-based index of the last line to be retrieved (inclusive). If None, read until the end of the file.\n:param max_answer_chars: if the file (chunk) is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: the full text of the file at the given relative path",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int | None",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 26
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 21,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.CreateTextFileTool",
      "class_info": {
        "name": "CreateTextFileTool",
        "module": "serena.tools.file_tools",
        "docstring": "Creates/overwrites a file in the project directory.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, content: str) -> str:",
            "docstring": "Write a new file or overwrite an existing file.\n\n:param relative_path: the relative path to the file to create\n:param content: the (utf-8-encoded) content to write to the file\n:return: a message indicating success or failure",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 60
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 55,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.ListDirTool",
      "class_info": {
        "name": "ListDirTool",
        "module": "serena.tools.file_tools",
        "docstring": "Lists files and directories in the given directory (optionally with recursion).",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, recursive: bool, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Lists all non-gitignored files and directories in the given directory (optionally with recursion).\n\n:param relative_path: the relative path to the directory to list; pass \".\" to scan the project root\n:param recursive: whether to scan subdirectories recursively\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: a JSON object with the names of directories and files within the given directory",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "recursive",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 86
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 81,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.FindFileTool",
      "class_info": {
        "name": "FindFileTool",
        "module": "serena.tools.file_tools",
        "docstring": "Finds files in the given relative paths",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, file_mask: str, relative_path: str) -> str:",
            "docstring": "Finds non-gitignored files matching the given file mask within the given relative path\n\n:param file_mask: the filename or file mask (using the wildcards * or ?) to search for\n:param relative_path: the relative path to the directory to search in; pass \".\" to scan the project root\n:return: a JSON object with the list of matching files",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "file_mask",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 116
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 111,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.ReplaceRegexTool",
      "class_info": {
        "name": "ReplaceRegexTool",
        "module": "serena.tools.file_tools",
        "docstring": "Replaces content in a file by using regular expressions.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, regex: str, repl: str, allow_multiple_occurrences: bool=False) -> str:",
            "docstring": "Replaces one or more occurrences of the given regular expression.\nThis is the preferred way to replace content in a file whenever the symbol-level\ntools are not appropriate.\nEven large sections of code can be replaced by providing a concise regular expression of\nthe form \"beginning.*?end-of-text-to-be-replaced\".\nAlways try to use wildcards to avoid specifying the exact content of the code to be replaced,\nespecially if it spans several lines.\n\nIMPORTANT: REMEMBER TO USE WILDCARDS WHEN APPROPRIATE! I WILL BE VERY UNHAPPY IF YOU WRITE LONG REGEXES WITHOUT USING WILDCARDS INSTEAD!\n\n:param relative_path: the relative path to the file\n:param regex: a Python-style regular expression, matches of which will be replaced.\n    Dot matches all characters, multi-line matching is enabled.\n:param repl: the string to replace the matched content with, which may contain\n    backreferences like \\1, \\2, etc.\n:param allow_multiple_occurrences: if True, the regex may match multiple occurrences in the file\n    and all of them will be replaced.\n    If this is set to False and the regex matches multiple occurrences, an error will be returned\n    (and you may retry with a revised, more specific regex).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "regex",
                "annotation": "str",
                "default": null
              },
              {
                "name": "repl",
                "annotation": "str",
                "default": null
              },
              {
                "name": "allow_multiple_occurrences",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 152
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 147,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.DeleteLinesTool",
      "class_info": {
        "name": "DeleteLinesTool",
        "module": "serena.tools.file_tools",
        "docstring": "Deletes a range of lines within a file.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, start_line: int, end_line: int) -> str:",
            "docstring": "Deletes the given lines in the file.\nRequires that the same range of lines was previously read using the `read_file` tool to verify correctness\nof the operation.\n\n:param relative_path: the relative path to the file\n:param start_line: the 0-based index of the first line to be deleted\n:param end_line: the 0-based index of the last line to be deleted",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 200
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 195,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.ReplaceLinesTool",
      "class_info": {
        "name": "ReplaceLinesTool",
        "module": "serena.tools.file_tools",
        "docstring": "Replaces a range of lines within a file with new content.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, start_line: int, end_line: int, content: str) -> str:",
            "docstring": "Replaces the given range of lines in the given file.\nRequires that the same range of lines was previously read using the `read_file` tool to verify correctness\nof the operation.\n\n:param relative_path: the relative path to the file\n:param start_line: the 0-based index of the first line to be deleted\n:param end_line: the 0-based index of the last line to be deleted\n:param content: the content to insert",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 228
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 223,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.InsertAtLineTool",
      "class_info": {
        "name": "InsertAtLineTool",
        "module": "serena.tools.file_tools",
        "docstring": "Inserts content at a given line in a file.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, relative_path: str, line: int, content: str) -> str:",
            "docstring": "Inserts the given content at the given line in the file, pushing existing content of the line down.\nIn general, symbolic insert operations like insert_after_symbol or insert_before_symbol should be preferred if you know which\nsymbol you are looking for.\nHowever, this can also be useful for small targeted edits of the body of a longer symbol (without replacing the entire body).\n\n:param relative_path: the relative path to the file\n:param line: the 0-based index of the line to insert content at\n:param content: the content to be inserted",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 259
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 254,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.file_tools.SearchForPatternTool",
      "class_info": {
        "name": "SearchForPatternTool",
        "module": "serena.tools.file_tools",
        "docstring": "Performs a search for a pattern in the project.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.file_tools",
            "signature": "def apply(self, substring_pattern: str, context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None, relative_path: str='', restrict_search_to_code_files: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Offers a flexible search for arbitrary patterns in the codebase, including the\npossibility to search in non-code files.\nGenerally, symbolic operations like find_symbol or find_referencing_symbols\nshould be preferred if you know which symbols you are looking for.\n\nPattern Matching Logic:\n    For each match, the returned result will contain the full lines where the\n    substring pattern is found, as well as optionally some lines before and after it. The pattern will be compiled with\n    DOTALL, meaning that the dot will match all characters including newlines.\n    This also means that it never makes sense to have .* at the beginning or end of the pattern,\n    but it may make sense to have it in the middle for complex patterns.\n    If a pattern matches multiple lines, all those lines will be part of the match.\n    Be careful to not use greedy quantifiers unnecessarily, it is usually better to use non-greedy quantifiers like .*? to avoid\n    matching too much content.\n\nFile Selection Logic:\n    The files in which the search is performed can be restricted very flexibly.\n    Using `restrict_search_to_code_files` is useful if you are only interested in code symbols (i.e., those\n    symbols that can be manipulated with symbolic tools like find_symbol).\n    You can also restrict the search to a specific file or directory,\n    and provide glob patterns to include or exclude certain files on top of that.\n    The globs are matched against relative file paths from the project root (not to the `relative_path` parameter that\n    is used to further restrict the search).\n    Smartly combining the various restrictions allows you to perform very targeted searches.\n\n\n:param substring_pattern: Regular expression for a substring pattern to search for\n:param context_lines_before: Number of lines of context to include before each match\n:param context_lines_after: Number of lines of context to include after each match\n:param paths_include_glob: optional glob pattern specifying files to include in the search.\n    Matches against relative file paths from the project root (e.g., \"*.py\", \"src/**/*.ts\").\n    Only matches files, not directories.\n:param paths_exclude_glob: optional glob pattern specifying files to exclude from the search.\n    Matches against relative file paths from the project root (e.g., \"*test*\", \"**/*_generated.py\").\n    Takes precedence over paths_include_glob. Only matches files, not directories.\n:param relative_path: only subpaths of this path (relative to the repo root) will be analyzed. If a path to a single\n    file is passed, only that will be searched. The path must exist, otherwise a `FileNotFoundError` is raised.\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task. Instead, if the output is too long, you should\n    make a stricter query.\n:param restrict_search_to_code_files: whether to restrict the search to only those files where\n    analyzed code symbols can be found. Otherwise, will search all non-ignored files.\n    Set this to True if your search is only meant to discover code that can be manipulated with symbolic tools.\n    For example, for finding classes or methods from a name pattern.\n    Setting to False is a better choice if you also want to search in non-code files, like in html or yaml files,\n    which is why it is the default.\n:return: A mapping of file paths to lists of matched consecutive lines.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "substring_pattern",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              },
              {
                "name": "paths_include_glob",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "paths_exclude_glob",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "restrict_search_to_code_files",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 287
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 282,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.CheckOnboardingPerformedTool",
      "class_info": {
        "name": "CheckOnboardingPerformedTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Checks whether project onboarding was already performed.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Checks whether project onboarding was already performed.\nYou should always call this tool before beginning to actually work on the project/after activating a project,\nbut after calling the initial instructions tool.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 16
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 11,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.OnboardingTool",
      "class_info": {
        "name": "OnboardingTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Performs onboarding (identifying the project structure and essential tasks, e.g. for testing or building).",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Call this tool if onboarding was not performed yet.\nYou will call this tool at most once per conversation.\n\n:return: instructions on how to create the onboarding information",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 46
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 41,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.ThinkAboutCollectedInformationTool",
      "class_info": {
        "name": "ThinkAboutCollectedInformationTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Thinking tool for pondering the completeness of collected information.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Think about the collected information and whether it is sufficient and relevant.\nThis tool should ALWAYS be called after you have completed a non-trivial sequence of searching steps like\nfind_symbol, find_referencing_symbols, search_files_for_pattern, read_file, etc.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 62
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 57,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.ThinkAboutTaskAdherenceTool",
      "class_info": {
        "name": "ThinkAboutTaskAdherenceTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Thinking tool for determining whether the agent is still on track with the current task.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Think about the task at hand and whether you are still on track.\nEspecially important if the conversation has been going on for a while and there\nhas been a lot of back and forth.\n\nThis tool should ALWAYS be called before you insert, replace, or delete code.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 76
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 71,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.ThinkAboutWhetherYouAreDoneTool",
      "class_info": {
        "name": "ThinkAboutWhetherYouAreDoneTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Thinking tool for determining whether the task is truly completed.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Whenever you feel that you are done with what the user has asked for, it is important to call this tool.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 92
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 87,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.SummarizeChangesTool",
      "class_info": {
        "name": "SummarizeChangesTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Provides instructions for summarizing the changes made to the codebase.",
        "bases": [
          "Tool",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Summarize the changes you have made to the codebase.\nThis tool should always be called after you have fully completed any non-trivial coding task,\nbut only after the think_about_whether_you_are_done call.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 104
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 99,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.PrepareForNewConversationTool",
      "class_info": {
        "name": "PrepareForNewConversationTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Provides instructions for preparing for a new conversation (in order to continue with the necessary context).",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Instructions for preparing for a new conversation. This tool should only be called on explicit user request.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 118
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 113,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.workflow_tools.InitialInstructionsTool",
      "class_info": {
        "name": "InitialInstructionsTool",
        "module": "serena.tools.workflow_tools",
        "docstring": "Gets the initial instructions for the current project.\nShould only be used in settings where the system prompt cannot be set,\ne.g. in clients you have no control over, like Claude Desktop.",
        "bases": [
          "Tool",
          "ToolMarkerDoesNotRequireActiveProject",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.workflow_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Get the initial instructions for the current coding project.\nIf you haven't received instructions on how to use Serena's tools in the system prompt,\nyou should always call this tool before starting to work (including using any other tool) on any programming task,\nthe only exception being when you are asked to call `activate_project`, which you should then call before.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 132
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 125,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.tools_base.ApplyMethodProtocol",
      "class_info": {
        "name": "ApplyMethodProtocol",
        "module": "serena.tools.tools_base",
        "docstring": "Callable protocol for the apply method of a tool.",
        "bases": [
          "Protocol"
        ],
        "methods": [
          {
            "name": "__call__",
            "module": "serena.tools.tools_base",
            "signature": "def __call__(self, *args: Any, **kwargs: Any) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 113
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 110,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.tools_base.ToolRegistry",
      "class_info": {
        "name": "ToolRegistry",
        "module": "serena.tools.tools_base",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.tools.tools_base",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 349
          },
          {
            "name": "get_tool_class_by_name",
            "module": "serena.tools.tools_base",
            "signature": "def get_tool_class_by_name(self, tool_name: str) -> type[Tool]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "type[Tool]",
            "line_number": 360
          },
          {
            "name": "get_all_tool_classes",
            "module": "serena.tools.tools_base",
            "signature": "def get_all_tool_classes(self) -> list[type[Tool]]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[type[Tool]]",
            "line_number": 363
          },
          {
            "name": "get_tool_names_default_enabled",
            "module": "serena.tools.tools_base",
            "signature": "def get_tool_names_default_enabled(self) -> list[str]:",
            "docstring": ":return: the list of tool names that are enabled by default (i.e. non-optional tools).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 366
          },
          {
            "name": "print_tool_overview",
            "module": "serena.tools.tools_base",
            "signature": "def print_tool_overview(self, tools: Iterable[type[Tool] | Tool] | None=None) -> None:",
            "docstring": "Print a summary of the tools. If no tools are passed, a summary of all tools is printed.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tools",
                "annotation": "Iterable[type[Tool] | Tool] | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 372
          },
          {
            "name": "is_valid_tool_name",
            "module": "serena.tools.tools_base",
            "signature": "def is_valid_tool_name(self, tool_name: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 386
          }
        ],
        "class_variables": [],
        "decorators": [
          "singleton"
        ],
        "line_number": 348,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.jetbrains_tools.JetBrainsFindSymbolTool",
      "class_info": {
        "name": "JetBrainsFindSymbolTool",
        "module": "serena.tools.jetbrains_tools",
        "docstring": "Performs a global (or local) search for symbols with/containing a given name/substring (optionally filtered by type).",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.jetbrains_tools",
            "signature": "def apply(self, name_path: str, depth: int=0, relative_path: str | None=None, include_body: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Retrieves information on all symbols/code entities (classes, methods, etc.) based on the given `name_path`,\nwhich represents a pattern for the symbol's path within the symbol tree of a single file.\nThe returned symbol location can be used for edits or further queries.\nSpecify `depth > 0` to retrieve children (e.g., methods of a class).\n\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path).\nNote that the name path is not a path in the file system but rather a path in the symbol tree\n**within a single file**. Thus, file or directory names should never be included in the `name_path`.\nFor restricting the search to a single file or directory, pass the `relative_path` parameter.\nThe retrieved symbols' `name_path` attribute will always be composed of symbol names, never file\nor directory names.\n\nKey aspects of the name path matching behavior:\n- The name of the retrieved symbols will match the last segment of `name_path`, while preceding segments\n  will restrict the search to symbols that have a desired sequence of ancestors.\n- If there is no `/` in `name_path`, there is no restriction on the ancestor symbols.\n  For example, passing `method` will match against all symbols with name paths like `method`,\n  `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains at least one `/`, the matching is restricted to symbols\n  with the respective ancestors. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `other_class/method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, i.e.\n  all ancestors are provided and must match.\n  For example, passing `/class` will match only against top-level symbols named `class` but\n  will not match `nested_class/class`. Passing `/class/method` will match `class/method` but\n  not `outer_class/class/method`.\n\n:param name_path: The name path pattern to search for, see above for details.\n:param depth: Depth to retrieve descendants (e.g., 1 for class methods/attributes).\n:param relative_path: Optional. Restrict search to this file or directory.\n    If None, searches entire codebase.\n    If a directory is passed, the search will be restricted to the files in that directory.\n    If a file is passed, the search will be restricted to that file.\n    If you have some knowledge about the codebase, you should use this parameter, as it will significantly\n    speed up the search as well as reduce the number of results.\n:param include_body: If True, include the symbol's source code. Use judiciously.\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: JSON string: a list of symbols (with locations) matching the name.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "depth",
                "annotation": "int",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 12
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 7,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.jetbrains_tools.JetBrainsFindReferencingSymbolsTool",
      "class_info": {
        "name": "JetBrainsFindReferencingSymbolsTool",
        "module": "serena.tools.jetbrains_tools",
        "docstring": "Finds symbols that reference the given symbol",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.jetbrains_tools",
            "signature": "def apply(self, name_path: str, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Finds symbols that reference the symbol at the given `name_path`.\nThe result will contain metadata about the referencing symbols.\n\n:param name_path: name path of the symbol for which to find references; matching logic as described in find symbol tool.\n:param relative_path: the relative path to the file containing the symbol for which to find references.\n    Note that here you can't pass a directory but must pass a file.\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: a list of JSON objects with the symbols referencing the requested symbol",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 78
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 73,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.jetbrains_tools.JetBrainsGetSymbolsOverviewTool",
      "class_info": {
        "name": "JetBrainsGetSymbolsOverviewTool",
        "module": "serena.tools.jetbrains_tools",
        "docstring": "Retrieves an overview of the top-level symbols within a specified file",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.jetbrains_tools",
            "signature": "def apply(self, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Gets an overview of the top-level symbols in the given file.\nCalling this is often a good idea before more targeted reading, searching or editing operations on the code symbols.\nBefore requesting a symbol overview, it is usually a good idea to narrow down the scope of the overview\nby first understanding the basic directory structure of the repository that you can get from memories\nor by using the `list_dir` and `find_file` tools (or similar).\n\n:param relative_path: the relative path to the file to get the overview of\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: a JSON object containing the symbols",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 108
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 103,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.GetSymbolsOverviewTool",
      "class_info": {
        "name": "GetSymbolsOverviewTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Gets an overview of the top-level symbols defined in a given file or directory.",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Use this tool to get a high-level understanding of the code symbols in a file.\nThis should be the first tool to call when you want to understand a new file, unless you already know\nwhat you are looking for.\n\n:param relative_path: the relative path to the file or directory to get the overview of\n:param max_answer_chars: if the overview is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task. If the overview is too long, you should use a smaller directory instead,\n    (e.g. a subdirectory).\n:return: a JSON object containing info about top-level symbols in the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 54
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 49,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.FindSymbolTool",
      "class_info": {
        "name": "FindSymbolTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Performs a global (or local) search for symbols with/containing a given name/substring (optionally filtered by type).",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, name_path: str, depth: int=0, relative_path: str | None=None, include_body: bool=False, include_kinds: list[int] | None=None, exclude_kinds: list[int] | None=None, substring_matching: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Retrieves information on all symbols/code entities (classes, methods, etc.) based on the given `name_path`,\nwhich represents a pattern for the symbol's path within the symbol tree of a single file.\nThe returned symbol location can be used for edits or further queries.\nSpecify `depth > 0` to retrieve children (e.g., methods of a class).\n\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path). Note that the name path is not a path in the file system\nbut rather a path in the symbol tree **within a single file**. Thus, file or directory names should never\nbe included in the `name_path`. For restricting the search to a single file or directory,\nthe `within_relative_path` parameter should be used instead. The retrieved symbols' `name_path` attribute\nwill always be composed of symbol names, never file or directory names.\n\nKey aspects of the name path matching behavior:\n- Trailing slashes in `name_path` play no role and are ignored.\n- The name of the retrieved symbols will match (either exactly or as a substring)\n  the last segment of `name_path`, while other segments will restrict the search to symbols that\n  have a desired sequence of ancestors.\n- If there is no starting or intermediate slash in `name_path`, there is no\n  restriction on the ancestor symbols. For example, passing `method` will match\n  against symbols with name paths like `method`, `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains a `/` but doesn't start with a `/`, the matching is restricted to symbols\n  with the same ancestors as the last segment of `name_path`. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, meaning\n  that the first segment of it must match the first segment of the symbol's name path.\n  For example, passing `/class` will match only against top-level symbols like `class` but not against `nested_class/class`.\n  Passing `/class/method` will match against `class/method` but not `nested_class/class/method` or `method`.\n\n\n:param name_path: The name path pattern to search for, see above for details.\n:param depth: Depth to retrieve descendants (e.g., 1 for class methods/attributes).\n:param relative_path: Optional. Restrict search to this file or directory. If None, searches entire codebase.\n    If a directory is passed, the search will be restricted to the files in that directory.\n    If a file is passed, the search will be restricted to that file.\n    If you have some knowledge about the codebase, you should use this parameter, as it will significantly\n    speed up the search as well as reduce the number of results.\n:param include_body: If True, include the symbol's source code. Use judiciously.\n:param include_kinds: Optional. List of LSP symbol kind integers to include. (e.g., 5 for Class, 12 for Function).\n    Valid kinds: 1=file, 2=module, 3=namespace, 4=package, 5=class, 6=method, 7=property, 8=field, 9=constructor, 10=enum,\n    11=interface, 12=function, 13=variable, 14=constant, 15=string, 16=number, 17=boolean, 18=array, 19=object,\n    20=key, 21=null, 22=enum member, 23=struct, 24=event, 25=operator, 26=type parameter\n:param exclude_kinds: Optional. List of LSP symbol kind integers to exclude. Takes precedence over `include_kinds`.\n:param substring_matching: If True, use substring matching for the last segment of `name`.\n:param max_answer_chars: Max characters for the JSON result. If exceeded, no content is returned.\n:return: a list of symbols (with locations) matching the name.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "depth",
                "annotation": "int",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "list[int] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "list[int] | None",
                "default": null
              },
              {
                "name": "substring_matching",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 86
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 81,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.FindReferencingSymbolsTool",
      "class_info": {
        "name": "FindReferencingSymbolsTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Finds symbols that reference the symbol at the given location (optionally filtered by type).",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicRead"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, name_path: str, relative_path: str, include_kinds: list[int] | None=None, exclude_kinds: list[int] | None=None, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Finds references to the symbol at the given `name_path`. The result will contain metadata about the referencing symbols\nas well as a short code snippet around the reference.\n\n:param name_path: for finding the symbol to find references for, same logic as in the `find_symbol` tool.\n:param relative_path: the relative path to the file containing the symbol for which to find references.\n    Note that here you can't pass a directory but must pass a file.\n:param include_kinds: same as in the `find_symbol` tool.\n:param exclude_kinds: same as in the `find_symbol` tool.\n:param max_answer_chars: same as in the `find_symbol` tool.\n:return: a list of JSON objects with the symbols referencing the requested symbol",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_kinds",
                "annotation": "list[int] | None",
                "default": null
              },
              {
                "name": "exclude_kinds",
                "annotation": "list[int] | None",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 166
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 161,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.ReplaceSymbolBodyTool",
      "class_info": {
        "name": "ReplaceSymbolBodyTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Replaces the full definition of a symbol.",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
            "docstring": "Replaces the body of the symbol with the given `name_path`.\n\n:param name_path: for finding the symbol to replace, same logic as in the `find_symbol` tool.\n:param relative_path: the relative path to the file containing the symbol\n:param body: the new symbol body. Important: Begin directly with the symbol definition and provide no\n    leading indentation for the first line (but do indent the rest of the body according to the context).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 218
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 213,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.InsertAfterSymbolTool",
      "class_info": {
        "name": "InsertAfterSymbolTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Inserts content after the end of the definition of a given symbol.",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
            "docstring": "Inserts the given body/content after the end of the definition of the given symbol (via the symbol's location).\nA typical use case is to insert a new class, function, method, field or variable assignment.\n\n:param name_path: name path of the symbol after which to insert content (definitions in the `find_symbol` tool apply)\n:param relative_path: the relative path to the file containing the symbol\n:param body: the body/content to be inserted. The inserted code shall begin with the next line after\n    the symbol.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 246
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 241,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.symbol_tools.InsertBeforeSymbolTool",
      "class_info": {
        "name": "InsertBeforeSymbolTool",
        "module": "serena.tools.symbol_tools",
        "docstring": "Inserts content before the beginning of the definition of a given symbol.",
        "bases": [
          "Tool",
          "ToolMarkerSymbolicEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.symbol_tools",
            "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
            "docstring": "Inserts the given content before the beginning of the definition of the given symbol (via the symbol's location).\nA typical use case is to insert a new class, function, method, field or variable assignment; or\na new import statement before the first symbol in the file.\n\n:param name_path: name path of the symbol before which to insert content (definitions in the `find_symbol` tool apply)\n:param relative_path: the relative path to the file containing the symbol\n:param body: the body/content to be inserted before the line in which the referenced symbol is defined",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "body",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 271
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 266,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.cmd_tools.ExecuteShellCommandTool",
      "class_info": {
        "name": "ExecuteShellCommandTool",
        "module": "serena.tools.cmd_tools",
        "docstring": "Executes a shell command.",
        "bases": [
          "Tool",
          "ToolMarkerCanEdit"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.cmd_tools",
            "signature": "def apply(self, command: str, cwd: str | None=None, capture_stderr: bool=True, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Execute a shell command and return its output. If there is a memory about suggested commands, read that first.\nNever execute unsafe shell commands like `rm -rf /` or similar!\n\n:param command: the shell command to execute\n:param cwd: the working directory to execute the command in. If None, the project root will be used.\n:param capture_stderr: whether to capture and return stderr output\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: a JSON object containing the command's stdout and optionally stderr output",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "command",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "capture_stderr",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 14
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 9,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.memory_tools.WriteMemoryTool",
      "class_info": {
        "name": "WriteMemoryTool",
        "module": "serena.tools.memory_tools",
        "docstring": "Writes a named memory (for future reference) to Serena's project-specific memory store.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.memory_tools",
            "signature": "def apply(self, memory_name: str, content: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Write some information about this project that can be useful for future tasks to a memory in md format.\nThe memory name should be meaningful.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "memory_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 11
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 6,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.memory_tools.ReadMemoryTool",
      "class_info": {
        "name": "ReadMemoryTool",
        "module": "serena.tools.memory_tools",
        "docstring": "Reads the memory with the given name from Serena's project-specific memory store.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.memory_tools",
            "signature": "def apply(self, memory_file_name: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
            "docstring": "Read the content of a memory file. This tool should only be used if the information\nis relevant to the current task. You can infer whether the information\nis relevant from the memory file name.\nYou should not read the same memory file multiple times in the same conversation.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "memory_file_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "max_answer_chars",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 29
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.memory_tools.ListMemoriesTool",
      "class_info": {
        "name": "ListMemoriesTool",
        "module": "serena.tools.memory_tools",
        "docstring": "Lists memories in Serena's project-specific memory store.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.memory_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "List available memories. Any memory can be read using the `read_memory` tool.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 44
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 39,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.memory_tools.DeleteMemoryTool",
      "class_info": {
        "name": "DeleteMemoryTool",
        "module": "serena.tools.memory_tools",
        "docstring": "Deletes a memory from Serena's project-specific memory store.",
        "bases": [
          "Tool"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.memory_tools",
            "signature": "def apply(self, memory_file_name: str) -> str:",
            "docstring": "Delete a memory file. Should only happen if a user asks for it explicitly,\nfor example by saying that the information retrieved from a memory file is no longer correct\nor no longer relevant for the project.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "memory_file_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 56
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 51,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "serena.tools.config_tools.SwitchModesTool",
      "class_info": {
        "name": "SwitchModesTool",
        "module": "serena.tools.config_tools",
        "docstring": "Activates modes by providing a list of their names",
        "bases": [
          "Tool",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, modes: list[str]) -> str:",
            "docstring": "Activates the desired modes, like [\"editing\", \"interactive\"] or [\"planning\", \"one-shot\"]\n\n:param modes: the names of the modes to activate",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 58
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 53,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SymbolKind",
      "class_info": {
        "name": "SymbolKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A symbol kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [
          {
            "name": "from_int",
            "module": "solidlsp.lsp_protocol_handler.lsp_types",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "'SymbolKind'",
            "line_number": 200
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 166,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 9
    },
    {
      "full_name": "interprompt.multilang_prompt.LanguageFallbackMode",
      "class_info": {
        "name": "LanguageFallbackMode",
        "module": "interprompt.multilang_prompt",
        "docstring": "Defines what to do if there is no item for the given language.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 44,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_utils.InvalidTextLocationError",
      "class_info": {
        "name": "InvalidTextLocationError",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_utils.TextUtils",
      "class_info": {
        "name": "TextUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utilities for text operations.",
        "bases": [],
        "methods": [
          {
            "name": "get_line_col_from_index",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the zero-indexed line and column number of the given index in the given text",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "index",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "tuple[int, int]",
            "line_number": 32
          },
          {
            "name": "get_index_from_line_col",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the index of the given zero-indexed line and column number in the given text",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "col",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 50
          },
          {
            "name": "_get_updated_position_from_line_and_column_and_edit",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Utility function to get the position of the cursor after inserting text at a given line and column.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "l",
                "annotation": "int",
                "default": null
              },
              {
                "name": "c",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[int, int]",
            "line_number": 65
          },
          {
            "name": "delete_text_between_positions",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Deletes the text between the given start and end positions.\nReturns the modified text and the deleted text.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "start_col",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_col",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 78
          },
          {
            "name": "insert_text_at_position",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Inserts the given text at the given line and column.\nReturns the modified text and the new line and column.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "col",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, int, int]",
            "line_number": 91
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_utils.DotnetVersion",
      "class_info": {
        "name": "DotnetVersion",
        "module": "solidlsp.ls_utils",
        "docstring": "multilspy supported dotnet versions",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 255,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_utils.SYSTEM_INFO",
      "class_info": {
        "name": "SYSTEM_INFO",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Structure"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 300,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_logger.LogLine",
      "class_info": {
        "name": "LogLine",
        "module": "solidlsp.ls_logger",
        "docstring": "Represents a line in the Multilspy log",
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.Position",
      "class_info": {
        "name": "Position",
        "module": "solidlsp.ls_types",
        "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 18,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.Range",
      "class_info": {
        "name": "Range",
        "module": "solidlsp.ls_types",
        "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 63,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.Location",
      "class_info": {
        "name": "Location",
        "module": "solidlsp.ls_types",
        "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 83,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.CompletionItemKind",
      "class_info": {
        "name": "CompletionItemKind",
        "module": "solidlsp.ls_types",
        "docstring": "The kind of a completion entry.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 94,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.CompletionItem",
      "class_info": {
        "name": "CompletionItem",
        "module": "solidlsp.ls_types",
        "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 124,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.SymbolKind",
      "class_info": {
        "name": "SymbolKind",
        "module": "solidlsp.ls_types",
        "docstring": "A symbol kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 144,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.SymbolTag",
      "class_info": {
        "name": "SymbolTag",
        "module": "solidlsp.ls_types",
        "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 175,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.UnifiedSymbolInformation",
      "class_info": {
        "name": "UnifiedSymbolInformation",
        "module": "solidlsp.ls_types",
        "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 185,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.MarkupKind",
      "class_info": {
        "name": "MarkupKind",
        "module": "solidlsp.ls_types",
        "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 247,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.MarkupContent",
      "class_info": {
        "name": "MarkupContent",
        "module": "solidlsp.ls_types",
        "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 281,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_types.Hover",
      "class_info": {
        "name": "Hover",
        "module": "solidlsp.ls_types",
        "docstring": "The result of a hover request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 312,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.text_utils.LineType",
      "class_info": {
        "name": "LineType",
        "module": "serena.text_utils",
        "docstring": "Enum for different types of lines in search results.",
        "bases": [
          "StrEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 15,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.dashboard.RequestLog",
      "class_info": {
        "name": "RequestLog",
        "module": "serena.dashboard",
        "docstring": null,
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 21,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.dashboard.ResponseLog",
      "class_info": {
        "name": "ResponseLog",
        "module": "serena.dashboard",
        "docstring": null,
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 25,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.dashboard.ResponseToolNames",
      "class_info": {
        "name": "ResponseToolNames",
        "module": "serena.dashboard",
        "docstring": null,
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 30,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.dashboard.ResponseToolStats",
      "class_info": {
        "name": "ResponseToolStats",
        "module": "serena.dashboard",
        "docstring": null,
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 34,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.gui_log_viewer.LogLevel",
      "class_info": {
        "name": "LogLevel",
        "module": "serena.gui_log_viewer",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.util.shell.ShellCommandResult",
      "class_info": {
        "name": "ShellCommandResult",
        "module": "serena.util.shell",
        "docstring": null,
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 8,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.util.file_system.ScanResult",
      "class_info": {
        "name": "ScanResult",
        "module": "serena.util.file_system",
        "docstring": "Result of scanning a directory.",
        "bases": [
          "NamedTuple"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 15,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.util.thread.Status",
      "class_info": {
        "name": "Status",
        "module": "serena.util.thread",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 20,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.jetbrains_plugin_client.SerenaClientError",
      "class_info": {
        "name": "SerenaClientError",
        "module": "serena.tools.jetbrains_plugin_client",
        "docstring": "Base exception for Serena client errors.",
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.jetbrains_plugin_client.ConnectionError",
      "class_info": {
        "name": "ConnectionError",
        "module": "serena.tools.jetbrains_plugin_client",
        "docstring": "Raised when connection to the service fails.",
        "bases": [
          "SerenaClientError"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 23,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.jetbrains_plugin_client.APIError",
      "class_info": {
        "name": "APIError",
        "module": "serena.tools.jetbrains_plugin_client",
        "docstring": "Raised when the API returns an error response.",
        "bases": [
          "SerenaClientError"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 27,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.jetbrains_plugin_client.ServerNotFoundError",
      "class_info": {
        "name": "ServerNotFoundError",
        "module": "serena.tools.jetbrains_plugin_client",
        "docstring": "Raised when the plugin's service is not found.",
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 31,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.tools_base.ToolMarkerCanEdit",
      "class_info": {
        "name": "ToolMarkerCanEdit",
        "module": "serena.tools.tools_base",
        "docstring": "Marker class for all tools that can perform editing operations on files.",
        "bases": [
          "ToolMarker"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 82,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.tools_base.ToolMarkerOptional",
      "class_info": {
        "name": "ToolMarkerOptional",
        "module": "serena.tools.tools_base",
        "docstring": "Marker class for optional tools that are disabled by default.",
        "bases": [
          "ToolMarker"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 92,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.tools_base.ToolMarkerSymbolicRead",
      "class_info": {
        "name": "ToolMarkerSymbolicRead",
        "module": "serena.tools.tools_base",
        "docstring": "Marker class for tools that perform symbol read operations.",
        "bases": [
          "ToolMarker"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 98,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.tools_base.ToolMarkerSymbolicEdit",
      "class_info": {
        "name": "ToolMarkerSymbolicEdit",
        "module": "serena.tools.tools_base",
        "docstring": "Marker class for tools that perform symbolic edit operations.",
        "bases": [
          "ToolMarkerCanEdit"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 104,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.tools.tools_base.EditedFileContext",
      "class_info": {
        "name": "EditedFileContext",
        "module": "serena.tools.tools_base",
        "docstring": "Context manager for file editing.\n\nCreate the context, then use `set_updated_content` to set the new content, the original content\nbeing provided in `original_content`.\nWhen exiting the context without an exception, the updated content will be written back to the file.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.tools.tools_base",
            "signature": "def __init__(self, relative_path: str, agent: 'SerenaAgent'):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "'SerenaAgent'",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 302
          },
          {
            "name": "__enter__",
            "module": "serena.tools.tools_base",
            "signature": "def __enter__(self) -> Self:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 312
          },
          {
            "name": "get_original_content",
            "module": "serena.tools.tools_base",
            "signature": "def get_original_content(self) -> str:",
            "docstring": ":return: the original content of the file before any modifications.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 315
          },
          {
            "name": "set_updated_content",
            "module": "serena.tools.tools_base",
            "signature": "def set_updated_content(self, content: str) -> None:",
            "docstring": "Sets the updated content of the file, which will be written back to the file\nwhen the context is exited without an exception.\n\n:param content: the updated content of the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 321
          },
          {
            "name": "__exit__",
            "module": "serena.tools.tools_base",
            "signature": "def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exc_type",
                "annotation": "type[BaseException] | None",
                "default": null
              },
              {
                "name": "exc_value",
                "annotation": "BaseException | None",
                "default": null
              },
              {
                "name": "traceback",
                "annotation": "TracebackType | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 330
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 293,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.server.StopLoopException",
      "class_info": {
        "name": "StopLoopException",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 94,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokenTypes",
      "class_info": {
        "name": "SemanticTokenTypes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined token types. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 43,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokenModifiers",
      "class_info": {
        "name": "SemanticTokenModifiers",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined token modifiers. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 79,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ErrorCodes",
      "class_info": {
        "name": "ErrorCodes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Predefined error codes.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 113,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LSPErrorCodes",
      "class_info": {
        "name": "LSPErrorCodes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 127,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRangeKind",
      "class_info": {
        "name": "FoldingRangeKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined range kinds.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 155,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SymbolTag",
      "class_info": {
        "name": "SymbolTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 207,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.UniquenessLevel",
      "class_info": {
        "name": "UniquenessLevel",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Moniker uniqueness level to define scope of the moniker.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 217,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MonikerKind",
      "class_info": {
        "name": "MonikerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The moniker kind.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 235,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintKind",
      "class_info": {
        "name": "InlayHintKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint kinds.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 250,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MessageType",
      "class_info": {
        "name": "MessageType",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The message type",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 262,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentSyncKind",
      "class_info": {
        "name": "TextDocumentSyncKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines how the host (editor) should sync\ndocument changes to the language server.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 275,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentSaveReason",
      "class_info": {
        "name": "TextDocumentSaveReason",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents reasons why a text document is saved.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 291,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionItemKind",
      "class_info": {
        "name": "CompletionItemKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The kind of a completion entry.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 303,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionItemTag",
      "class_info": {
        "name": "CompletionItemTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion item tags are extra annotations that tweak the rendering of a completion\nitem.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 333,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InsertTextFormat",
      "class_info": {
        "name": "InsertTextFormat",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines whether the insert text in a completion item should be interpreted as\nplain text or a snippet.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 344,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InsertTextMode",
      "class_info": {
        "name": "InsertTextMode",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How whitespace and indentation is handled during completion\nitem insertion.\n\n@since 3.16.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 362,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlightKind",
      "class_info": {
        "name": "DocumentHighlightKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document highlight kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 385,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionKind",
      "class_info": {
        "name": "CodeActionKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined code action kinds",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 396,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TraceValues",
      "class_info": {
        "name": "TraceValues",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 450,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MarkupKind",
      "class_info": {
        "name": "MarkupKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 459,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PositionEncodingKind",
      "class_info": {
        "name": "PositionEncodingKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined position encoding kinds.\n\n@since 3.17.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 473,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileChangeType",
      "class_info": {
        "name": "FileChangeType",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The file event type",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 494,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WatchKind",
      "class_info": {
        "name": "WatchKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntFlag"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 505,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionTriggerKind",
      "class_info": {
        "name": "CompletionTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How a completion was triggered",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 544,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpTriggerKind",
      "class_info": {
        "name": "SignatureHelpTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How a signature help was triggered.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 557,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionTriggerKind",
      "class_info": {
        "name": "CodeActionTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The reason why code actions were requested.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 571,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationPatternKind",
      "class_info": {
        "name": "FileOperationPatternKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A pattern kind describing if a glob pattern matches a file a folder or\nboth.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 586,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookCellKind",
      "class_info": {
        "name": "NotebookCellKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell kind.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 599,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ResourceOperationKind",
      "class_info": {
        "name": "ResourceOperationKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 611,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FailureHandlingKind",
      "class_info": {
        "name": "FailureHandlingKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 620,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PrepareSupportDefaultBehavior",
      "class_info": {
        "name": "PrepareSupportDefaultBehavior",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 636,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TokenFormat",
      "class_info": {
        "name": "TokenFormat",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 642,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ImplementationParams",
      "class_info": {
        "name": "ImplementationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 802,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Location",
      "class_info": {
        "name": "Location",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 814,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ImplementationRegistrationOptions",
      "class_info": {
        "name": "ImplementationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 823,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeDefinitionParams",
      "class_info": {
        "name": "TypeDefinitionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 832,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeDefinitionRegistrationOptions",
      "class_info": {
        "name": "TypeDefinitionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 844,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceFolder",
      "class_info": {
        "name": "WorkspaceFolder",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace folder inside a client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 853,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeWorkspaceFoldersParams",
      "class_info": {
        "name": "DidChangeWorkspaceFoldersParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a `workspace/didChangeWorkspaceFolders` notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 863,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentColorParams",
      "class_info": {
        "name": "DocumentColorParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentColorRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 876,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ColorInformation",
      "class_info": {
        "name": "ColorInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a color range from a document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 888,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentColorRegistrationOptions",
      "class_info": {
        "name": "DocumentColorRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 897,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ColorPresentationParams",
      "class_info": {
        "name": "ColorPresentationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link ColorPresentationRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 906,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ColorPresentation",
      "class_info": {
        "name": "ColorPresentation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 922,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressOptions",
      "class_info": {
        "name": "WorkDoneProgressOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 936,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentRegistrationOptions",
      "class_info": {
        "name": "TextDocumentRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General text document registration options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 940,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRangeParams",
      "class_info": {
        "name": "FoldingRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link FoldingRangeRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 948,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRange",
      "class_info": {
        "name": "FoldingRange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a folding range. To be valid, start and end line must be bigger than zero and smaller\nthan the number of lines in the document. Clients are free to ignore invalid ranges.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 960,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRangeRegistrationOptions",
      "class_info": {
        "name": "FoldingRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 987,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeclarationParams",
      "class_info": {
        "name": "DeclarationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 996,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeclarationRegistrationOptions",
      "class_info": {
        "name": "DeclarationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1008,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SelectionRangeParams",
      "class_info": {
        "name": "SelectionRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in selection range requests.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1017,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SelectionRange",
      "class_info": {
        "name": "SelectionRange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A selection range represents a part of a selection hierarchy. A selection range\nmay have a parent selection range that contains it.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1031,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SelectionRangeRegistrationOptions",
      "class_info": {
        "name": "SelectionRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1042,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressCreateParams",
      "class_info": {
        "name": "WorkDoneProgressCreateParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1051,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressCancelParams",
      "class_info": {
        "name": "WorkDoneProgressCancelParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1056,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyPrepareParams",
      "class_info": {
        "name": "CallHierarchyPrepareParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `textDocument/prepareCallHierarchy` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1061,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyItem",
      "class_info": {
        "name": "CallHierarchyItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents programming constructs like functions or constructors in the context\nof call hierarchy.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1075,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyRegistrationOptions",
      "class_info": {
        "name": "CallHierarchyRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Call hierarchy options used during static or dynamic registration.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1102,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyIncomingCallsParams",
      "class_info": {
        "name": "CallHierarchyIncomingCallsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `callHierarchy/incomingCalls` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1116,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyOutgoingCallsParams",
      "class_info": {
        "name": "CallHierarchyOutgoingCallsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `callHierarchy/outgoingCalls` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1145,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyOutgoingCall",
      "class_info": {
        "name": "CallHierarchyOutgoingCall",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1159,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensParams",
      "class_info": {
        "name": "SemanticTokensParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1173,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokens",
      "class_info": {
        "name": "SemanticTokens",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1185,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensPartialResult",
      "class_info": {
        "name": "SemanticTokensPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1197,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensRegistrationOptions",
      "class_info": {
        "name": "SemanticTokensRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1203,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensDeltaParams",
      "class_info": {
        "name": "SemanticTokensDeltaParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1221,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensDelta",
      "class_info": {
        "name": "SemanticTokensDelta",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1236,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensDeltaPartialResult",
      "class_info": {
        "name": "SemanticTokensDeltaPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1244,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensRangeParams",
      "class_info": {
        "name": "SemanticTokensRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1250,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowDocumentParams",
      "class_info": {
        "name": "ShowDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Params to show a document.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1264,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowDocumentResult",
      "class_info": {
        "name": "ShowDocumentResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a showDocument request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1288,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LinkedEditingRangeParams",
      "class_info": {
        "name": "LinkedEditingRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1298,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LinkedEditingRanges",
      "class_info": {
        "name": "LinkedEditingRanges",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a linked editing range request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1307,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LinkedEditingRangeRegistrationOptions",
      "class_info": {
        "name": "LinkedEditingRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1322,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CreateFilesParams",
      "class_info": {
        "name": "CreateFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated creation of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1331,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceEdit",
      "class_info": {
        "name": "WorkspaceEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace edit represents changes to many resources managed in the workspace. The edit\nshould either provide `changes` or `documentChanges`. If documentChanges are present\nthey are preferred over `changes` if the client can handle versioned document edits.\n\nSince version 3.13.0 a workspace edit can contain resource operations as well. If resource\noperations are present clients need to execute the operations in the order in which they\nare provided. So a workspace edit for example can consist of the following two changes:\n(1) a create file a.txt and (2) a text document edit which insert text into file a.txt.\n\nAn invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will\ncause failure of the operation. How the client recovers from the failure is described by\nthe client capability: `workspace.workspaceEdit.failureHandling`",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1342,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationRegistrationOptions",
      "class_info": {
        "name": "FileOperationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The options to register for file operations.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1379,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameFilesParams",
      "class_info": {
        "name": "RenameFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated renames of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1389,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeleteFilesParams",
      "class_info": {
        "name": "DeleteFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated deletes of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1401,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MonikerParams",
      "class_info": {
        "name": "MonikerParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1412,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Moniker",
      "class_info": {
        "name": "Moniker",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Moniker definition to match LSIF 0.5 moniker definition.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1424,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MonikerRegistrationOptions",
      "class_info": {
        "name": "MonikerRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1441,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchyPrepareParams",
      "class_info": {
        "name": "TypeHierarchyPrepareParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `textDocument/prepareTypeHierarchy` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1447,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchyItem",
      "class_info": {
        "name": "TypeHierarchyItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1461,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchyRegistrationOptions",
      "class_info": {
        "name": "TypeHierarchyRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Type hierarchy options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1488,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchySupertypesParams",
      "class_info": {
        "name": "TypeHierarchySupertypesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `typeHierarchy/supertypes` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1502,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchySubtypesParams",
      "class_info": {
        "name": "TypeHierarchySubtypesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `typeHierarchy/subtypes` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1516,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueParams",
      "class_info": {
        "name": "InlineValueParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in inline value requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1530,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueRegistrationOptions",
      "class_info": {
        "name": "InlineValueRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inline value options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1547,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintParams",
      "class_info": {
        "name": "InlayHintParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in inlay hint requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1561,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHint",
      "class_info": {
        "name": "InlayHint",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint information.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1575,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintRegistrationOptions",
      "class_info": {
        "name": "InlayHintRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1616,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidOpenNotebookDocumentParams",
      "class_info": {
        "name": "DidOpenNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in an open notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1733,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeNotebookDocumentParams",
      "class_info": {
        "name": "DidChangeNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a change notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1746,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidSaveNotebookDocumentParams",
      "class_info": {
        "name": "DidSaveNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a save notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1773,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidCloseNotebookDocumentParams",
      "class_info": {
        "name": "DidCloseNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a close notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1783,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RegistrationParams",
      "class_info": {
        "name": "RegistrationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1796,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.UnregistrationParams",
      "class_info": {
        "name": "UnregistrationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1800,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InitializeParams",
      "class_info": {
        "name": "InitializeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1804,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InitializeResult",
      "class_info": {
        "name": "InitializeResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result returned from an initialize request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1851,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InitializeError",
      "class_info": {
        "name": "InitializeError",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The data type of the ResponseError if the\ninitialize request fails.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1862,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InitializedParams",
      "class_info": {
        "name": "InitializedParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1874,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowMessageParams",
      "class_info": {
        "name": "ShowMessageParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a notification message.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1889,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowMessageRequestParams",
      "class_info": {
        "name": "ShowMessageRequestParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1898,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MessageActionItem",
      "class_info": {
        "name": "MessageActionItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1907,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LogMessageParams",
      "class_info": {
        "name": "LogMessageParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The log message parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1912,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidOpenTextDocumentParams",
      "class_info": {
        "name": "DidOpenTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in an open text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1921,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeTextDocumentParams",
      "class_info": {
        "name": "DidChangeTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The change text document notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1928,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentChangeRegistrationOptions",
      "class_info": {
        "name": "TextDocumentChangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describe options to be used when registered for text document change events.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1949,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidCloseTextDocumentParams",
      "class_info": {
        "name": "DidCloseTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a close text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1959,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidSaveTextDocumentParams",
      "class_info": {
        "name": "DidSaveTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a save text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1966,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentSaveRegistrationOptions",
      "class_info": {
        "name": "TextDocumentSaveRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Save registration options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1976,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WillSaveTextDocumentParams",
      "class_info": {
        "name": "WillSaveTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a will save text document notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1986,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextEdit",
      "class_info": {
        "name": "TextEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text edit applicable to a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1995,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeWatchedFilesParams",
      "class_info": {
        "name": "DidChangeWatchedFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The watched files change notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2006,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeWatchedFilesRegistrationOptions",
      "class_info": {
        "name": "DidChangeWatchedFilesRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describe options to be used when registered for text document change events.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2013,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionParams",
      "class_info": {
        "name": "CompletionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion parameters",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2033,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionItem",
      "class_info": {
        "name": "CompletionItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2050,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionList",
      "class_info": {
        "name": "CompletionList",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a collection of {@link CompletionItem completion items} to be presented\nin the editor.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2174,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionRegistrationOptions",
      "class_info": {
        "name": "CompletionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CompletionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2202,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.HoverParams",
      "class_info": {
        "name": "HoverParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link HoverRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2236,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Hover",
      "class_info": {
        "name": "Hover",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a hover request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2247,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.HoverRegistrationOptions",
      "class_info": {
        "name": "HoverRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link HoverRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2257,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpParams",
      "class_info": {
        "name": "SignatureHelpParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2265,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelp",
      "class_info": {
        "name": "SignatureHelp",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Signature help represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2281,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpRegistrationOptions",
      "class_info": {
        "name": "SignatureHelpRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2309,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DefinitionParams",
      "class_info": {
        "name": "DefinitionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2326,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DefinitionRegistrationOptions",
      "class_info": {
        "name": "DefinitionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2340,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ReferenceParams",
      "class_info": {
        "name": "ReferenceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2348,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ReferenceRegistrationOptions",
      "class_info": {
        "name": "ReferenceRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2363,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlightParams",
      "class_info": {
        "name": "DocumentHighlightParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2371,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlight",
      "class_info": {
        "name": "DocumentHighlight",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document highlight is a range inside a text document which deserves\nspecial attention. Usually a document highlight is visualized by changing\nthe background color of its range.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2385,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlightRegistrationOptions",
      "class_info": {
        "name": "DocumentHighlightRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2397,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentSymbolParams",
      "class_info": {
        "name": "DocumentSymbolParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2405,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SymbolInformation",
      "class_info": {
        "name": "SymbolInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2417,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentSymbol",
      "class_info": {
        "name": "DocumentSymbol",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents programming constructs like variables, classes, interfaces etc.\nthat appear in a document. Document symbols can be hierarchical and they\nhave two ranges: one that encloses its definition and one that points to\nits most interesting range, e.g. the range of an identifier.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2451,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentSymbolRegistrationOptions",
      "class_info": {
        "name": "DocumentSymbolRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2482,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionParams",
      "class_info": {
        "name": "CodeActionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2495,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Command",
      "class_info": {
        "name": "Command",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a reference to a command. Provides a title which\nwill be used to represent a command in the UI and, optionally,\nan array of arguments which will be passed to the command handler\nfunction when invoked.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2511,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeAction",
      "class_info": {
        "name": "CodeAction",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A code action represents a change that can be performed in code, e.g. to fix a problem or\nto refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2527,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionRegistrationOptions",
      "class_info": {
        "name": "CodeActionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2579,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceSymbolParams",
      "class_info": {
        "name": "WorkspaceSymbolParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2597,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceSymbol",
      "class_info": {
        "name": "WorkspaceSymbol",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special workspace symbol that supports locations without a range.\n\nSee also SymbolInformation.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2610,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceSymbolRegistrationOptions",
      "class_info": {
        "name": "WorkspaceSymbolRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2642,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLensParams",
      "class_info": {
        "name": "CodeLensParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2652,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLens",
      "class_info": {
        "name": "CodeLens",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A code lens represents a {@link Command command} that should be shown along with\nsource text, like the number of references, a way to run tests, etc.\n\nA code lens is _unresolved_ when no command is associated to it. For performance\nreasons the creation of a code lens and resolving should be done in two stages.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2664,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLensRegistrationOptions",
      "class_info": {
        "name": "CodeLensRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2682,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentLinkParams",
      "class_info": {
        "name": "DocumentLinkParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2692,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentLink",
      "class_info": {
        "name": "DocumentLink",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document link is a range in a text document that links to an internal or external resource, like another\ntext document or a web site.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2704,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentLinkRegistrationOptions",
      "class_info": {
        "name": "DocumentLinkRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2726,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentFormattingParams",
      "class_info": {
        "name": "DocumentFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2736,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentFormattingRegistrationOptions",
      "class_info": {
        "name": "DocumentFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2747,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentRangeFormattingParams",
      "class_info": {
        "name": "DocumentRangeFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2755,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentRangeFormattingRegistrationOptions",
      "class_info": {
        "name": "DocumentRangeFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2768,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentOnTypeFormattingParams",
      "class_info": {
        "name": "DocumentOnTypeFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2776,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentOnTypeFormattingRegistrationOptions",
      "class_info": {
        "name": "DocumentOnTypeFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2794,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameParams",
      "class_info": {
        "name": "RenameParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2806,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameRegistrationOptions",
      "class_info": {
        "name": "RenameRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2821,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PrepareRenameParams",
      "class_info": {
        "name": "PrepareRenameParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2833,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ExecuteCommandParams",
      "class_info": {
        "name": "ExecuteCommandParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2842,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ExecuteCommandRegistrationOptions",
      "class_info": {
        "name": "ExecuteCommandRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2853,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ApplyWorkspaceEditParams",
      "class_info": {
        "name": "ApplyWorkspaceEditParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters passed via a apply workspace edit request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2860,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ApplyWorkspaceEditResult",
      "class_info": {
        "name": "ApplyWorkspaceEditResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result returned from the apply workspace edit request.\n\n@since 3.17 renamed from ApplyWorkspaceEditResponse",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2871,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressBegin",
      "class_info": {
        "name": "WorkDoneProgressBegin",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2889,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressReport",
      "class_info": {
        "name": "WorkDoneProgressReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2915,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressEnd",
      "class_info": {
        "name": "WorkDoneProgressEnd",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2937,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SetTraceParams",
      "class_info": {
        "name": "SetTraceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2944,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LogTraceParams",
      "class_info": {
        "name": "LogTraceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2948,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CancelParams",
      "class_info": {
        "name": "CancelParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2953,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ProgressParams",
      "class_info": {
        "name": "ProgressParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2958,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentPositionParams",
      "class_info": {
        "name": "TextDocumentPositionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in requests to pass a text document and a position inside that\ndocument.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2965,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkDoneProgressParams",
      "class_info": {
        "name": "WorkDoneProgressParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2976,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PartialResultParams",
      "class_info": {
        "name": "PartialResultParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2981,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LocationLink",
      "class_info": {
        "name": "LocationLink",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},\nincluding an origin range.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2987,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Range",
      "class_info": {
        "name": "Range",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3008,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ImplementationOptions",
      "class_info": {
        "name": "ImplementationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3028,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.StaticRegistrationOptions",
      "class_info": {
        "name": "StaticRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Static registration options to be returned in the initialize\nrequest.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3032,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeDefinitionOptions",
      "class_info": {
        "name": "TypeDefinitionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3042,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceFoldersChangeEvent",
      "class_info": {
        "name": "WorkspaceFoldersChangeEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The workspace folder change event.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3046,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentIdentifier",
      "class_info": {
        "name": "TextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A literal to identify a text document in the client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3062,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Color",
      "class_info": {
        "name": "Color",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a color in RGBA space.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3069,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentColorOptions",
      "class_info": {
        "name": "DocumentColorOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3082,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRangeOptions",
      "class_info": {
        "name": "FoldingRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3086,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeclarationOptions",
      "class_info": {
        "name": "DeclarationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3090,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Position",
      "class_info": {
        "name": "Position",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3094,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SelectionRangeOptions",
      "class_info": {
        "name": "SelectionRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3139,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyOptions",
      "class_info": {
        "name": "CallHierarchyOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Call hierarchy options used during static registration.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3143,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensOptions",
      "class_info": {
        "name": "SemanticTokensOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3152,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensEdit",
      "class_info": {
        "name": "SemanticTokensEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3165,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LinkedEditingRangeOptions",
      "class_info": {
        "name": "LinkedEditingRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3176,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileCreate",
      "class_info": {
        "name": "FileCreate",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder create.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3180,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentEdit",
      "class_info": {
        "name": "TextDocumentEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describes textual changes on a text document. A TextDocumentEdit describes all changes\non a document version Si and after they are applied move the document to version Si+1.\nSo the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any\nkind of ordering. However the edits must be non overlapping.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3190,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CreateFile",
      "class_info": {
        "name": "CreateFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Create file operation.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3206,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameFile",
      "class_info": {
        "name": "RenameFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Rename file operation",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3221,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeleteFile",
      "class_info": {
        "name": "DeleteFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Delete file operation",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3238,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ChangeAnnotation",
      "class_info": {
        "name": "ChangeAnnotation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional information that describes document changes.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3253,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationFilter",
      "class_info": {
        "name": "FileOperationFilter",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A filter to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3270,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileRename",
      "class_info": {
        "name": "FileRename",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder rename.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3283,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileDelete",
      "class_info": {
        "name": "FileDelete",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder delete.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3295,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MonikerOptions",
      "class_info": {
        "name": "MonikerOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3305,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchyOptions",
      "class_info": {
        "name": "TypeHierarchyOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Type hierarchy options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3309,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueContext",
      "class_info": {
        "name": "InlineValueContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3318,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueText",
      "class_info": {
        "name": "InlineValueText",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide inline value as text.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3328,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueVariableLookup",
      "class_info": {
        "name": "InlineValueVariableLookup",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide inline value through a variable lookup.\nIf only a range is specified, the variable name will be extracted from the underlying document.\nAn optional variable name can be used to override the extracted name.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3340,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueEvaluatableExpression",
      "class_info": {
        "name": "InlineValueEvaluatableExpression",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide an inline value through an expression evaluation.\nIf only a range is specified, the expression will be extracted from the underlying document.\nAn optional expression can be used to override the extracted expression.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3357,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueOptions",
      "class_info": {
        "name": "InlineValueOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inline value options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3372,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintLabelPart",
      "class_info": {
        "name": "InlayHintLabelPart",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An inlay hint label part allows for interactive and composite labels\nof inlay hints.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3381,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MarkupContent",
      "class_info": {
        "name": "MarkupContent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3413,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintOptions",
      "class_info": {
        "name": "InlayHintOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3444,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.PreviousResultId",
      "class_info": {
        "name": "PreviousResultId",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A previous result id in a workspace pull request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3566,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocument",
      "class_info": {
        "name": "NotebookDocument",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3579,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentItem",
      "class_info": {
        "name": "TextDocumentItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An item to transfer a text document from the client to the\nserver.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3601,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.VersionedNotebookDocumentIdentifier",
      "class_info": {
        "name": "VersionedNotebookDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A versioned notebook document identifier.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3617,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentChangeEvent",
      "class_info": {
        "name": "NotebookDocumentChangeEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A change event for a notebook document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3629,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentIdentifier",
      "class_info": {
        "name": "NotebookDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A literal to identify a notebook document in the client.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3643,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Registration",
      "class_info": {
        "name": "Registration",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General parameters to to register for an notification or to register a provider.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3653,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.Unregistration",
      "class_info": {
        "name": "Unregistration",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General parameters to unregister a request or notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3665,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceFoldersInitializeParams",
      "class_info": {
        "name": "WorkspaceFoldersInitializeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3675,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ServerCapabilities",
      "class_info": {
        "name": "ServerCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines the capabilities provided by a language\nserver.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3686,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.VersionedTextDocumentIdentifier",
      "class_info": {
        "name": "VersionedTextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text document identifier to denote a specific version of a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3795,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SaveOptions",
      "class_info": {
        "name": "SaveOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Save options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3804,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileEvent",
      "class_info": {
        "name": "FileEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An event describing a file change.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3811,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileSystemWatcher",
      "class_info": {
        "name": "FileSystemWatcher",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3820,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionContext",
      "class_info": {
        "name": "CompletionContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Contains additional information about the context in which a completion request is triggered.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3868,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionItemLabelDetails",
      "class_info": {
        "name": "CompletionItemLabelDetails",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional details for a completion item label.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3878,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InsertReplaceEdit",
      "class_info": {
        "name": "InsertReplaceEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special text edit to provide an insert and a replace operation.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3892,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionOptions",
      "class_info": {
        "name": "CompletionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3906,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.HoverOptions",
      "class_info": {
        "name": "HoverOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Hover options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3938,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpContext",
      "class_info": {
        "name": "SignatureHelpContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional information about the context in which a signature help request was triggered.\n\n@since 3.15.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3944,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureInformation",
      "class_info": {
        "name": "SignatureInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3968,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpOptions",
      "class_info": {
        "name": "SignatureHelpOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server Capabilities for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3990,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DefinitionOptions",
      "class_info": {
        "name": "DefinitionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server Capabilities for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4005,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ReferenceContext",
      "class_info": {
        "name": "ReferenceContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Value-object that contains additional information when\nrequesting references.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4011,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ReferenceOptions",
      "class_info": {
        "name": "ReferenceOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Reference options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4020,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlightOptions",
      "class_info": {
        "name": "DocumentHighlightOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4026,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.BaseSymbolInformation",
      "class_info": {
        "name": "BaseSymbolInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A base for all symbol information.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4032,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentSymbolOptions",
      "class_info": {
        "name": "DocumentSymbolOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4050,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionContext",
      "class_info": {
        "name": "CodeActionContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Contains additional diagnostic information about the context in which\na {@link CodeActionProvider.provideCodeActions code action} is run.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4061,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionOptions",
      "class_info": {
        "name": "CodeActionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4083,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceSymbolOptions",
      "class_info": {
        "name": "WorkspaceSymbolOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server capabilities for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4099,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLensOptions",
      "class_info": {
        "name": "CodeLensOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Code Lens provider options of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4110,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentLinkOptions",
      "class_info": {
        "name": "DocumentLinkOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4118,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FormattingOptions",
      "class_info": {
        "name": "FormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Value-object describing what options formatting should use.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4126,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentFormattingOptions",
      "class_info": {
        "name": "DocumentFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4147,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentRangeFormattingOptions",
      "class_info": {
        "name": "DocumentRangeFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4153,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentOnTypeFormattingOptions",
      "class_info": {
        "name": "DocumentOnTypeFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4159,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameOptions",
      "class_info": {
        "name": "RenameOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4168,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ExecuteCommandOptions",
      "class_info": {
        "name": "ExecuteCommandOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The server capabilities of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4178,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensLegend",
      "class_info": {
        "name": "SemanticTokensLegend",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4186,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.OptionalVersionedTextDocumentIdentifier",
      "class_info": {
        "name": "OptionalVersionedTextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text document identifier to optionally denote a specific version of a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4195,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.AnnotatedTextEdit",
      "class_info": {
        "name": "AnnotatedTextEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special text edit with an additional change annotation.\n\n@since 3.16.0.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4208,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ResourceOperation",
      "class_info": {
        "name": "ResourceOperation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A generic resource operation.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4224,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CreateFileOptions",
      "class_info": {
        "name": "CreateFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options to create a file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4235,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameFileOptions",
      "class_info": {
        "name": "RenameFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Rename file options",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4244,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeleteFileOptions",
      "class_info": {
        "name": "DeleteFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Delete file options",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4253,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationPattern",
      "class_info": {
        "name": "FileOperationPattern",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A pattern to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4262,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookCell",
      "class_info": {
        "name": "NotebookCell",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell.\n\nA cell's document URI must be unique across ALL notebook\ncells and can therefore be used to uniquely identify a\nnotebook cell or the cell's text document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4327,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookCellArrayChange",
      "class_info": {
        "name": "NotebookCellArrayChange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A change describing how to move a `NotebookCell`\narray from state S to S'.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4351,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ClientCapabilities",
      "class_info": {
        "name": "ClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines the capabilities provided by the client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4366,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentSyncOptions",
      "class_info": {
        "name": "TextDocumentSyncOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4387,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentSyncOptions",
      "class_info": {
        "name": "NotebookDocumentSyncOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options specific to a notebook plus its cells\nto be synced to the server.\n\nIf a selector provides a notebook document\nfilter but no cell selector all cells of a\nmatching notebook document will be synced.\n\nIf a selector provides no notebook document\nfilter but only a cell selector all notebook\ndocument that contain at least one matching\ncell will be synced.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4405,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentSyncRegistrationOptions",
      "class_info": {
        "name": "NotebookDocumentSyncRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options specific to a notebook.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4433,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceFoldersServerCapabilities",
      "class_info": {
        "name": "WorkspaceFoldersServerCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4454,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationOptions",
      "class_info": {
        "name": "FileOperationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options for notifications/requests for user operations on files.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4467,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeDescription",
      "class_info": {
        "name": "CodeDescription",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Structure to capture a description for an error code.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4487,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ParameterInformation",
      "class_info": {
        "name": "ParameterInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4509,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookCellTextDocumentFilter",
      "class_info": {
        "name": "NotebookCellTextDocumentFilter",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell text document filter denotes a cell text\ndocument by different properties.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4528,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationPatternOptions",
      "class_info": {
        "name": "FileOperationPatternOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Matching options for the file operation pattern.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4547,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ExecutionSummary",
      "class_info": {
        "name": "ExecutionSummary",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4557,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceClientCapabilities",
      "class_info": {
        "name": "WorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Workspace specific client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4567,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentClientCapabilities",
      "class_info": {
        "name": "TextDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Text document specific client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4623,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentClientCapabilities",
      "class_info": {
        "name": "NotebookDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Capabilities specific to the notebook document support.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4717,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WindowClientCapabilities",
      "class_info": {
        "name": "WindowClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4729,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.GeneralClientCapabilities",
      "class_info": {
        "name": "GeneralClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General client capabilities.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4750,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RelativePattern",
      "class_info": {
        "name": "RelativePattern",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A relative pattern is a helper to construct glob patterns that are matched\nrelatively to a base URI. The common value for a `baseUri` is a workspace\nfolder root, but it can be another absolute URI as well.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4792,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceEditClientCapabilities",
      "class_info": {
        "name": "WorkspaceEditClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4807,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DidChangeWatchedFilesClientCapabilities",
      "class_info": {
        "name": "DidChangeWatchedFilesClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4840,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.WorkspaceSymbolClientCapabilities",
      "class_info": {
        "name": "WorkspaceSymbolClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4852,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ExecuteCommandClientCapabilities",
      "class_info": {
        "name": "ExecuteCommandClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4872,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensWorkspaceClientCapabilities",
      "class_info": {
        "name": "SemanticTokensWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4879,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLensWorkspaceClientCapabilities",
      "class_info": {
        "name": "CodeLensWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4892,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FileOperationClientCapabilities",
      "class_info": {
        "name": "FileOperationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Capabilities relating to events from file operations by the user in the client.\n\nThese events do not come from the file system, they come from user operations\nlike renaming a file in the UI.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4905,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueWorkspaceClientCapabilities",
      "class_info": {
        "name": "InlineValueWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client workspace capabilities specific to inline values.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4930,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintWorkspaceClientCapabilities",
      "class_info": {
        "name": "InlayHintWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client workspace capabilities specific to inlay hints.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4946,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TextDocumentSyncClientCapabilities",
      "class_info": {
        "name": "TextDocumentSyncClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4978,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CompletionClientCapabilities",
      "class_info": {
        "name": "CompletionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion client capabilities",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4991,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.HoverClientCapabilities",
      "class_info": {
        "name": "HoverClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5016,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SignatureHelpClientCapabilities",
      "class_info": {
        "name": "SignatureHelpClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5024,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DeclarationClientCapabilities",
      "class_info": {
        "name": "DeclarationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.14.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5041,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DefinitionClientCapabilities",
      "class_info": {
        "name": "DefinitionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5052,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeDefinitionClientCapabilities",
      "class_info": {
        "name": "TypeDefinitionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Since 3.6.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5063,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ImplementationClientCapabilities",
      "class_info": {
        "name": "ImplementationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.6.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5076,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ReferenceClientCapabilities",
      "class_info": {
        "name": "ReferenceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5089,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentHighlightClientCapabilities",
      "class_info": {
        "name": "DocumentHighlightClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5096,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentSymbolClientCapabilities",
      "class_info": {
        "name": "DocumentSymbolClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5103,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeActionClientCapabilities",
      "class_info": {
        "name": "CodeActionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The Client Capabilities of a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5126,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CodeLensClientCapabilities",
      "class_info": {
        "name": "CodeLensClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities  of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5166,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentLinkClientCapabilities",
      "class_info": {
        "name": "DocumentLinkClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities of a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5173,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentColorClientCapabilities",
      "class_info": {
        "name": "DocumentColorClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5184,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentFormattingClientCapabilities",
      "class_info": {
        "name": "DocumentFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5191,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentRangeFormattingClientCapabilities",
      "class_info": {
        "name": "DocumentRangeFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5198,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.DocumentOnTypeFormattingClientCapabilities",
      "class_info": {
        "name": "DocumentOnTypeFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5205,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RenameClientCapabilities",
      "class_info": {
        "name": "RenameClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5212,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.FoldingRangeClientCapabilities",
      "class_info": {
        "name": "FoldingRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5237,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SelectionRangeClientCapabilities",
      "class_info": {
        "name": "SelectionRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5261,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.CallHierarchyClientCapabilities",
      "class_info": {
        "name": "CallHierarchyClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5295,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.SemanticTokensClientCapabilities",
      "class_info": {
        "name": "SemanticTokensClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5304,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.LinkedEditingRangeClientCapabilities",
      "class_info": {
        "name": "LinkedEditingRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for the linked editing range request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5350,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MonikerClientCapabilities",
      "class_info": {
        "name": "MonikerClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to the moniker request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5362,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.TypeHierarchyClientCapabilities",
      "class_info": {
        "name": "TypeHierarchyClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5374,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlineValueClientCapabilities",
      "class_info": {
        "name": "InlineValueClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to inline values.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5383,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.InlayHintClientCapabilities",
      "class_info": {
        "name": "InlayHintClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint client capabilities.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5393,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.NotebookDocumentSyncClientCapabilities",
      "class_info": {
        "name": "NotebookDocumentSyncClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Notebook specific client capabilities.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5420,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowMessageRequestClientCapabilities",
      "class_info": {
        "name": "ShowMessageRequestClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Show message request client capabilities",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5435,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.ShowDocumentClientCapabilities",
      "class_info": {
        "name": "ShowDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for the showDocument request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5442,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.RegularExpressionsClientCapabilities",
      "class_info": {
        "name": "RegularExpressionsClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to regular expressions.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5453,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.MarkdownClientCapabilities",
      "class_info": {
        "name": "MarkdownClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to the used markdown parser.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5465,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.util.zip.SafeZipExtractor",
      "class_info": {
        "name": "SafeZipExtractor",
        "module": "solidlsp.util.zip",
        "docstring": "A utility class for extracting ZIP archives safely.\n\nFeatures:\n- Handles long file paths on Windows\n- Skips files that fail to extract, continuing with the rest\n- Creates necessary directories automatically\n- Optional include/exclude pattern filters",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.util.zip",
            "signature": "def __init__(self, archive_path: Path, extract_dir: Path, verbose: bool=True, include_patterns: Optional[list[str]]=None, exclude_patterns: Optional[list[str]]=None) -> None:",
            "docstring": "Initialize the SafeZipExtractor.\n\n:param archive_path: Path to the ZIP archive file\n:param extract_dir: Directory where files will be extracted\n:param verbose: Whether to log status messages\n:param include_patterns: List of glob patterns for files to extract (None = all files)\n:param exclude_patterns: List of glob patterns for files to skip",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "archive_path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "extract_dir",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "verbose",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_patterns",
                "annotation": "Optional[list[str]]",
                "default": null
              },
              {
                "name": "exclude_patterns",
                "annotation": "Optional[list[str]]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 23
          },
          {
            "name": "extract_all",
            "module": "solidlsp.util.zip",
            "signature": "def extract_all(self) -> None:",
            "docstring": "Extract all files from the archive, skipping any that fail.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 46
          },
          {
            "name": "_should_extract",
            "module": "solidlsp.util.zip",
            "signature": "def _should_extract(self, filename: str) -> bool:",
            "docstring": "Determine whether a file should be extracted based on include/exclude patterns.\n\n:param filename: The file name from the archive\n:return: True if the file should be extracted",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "filename",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 63
          },
          {
            "name": "_extract_member",
            "module": "solidlsp.util.zip",
            "signature": "def _extract_member(self, zip_ref: zipfile.ZipFile, member: zipfile.ZipInfo) -> None:",
            "docstring": "Extract a single member from the archive with error handling.\n\n:param zip_ref: Open ZipFile object\n:param member: ZipInfo object representing the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "zip_ref",
                "annotation": "zipfile.ZipFile",
                "default": null
              },
              {
                "name": "member",
                "annotation": "zipfile.ZipInfo",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 82
          },
          {
            "name": "_normalize_path",
            "module": "solidlsp.util.zip",
            "signature": "@staticmethod",
            "docstring": "Adjust path to handle long paths on Windows.\n\n:param path: Original path\n:return: Normalized path",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 109
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.ls_utils.PathUtils",
      "class_info": {
        "name": "PathUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utilities for platform-agnostic path operations.",
        "bases": [],
        "methods": [
          {
            "name": "uri_to_path",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Converts a URI to a file path. Works on both Linux and Windows.\n\nThis method was obtained from https://stackoverflow.com/a/61922504",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "uri",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 118
          },
          {
            "name": "path_to_uri",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Converts a file path to a file URI (file:///...).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 138
          },
          {
            "name": "is_glob_pattern",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Check if a pattern contains glob-specific characters.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "pattern",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 145
          },
          {
            "name": "get_relative_path",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Gets relative path if it's possible (paths should be on the same drive),\nreturns `None` otherwise.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "base_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 150
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 112,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 7
    },
    {
      "full_name": "serena.agent.LinesRead",
      "class_info": {
        "name": "LinesRead",
        "module": "serena.agent",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.agent",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 48
          },
          {
            "name": "add_lines_read",
            "module": "serena.agent",
            "signature": "def add_lines_read(self, relative_path: str, lines: tuple[int, int]) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lines",
                "annotation": "tuple[int, int]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 51
          },
          {
            "name": "were_lines_read",
            "module": "serena.agent",
            "signature": "def were_lines_read(self, relative_path: str, lines: tuple[int, int]) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "lines",
                "annotation": "tuple[int, int]",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 54
          },
          {
            "name": "invalidate_lines_read",
            "module": "serena.agent",
            "signature": "def invalidate_lines_read(self, relative_path: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 58
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 47,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 7
    },
    {
      "full_name": "interprompt.prompt_factory.PromptFactoryBase",
      "class_info": {
        "name": "PromptFactoryBase",
        "module": "interprompt.prompt_factory",
        "docstring": "Base class for auto-generated prompt factory classes.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.prompt_factory",
            "signature": "def __init__(self, prompts_dir: str | list[str], lang_code: str=DEFAULT_LANG_CODE, fallback_mode=LanguageFallbackMode.EXCEPTION):",
            "docstring": ":param prompts_dir: the directory containing the prompt templates and prompt lists.\n    If a list is provided, will look for prompt templates in the dirs from left to right\n    (first one containing the desired template wins).\n:param lang_code: the language code to use for retrieving the prompt templates and prompt lists.\n    Leave as `default` for single-language use cases.\n:param fallback_mode: the fallback mode to use when a prompt template or prompt list is not found for the requested language.\n    Irrelevant for single-language use cases.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompts_dir",
                "annotation": "str | list[str]",
                "default": null
              },
              {
                "name": "lang_code",
                "annotation": "str",
                "default": null
              },
              {
                "name": "fallback_mode",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 13
          },
          {
            "name": "_render_prompt",
            "module": "interprompt.prompt_factory",
            "signature": "def _render_prompt(self, prompt_name: str, params: dict[str, Any]) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict[str, Any]",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 26
          },
          {
            "name": "_get_prompt_list",
            "module": "interprompt.prompt_factory",
            "signature": "def _get_prompt_list(self, prompt_name: str) -> PromptList:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prompt_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "PromptList",
            "line_number": 30
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 10,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 6
    },
    {
      "full_name": "solidlsp.ls_utils.FileUtils",
      "class_info": {
        "name": "FileUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utility functions for file operations.",
        "bases": [],
        "methods": [
          {
            "name": "read_file",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Reads the file at the given path and returns the contents as a string.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 167
          },
          {
            "name": "download_file",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Downloads the file from the given URL to the given {target_path}",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "url",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 182
          },
          {
            "name": "download_and_extract_archive",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Downloads the archive from the given URL having format {archive_type} and extracts it to the given {target_path}",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "url",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "archive_type",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 199
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 161,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 6
    },
    {
      "full_name": "solidlsp.ls_utils.PlatformUtils",
      "class_info": {
        "name": "PlatformUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "This class provides utilities for platform detection and identification.",
        "bases": [],
        "methods": [
          {
            "name": "get_platform_id",
            "module": "solidlsp.ls_utils",
            "signature": "@classmethod",
            "docstring": "Returns the platform id for the current system",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PlatformId",
            "line_number": 274
          },
          {
            "name": "_determine_windows_machine_type",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 296
          },
          {
            "name": "get_dotnet_version",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the dotnet version for the current system",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": "DotnetVersion",
            "line_number": 336
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 268,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 6
    },
    {
      "full_name": "serena.code_editor.JetBrainsCodeEditor",
      "class_info": {
        "name": "JetBrainsCodeEditor",
        "module": "serena.code_editor",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.code_editor",
            "signature": "def __init__(self, project: Project, agent: Optional['SerenaAgent']=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "Project",
                "default": null
              },
              {
                "name": "agent",
                "annotation": "Optional['SerenaAgent']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 260
          },
          {
            "name": "_open_file_context",
            "module": "serena.code_editor",
            "signature": "@contextmanager",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator['CodeEditor.EditedFile']",
            "line_number": 283
          },
          {
            "name": "_find_unique_symbol",
            "module": "serena.code_editor",
            "signature": "def _find_unique_symbol(self, name_path: str, relative_file_path: str) -> JetBrainsSymbol:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "JetBrainsSymbol",
            "line_number": 286
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 259,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 6
    },
    {
      "full_name": "serena.util.logging.LogBuffer",
      "class_info": {
        "name": "LogBuffer",
        "module": "serena.util.logging",
        "docstring": "A thread-safe buffer for storing log messages.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.util.logging",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 57
          },
          {
            "name": "append",
            "module": "serena.util.logging",
            "signature": "def append(self, msg: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "msg",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 61
          },
          {
            "name": "get_log_messages",
            "module": "serena.util.logging",
            "signature": "def get_log_messages(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 65
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 52,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 6
    },
    {
      "full_name": "interprompt.multilang_prompt.PromptList",
      "class_info": {
        "name": "PromptList",
        "module": "interprompt.multilang_prompt",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "interprompt.multilang_prompt",
            "signature": "def __init__(self, items: list[str]) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "items",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 30
          },
          {
            "name": "to_string",
            "module": "interprompt.multilang_prompt",
            "signature": "def to_string(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 33
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 29,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.ls_utils._U",
      "class_info": {
        "name": "_U",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Union"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 301,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.ls_utils._S",
      "class_info": {
        "name": "_S",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Structure"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 302,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.settings.SolidLSPSettings",
      "class_info": {
        "name": "SolidLSPSettings",
        "module": "solidlsp.settings",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "solidlsp.settings",
            "signature": "def __post_init__(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 14
          },
          {
            "name": "ls_resources_dir",
            "module": "solidlsp.settings",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 19
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 11,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.ls_config.FilenameMatcher",
      "class_info": {
        "name": "FilenameMatcher",
        "module": "solidlsp.ls_config",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_config",
            "signature": "def __init__(self, *patterns: str) -> None:",
            "docstring": ":param patterns: fnmatch-compatible patterns",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 13
          },
          {
            "name": "is_relevant_filename",
            "module": "solidlsp.ls_config",
            "signature": "def is_relevant_filename(self, fn: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "fn",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 19
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.ls_types.__MarkedString_Type_1",
      "class_info": {
        "name": "__MarkedString_Type_1",
        "module": "solidlsp.ls_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 261,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.text_utils.TextLine",
      "class_info": {
        "name": "TextLine",
        "module": "serena.text_utils",
        "docstring": "Represents a line of text with information on how it relates to the match.",
        "bases": [],
        "methods": [
          {
            "name": "get_display_prefix",
            "module": "serena.text_utils",
            "signature": "def get_display_prefix(self) -> str:",
            "docstring": "Get the display prefix for this line based on the match type.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 35
          },
          {
            "name": "format_line",
            "module": "serena.text_utils",
            "signature": "def format_line(self, include_line_numbers: bool=True) -> str:",
            "docstring": "Format the line for display (e.g.,for logging or passing to an LLM).\n\n:param include_line_numbers: Whether to include the line number in the result.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_line_numbers",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 41
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 27,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.agent.AvailableTools",
      "class_info": {
        "name": "AvailableTools",
        "module": "serena.agent",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.agent",
            "signature": "def __init__(self, tools: list[Tool]):",
            "docstring": ":param tools: the list of available tools",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tools",
                "annotation": "list[Tool]",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 97
          },
          {
            "name": "__len__",
            "module": "serena.agent",
            "signature": "def __len__(self) -> int:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 109
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 96,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.file_system.GitignoreSpec",
      "class_info": {
        "name": "GitignoreSpec",
        "module": "serena.util.file_system",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "serena.util.file_system",
            "signature": "def __post_init__(self) -> None:",
            "docstring": "Initialize the PathSpec from patterns.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 97
          },
          {
            "name": "matches",
            "module": "serena.util.file_system",
            "signature": "def matches(self, relative_path: str) -> bool:",
            "docstring": "Check if the given path matches any pattern in this gitignore spec.\n\n:param relative_path: Path to check (should be relative to repo root)\n:return: True if path matches any pattern",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 101
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 87,
        "is_abstract": false,
        "is_dataclass": true
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.config.serena_config.SerenaPaths",
      "class_info": {
        "name": "SerenaPaths",
        "module": "serena.config.serena_config",
        "docstring": "Provides paths to various Serena-related directories and files.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 50
          },
          {
            "name": "get_next_log_file_path",
            "module": "serena.config.serena_config",
            "signature": "def get_next_log_file_path(self, prefix: str) -> str:",
            "docstring": ":param prefix: the filename prefix indicating the type of the log file\n:return: the full path to the log file to use",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prefix",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 56
          }
        ],
        "class_variables": [],
        "decorators": [
          "singleton"
        ],
        "line_number": 45,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CodeActionClientCapabilities_codeActionLiteralSupport_Type_1",
      "class_info": {
        "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5482,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CodeActionClientCapabilities_codeActionLiteralSupport_codeActionKind_Type_1",
      "class_info": {
        "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_codeActionKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5488,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CodeActionClientCapabilities_resolveSupport_Type_1",
      "class_info": {
        "name": "__CodeActionClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5496,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CodeAction_disabled_Type_1",
      "class_info": {
        "name": "__CodeAction_disabled_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5501,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionItemKind_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionItemKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5508,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionItem_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5520,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionItem_insertTextModeSupport_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionItem_insertTextModeSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5568,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionItem_resolveSupport_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionItem_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5572,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionItem_tagSupport_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionItem_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5577,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionClientCapabilities_completionList_Type_1",
      "class_info": {
        "name": "__CompletionClientCapabilities_completionList_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5582,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionList_itemDefaults_Type_1",
      "class_info": {
        "name": "__CompletionList_itemDefaults_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5594,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionList_itemDefaults_editRange_Type_1",
      "class_info": {
        "name": "__CompletionList_itemDefaults_editRange_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5617,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionOptions_completionItem_Type_1",
      "class_info": {
        "name": "__CompletionOptions_completionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5622,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__CompletionOptions_completionItem_Type_2",
      "class_info": {
        "name": "__CompletionOptions_completionItem_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5631,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__DocumentSymbolClientCapabilities_symbolKind_Type_1",
      "class_info": {
        "name": "__DocumentSymbolClientCapabilities_symbolKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5640,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__DocumentSymbolClientCapabilities_tagSupport_Type_1",
      "class_info": {
        "name": "__DocumentSymbolClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5652,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__FoldingRangeClientCapabilities_foldingRangeKind_Type_1",
      "class_info": {
        "name": "__FoldingRangeClientCapabilities_foldingRangeKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5657,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__FoldingRangeClientCapabilities_foldingRange_Type_1",
      "class_info": {
        "name": "__FoldingRangeClientCapabilities_foldingRange_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5665,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__GeneralClientCapabilities_staleRequestSupport_Type_1",
      "class_info": {
        "name": "__GeneralClientCapabilities_staleRequestSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5673,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__InitializeResult_serverInfo_Type_1",
      "class_info": {
        "name": "__InitializeResult_serverInfo_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5682,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__InlayHintClientCapabilities_resolveSupport_Type_1",
      "class_info": {
        "name": "__InlayHintClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5689,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__MarkedString_Type_1",
      "class_info": {
        "name": "__MarkedString_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5694,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentChangeEvent_cells_Type_1",
      "class_info": {
        "name": "__NotebookDocumentChangeEvent_cells_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5699,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentChangeEvent_cells_structure_Type_1",
      "class_info": {
        "name": "__NotebookDocumentChangeEvent_cells_structure_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5710,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentChangeEvent_cells_textContent_Type_1",
      "class_info": {
        "name": "__NotebookDocumentChangeEvent_cells_textContent_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5719,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentFilter_Type_1",
      "class_info": {
        "name": "__NotebookDocumentFilter_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5724,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentFilter_Type_2",
      "class_info": {
        "name": "__NotebookDocumentFilter_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5733,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentFilter_Type_3",
      "class_info": {
        "name": "__NotebookDocumentFilter_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5742,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_Type_1",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5751,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_Type_2",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5760,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_Type_3",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5769,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_Type_4",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_4",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5778,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_cells_Type_1",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5787,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_cells_Type_2",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5791,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_cells_Type_3",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5795,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__NotebookDocumentSyncOptions_notebookSelector_cells_Type_4",
      "class_info": {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_4",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5799,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__PrepareRenameResult_Type_1",
      "class_info": {
        "name": "__PrepareRenameResult_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5803,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__PrepareRenameResult_Type_2",
      "class_info": {
        "name": "__PrepareRenameResult_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5808,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SemanticTokensClientCapabilities_requests_Type_1",
      "class_info": {
        "name": "__SemanticTokensClientCapabilities_requests_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5817,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SemanticTokensClientCapabilities_requests_full_Type_1",
      "class_info": {
        "name": "__SemanticTokensClientCapabilities_requests_full_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5826,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SemanticTokensOptions_full_Type_1",
      "class_info": {
        "name": "__SemanticTokensOptions_full_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5832,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SemanticTokensOptions_full_Type_2",
      "class_info": {
        "name": "__SemanticTokensOptions_full_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5837,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__ServerCapabilities_workspace_Type_1",
      "class_info": {
        "name": "__ServerCapabilities_workspace_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5842,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__ShowMessageRequestClientCapabilities_messageActionItem_Type_1",
      "class_info": {
        "name": "__ShowMessageRequestClientCapabilities_messageActionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5853,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SignatureHelpClientCapabilities_signatureInformation_Type_1",
      "class_info": {
        "name": "__SignatureHelpClientCapabilities_signatureInformation_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5860,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__SignatureHelpClientCapabilities_signatureInformation_parameterInformation_Type_1",
      "class_info": {
        "name": "__SignatureHelpClientCapabilities_signatureInformation_parameterInformation_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5873,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__TextDocumentContentChangeEvent_Type_1",
      "class_info": {
        "name": "__TextDocumentContentChangeEvent_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5881,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__TextDocumentContentChangeEvent_Type_2",
      "class_info": {
        "name": "__TextDocumentContentChangeEvent_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5892,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__TextDocumentFilter_Type_1",
      "class_info": {
        "name": "__TextDocumentFilter_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5897,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__TextDocumentFilter_Type_2",
      "class_info": {
        "name": "__TextDocumentFilter_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5906,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__TextDocumentFilter_Type_3",
      "class_info": {
        "name": "__TextDocumentFilter_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5915,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__WorkspaceEditClientCapabilities_changeAnnotationSupport_Type_1",
      "class_info": {
        "name": "__WorkspaceEditClientCapabilities_changeAnnotationSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5924,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__WorkspaceSymbolClientCapabilities_resolveSupport_Type_1",
      "class_info": {
        "name": "__WorkspaceSymbolClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5931,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__WorkspaceSymbolClientCapabilities_symbolKind_Type_1",
      "class_info": {
        "name": "__WorkspaceSymbolClientCapabilities_symbolKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5937,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__WorkspaceSymbolClientCapabilities_tagSupport_Type_1",
      "class_info": {
        "name": "__WorkspaceSymbolClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5949,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.__WorkspaceSymbol_location_Type_1",
      "class_info": {
        "name": "__WorkspaceSymbol_location_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5954,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.lsp_types.___InitializeParams_clientInfo_Type_1",
      "class_info": {
        "name": "___InitializeParams_clientInfo_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5958,
        "is_abstract": false,
        "is_dataclass": false
      },
      "importance_score": 5
    }
  ],
  "important_functions": [
    {
      "full_name": "serena.cli.get_help",
      "function_info": {
        "name": "get_help",
        "module": "serena.cli",
        "signature": "def get_help() -> str:",
        "docstring": "Retrieve the help text for the top-level Serena CLI.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "str",
        "line_number": 607
      },
      "importance_score": 10
    },
    {
      "full_name": "serena.util.file_system.find_all_non_ignored_files",
      "function_info": {
        "name": "find_all_non_ignored_files",
        "module": "serena.util.file_system",
        "signature": "def find_all_non_ignored_files(repo_root: str) -> list[str]:",
        "docstring": "Find all non-ignored files in the repository, respecting all gitignore files in the repository.\n\n:param repo_root: The root directory of the repository\n:return: A list of all non-ignored files in the repository",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "repo_root",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "list[str]",
        "line_number": 72
      },
      "importance_score": 10
    },
    {
      "full_name": "solidlsp.language_servers.csharp_language_server.find_solution_or_project_file",
      "function_info": {
        "name": "find_solution_or_project_file",
        "module": "solidlsp.language_servers.csharp_language_server",
        "signature": "def find_solution_or_project_file(root_dir) -> str | None:",
        "docstring": "Find the first .sln file in breadth-first order.\nIf no .sln file is found, look for a .csproj file.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "str | None",
        "line_number": 151
      },
      "importance_score": 10
    },
    {
      "full_name": "serena.util.git.get_git_status",
      "function_info": {
        "name": "get_git_status",
        "module": "serena.util.git",
        "signature": "def get_git_status() -> GitStatus | None:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "GitStatus | None",
        "line_number": 10
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.config.serena_config.get_serena_managed_in_project_dir",
      "function_info": {
        "name": "get_serena_managed_in_project_dir",
        "module": "serena.config.serena_config",
        "signature": "def get_serena_managed_in_project_dir(project_root: str | Path) -> str:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "project_root",
            "annotation": "str | Path",
            "default": null
          }
        ],
        "return_annotation": "str",
        "line_number": 144
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.server.make_request",
      "function_info": {
        "name": "make_request",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def make_request(method: str, request_id: Any, params: PayloadLike) -> StringDict:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "method",
            "annotation": "str",
            "default": null
          },
          {
            "name": "request_id",
            "annotation": "Any",
            "default": null
          },
          {
            "name": "params",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": "StringDict",
        "line_number": 90
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.lsp_protocol_handler.server.create_message",
      "function_info": {
        "name": "create_message",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def create_message(payload: PayloadLike):",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "payload",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": null,
        "line_number": 98
      },
      "importance_score": 8
    },
    {
      "full_name": "solidlsp.language_servers.omnisharp.find_least_depth_sln_file",
      "function_info": {
        "name": "find_least_depth_sln_file",
        "module": "solidlsp.language_servers.omnisharp",
        "signature": "def find_least_depth_sln_file(root_dir) -> str | None:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "str | None",
        "line_number": 50
      },
      "importance_score": 8
    },
    {
      "full_name": "serena.util.general._create_YAML",
      "function_info": {
        "name": "_create_YAML",
        "module": "serena.util.general",
        "signature": "def _create_YAML(preserve_comments: bool=False) -> YAML:",
        "docstring": "Creates a YAML that can load/save with comments if preserve_comments is True.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "preserve_comments",
            "annotation": "bool",
            "default": null
          }
        ],
        "return_annotation": "YAML",
        "line_number": 8
      },
      "importance_score": 7
    },
    {
      "full_name": "interprompt.prompt_factory.autogenerate_prompt_factory_module",
      "function_info": {
        "name": "autogenerate_prompt_factory_module",
        "module": "interprompt.prompt_factory",
        "signature": "def autogenerate_prompt_factory_module(prompts_dir: str, target_module_path: str) -> None:",
        "docstring": "Auto-generates a prompt factory module for the given prompt directory.\nThe generated `PromptFactory` class is meant to be the central entry class for retrieving and rendering prompt templates and prompt\nlists in your application.\nIt will contain one method per prompt template and prompt list, and is useful for both single- and multi-language use cases.\n\n:param prompts_dir: the directory containing the prompt templates and prompt lists\n:param target_module_path: the path to the target module file (.py). Important: The module will be overwritten!",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "prompts_dir",
            "annotation": "str",
            "default": null
          },
          {
            "name": "target_module_path",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "None",
        "line_number": 34
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.text_utils.search_text",
      "function_info": {
        "name": "search_text",
        "module": "serena.text_utils",
        "signature": "def search_text(pattern: str, content: str | None=None, source_file_path: str | None=None, allow_multiline_match: bool=False, context_lines_before: int=0, context_lines_after: int=0, is_glob: bool=False) -> list[MatchedConsecutiveLines]:",
        "docstring": "Search for a pattern in text content. Supports both regex and glob-like patterns.\n\n:param pattern: Pattern to search for (regex or glob-like pattern)\n:param content: The text content to search. May be None if source_file_path is provided.\n:param source_file_path: Optional path to the source file. If content is None,\n    this has to be passed and the file will be read.\n:param allow_multiline_match: Whether to search across multiple lines. Currently, the default\n    option (False) is very inefficient, so it is recommended to set this to True.\n:param context_lines_before: Number of context lines to include before matches\n:param context_lines_after: Number of context lines to include after matches\n:param is_glob: If True, pattern is treated as a glob-like pattern (e.g., \"*.py\", \"test_??.py\")\n         and will be converted to regex internally\n\n:return: List of `TextSearchMatch` objects\n\n:raises: ValueError if the pattern is not valid",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "pattern",
            "annotation": "str",
            "default": null
          },
          {
            "name": "content",
            "annotation": "str | None",
            "default": null
          },
          {
            "name": "source_file_path",
            "annotation": "str | None",
            "default": null
          },
          {
            "name": "allow_multiline_match",
            "annotation": "bool",
            "default": null
          },
          {
            "name": "context_lines_before",
            "annotation": "int",
            "default": null
          },
          {
            "name": "context_lines_after",
            "annotation": "int",
            "default": null
          },
          {
            "name": "is_glob",
            "annotation": "bool",
            "default": null
          }
        ],
        "return_annotation": "list[MatchedConsecutiveLines]",
        "line_number": 136
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.text_utils.default_file_reader",
      "function_info": {
        "name": "default_file_reader",
        "module": "serena.text_utils",
        "signature": "def default_file_reader(file_path: str) -> str:",
        "docstring": "Reads using utf-8 encoding.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "file_path",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "str",
        "line_number": 238
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.text_utils.glob_match",
      "function_info": {
        "name": "glob_match",
        "module": "serena.text_utils",
        "signature": "def glob_match(pattern: str, path: str) -> bool:",
        "docstring": "Match a file path against a glob pattern.\n\nSupports standard glob patterns:\n- * matches any number of characters except /\n- ** matches any number of directories (zero or more)\n- ? matches a single character except /\n- [seq] matches any character in seq\n\n:param pattern: Glob pattern (e.g., 'src/**/*.py', '**agent.py')\n:param path: File path to match against\n:return: True if path matches pattern",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "pattern",
            "annotation": "str",
            "default": null
          },
          {
            "name": "path",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "bool",
        "line_number": 244
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.text_utils.search_files",
      "function_info": {
        "name": "search_files",
        "module": "serena.text_utils",
        "signature": "def search_files(relative_file_paths: list[str], pattern: str, root_path: str='', file_reader: Callable[[str], str]=default_file_reader, context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None) -> list[MatchedConsecutiveLines]:",
        "docstring": "Search for a pattern in a list of files.\n\n:param relative_file_paths: List of relative file paths in which to search\n:param pattern: Pattern to search for\n:param root_path: Root path to resolve relative paths against (by default, current working directory).\n:param file_reader: Function to read a file, by default will just use os.open.\n    All files that can't be read by it will be skipped.\n:param context_lines_before: Number of context lines to include before matches\n:param context_lines_after: Number of context lines to include after matches\n:param paths_include_glob: Optional glob pattern to include files from the list\n:param paths_exclude_glob: Optional glob pattern to exclude files from the list\n:return: List of MatchedConsecutiveLines objects",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "relative_file_paths",
            "annotation": "list[str]",
            "default": null
          },
          {
            "name": "pattern",
            "annotation": "str",
            "default": null
          },
          {
            "name": "root_path",
            "annotation": "str",
            "default": null
          },
          {
            "name": "file_reader",
            "annotation": "Callable[[str], str]",
            "default": null
          },
          {
            "name": "context_lines_before",
            "annotation": "int",
            "default": null
          },
          {
            "name": "context_lines_after",
            "annotation": "int",
            "default": null
          },
          {
            "name": "paths_include_glob",
            "annotation": "str | None",
            "default": null
          },
          {
            "name": "paths_exclude_glob",
            "annotation": "str | None",
            "default": null
          }
        ],
        "return_annotation": "list[MatchedConsecutiveLines]",
        "line_number": 290
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.gui_log_viewer.show_fatal_exception",
      "function_info": {
        "name": "show_fatal_exception",
        "module": "serena.gui_log_viewer",
        "signature": "def show_fatal_exception(e: Exception):",
        "docstring": "Makes sure the given exception is shown in the GUI log viewer,\neither an existing instance or a new one.\n\n:param e: the exception to display",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "e",
            "annotation": "Exception",
            "default": null
          }
        ],
        "return_annotation": null,
        "line_number": 394
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.serena_version",
      "function_info": {
        "name": "serena_version",
        "module": "serena",
        "signature": "def serena_version() -> str:",
        "docstring": ":return: the version of the package, including git status if available.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "str",
        "line_number": 8
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.exception.is_headless_environment",
      "function_info": {
        "name": "is_headless_environment",
        "module": "serena.util.exception",
        "signature": "def is_headless_environment() -> bool:",
        "docstring": "Detect if we're running in a headless environment where GUI operations would fail.\n\nReturns True if:\n- No DISPLAY variable on Linux/Unix\n- Running in SSH session\n- Running in WSL without X server\n- Running in Docker container",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "bool",
        "line_number": 7
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.exception.show_fatal_exception_safe",
      "function_info": {
        "name": "show_fatal_exception_safe",
        "module": "serena.util.exception",
        "signature": "def show_fatal_exception_safe(e: Exception) -> None:",
        "docstring": "Shows the given exception in the GUI log viewer on the main thread and ensures that the exception is logged or at\nleast printed to stderr.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "e",
            "annotation": "Exception",
            "default": null
          }
        ],
        "return_annotation": "None",
        "line_number": 43
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.inspection.iter_subclasses",
      "function_info": {
        "name": "iter_subclasses",
        "module": "serena.util.inspection",
        "signature": "def iter_subclasses(cls: type[T], recursive: bool=True) -> Generator[type[T], None, None]:",
        "docstring": "Iterate over all subclasses of a class. If recursive is True, also iterate over all subclasses of all subclasses.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "cls",
            "annotation": "type[T]",
            "default": null
          },
          {
            "name": "recursive",
            "annotation": "bool",
            "default": null
          }
        ],
        "return_annotation": "Generator[type[T], None, None]",
        "line_number": 14
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.inspection.determine_programming_language_composition",
      "function_info": {
        "name": "determine_programming_language_composition",
        "module": "serena.util.inspection",
        "signature": "def determine_programming_language_composition(repo_path: str) -> dict[str, float]:",
        "docstring": "Determine the programming language composition of a repository.\n\n:param repo_path: Path to the repository to analyze\n\n:return: Dictionary mapping language names to percentages of files matching each language",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "repo_path",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "dict[str, float]",
        "line_number": 22
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.shell.execute_shell_command",
      "function_info": {
        "name": "execute_shell_command",
        "module": "serena.util.shell",
        "signature": "def execute_shell_command(command: str, cwd: str | None=None, capture_stderr: bool=False) -> ShellCommandResult:",
        "docstring": "Execute a shell command and return the output.\n\n:param command: The command to execute.\n:param cwd: The working directory to execute the command in. If None, the current working directory will be used.\n:param capture_stderr: Whether to capture the stderr output.\n:return: The output of the command.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "command",
            "annotation": "str",
            "default": null
          },
          {
            "name": "cwd",
            "annotation": "str | None",
            "default": null
          },
          {
            "name": "capture_stderr",
            "annotation": "bool",
            "default": null
          }
        ],
        "return_annotation": "ShellCommandResult",
        "line_number": 15
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.file_system.scan_directory",
      "function_info": {
        "name": "scan_directory",
        "module": "serena.util.file_system",
        "signature": "def scan_directory(path: str, recursive: bool=False, relative_to: str | None=None, is_ignored_dir: Callable[[str], bool]=lambda x: False, is_ignored_file: Callable[[str], bool]=lambda x: False) -> ScanResult:",
        "docstring": ":param path: the path to scan\n:param recursive: whether to recursively scan subdirectories\n:param relative_to: the path to which the results should be relative to; if None, provide absolute paths\n:param is_ignored_dir: a function with which to determine whether the given directory (abs. path) shall be ignored\n:param is_ignored_file: a function with which to determine whether the given file (abs. path) shall be ignored\n:return: the list of directories and files",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "path",
            "annotation": "str",
            "default": null
          },
          {
            "name": "recursive",
            "annotation": "bool",
            "default": null
          },
          {
            "name": "relative_to",
            "annotation": "str | None",
            "default": null
          },
          {
            "name": "is_ignored_dir",
            "annotation": "Callable[[str], bool]",
            "default": null
          },
          {
            "name": "is_ignored_file",
            "annotation": "Callable[[str], bool]",
            "default": null
          }
        ],
        "return_annotation": "ScanResult",
        "line_number": 22
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.file_system.match_path",
      "function_info": {
        "name": "match_path",
        "module": "serena.util.file_system",
        "signature": "def match_path(relative_path: str, path_spec: PathSpec, root_path: str='') -> bool:",
        "docstring": "Match a relative path against a given pathspec. Just pathspec.match_file() is not enough,\nwe need to do some massaging to fix issues with pathspec matching.\n\n:param relative_path: relative path to match against the pathspec\n:param path_spec: the pathspec to match against\n:param root_path: the root path from which the relative path is derived\n:return:",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "relative_path",
            "annotation": "str",
            "default": null
          },
          {
            "name": "path_spec",
            "annotation": "PathSpec",
            "default": null
          },
          {
            "name": "root_path",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "bool",
        "line_number": 294
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.util.thread.execute_with_timeout",
      "function_info": {
        "name": "execute_with_timeout",
        "module": "serena.util.thread",
        "signature": "def execute_with_timeout(func: Callable[[], T], timeout: float, function_name: str) -> ExecutionResult[T]:",
        "docstring": "Executes the given function with a timeout\n\n:param func: the function to execute\n:param timeout: the timeout in seconds\n:param function_name: the name of the function (for error messages)\n:returns: the execution result",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "func",
            "annotation": "Callable[[], T]",
            "default": null
          },
          {
            "name": "timeout",
            "annotation": "float",
            "default": null
          },
          {
            "name": "function_name",
            "annotation": "str",
            "default": null
          }
        ],
        "return_annotation": "ExecutionResult[T]",
        "line_number": 43
      },
      "importance_score": 5
    },
    {
      "full_name": "serena.config.serena_config.is_running_in_docker",
      "function_info": {
        "name": "is_running_in_docker",
        "module": "serena.config.serena_config",
        "signature": "def is_running_in_docker() -> bool:",
        "docstring": "Check if we're running inside a Docker container.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "bool",
        "line_number": 148
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.language_servers.omnisharp.breadth_first_file_scan",
      "function_info": {
        "name": "breadth_first_file_scan",
        "module": "solidlsp.language_servers.omnisharp",
        "signature": "def breadth_first_file_scan(root) -> Iterable[str]:",
        "docstring": "This function was obtained from https://stackoverflow.com/questions/49654234/is-there-a-breadth-first-search-option-available-in-os-walk-or-equivalent-py\nIt traverses the directory tree in breadth first order.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "Iterable[str]",
        "line_number": 24
      },
      "importance_score": 5
    },
    {
      "full_name": "solidlsp.language_servers.csharp_language_server.breadth_first_file_scan",
      "function_info": {
        "name": "breadth_first_file_scan",
        "module": "solidlsp.language_servers.csharp_language_server",
        "signature": "def breadth_first_file_scan(root_dir):",
        "docstring": "Perform a breadth-first scan of files in the given directory.\nYields file paths in breadth-first order.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": null,
        "line_number": 129
      },
      "importance_score": 5
    }
  ],
  "modules": {
    "interprompt.jinja_template": {
      "name": "interprompt.jinja_template",
      "path": "src/interprompt/jinja_template.py",
      "docstring": null,
      "imports": [
        "from typing",
        "jinja2",
        "jinja2.meta",
        "jinja2.nodes",
        "jinja2.visitor",
        "from interprompt.util.class_decorators"
      ],
      "classes": [
        {
          "name": "ParameterizedTemplateInterface",
          "module": "interprompt.jinja_template",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "get_parameters",
              "module": "interprompt.jinja_template",
              "signature": "def get_parameters(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 12
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 11,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "_JinjaEnvProvider",
          "module": "interprompt.jinja_template",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.jinja_template",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 17
            },
            {
              "name": "get_env",
              "module": "interprompt.jinja_template",
              "signature": "def get_env(self) -> jinja2.Environment:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "jinja2.Environment",
              "line_number": 20
            }
          ],
          "class_variables": [],
          "decorators": [
            "singleton"
          ],
          "line_number": 16,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JinjaTemplate",
          "module": "interprompt.jinja_template",
          "docstring": null,
          "bases": [
            "ParameterizedTemplateInterface"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.jinja_template",
              "signature": "def __init__(self, template_string: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "template_string",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 27
            },
            {
              "name": "render",
              "module": "interprompt.jinja_template",
              "signature": "def render(self, **params: Any) -> str:",
              "docstring": "Renders the template with the given kwargs. You can find out which parameters are required by calling get_parameter_names().",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 33
            },
            {
              "name": "get_parameters",
              "module": "interprompt.jinja_template",
              "signature": "def get_parameters(self) -> list[str]:",
              "docstring": "A sorted list of parameter names that are extracted from the template string. It is impossible to know the types of the parameter\nvalues, they can be primitives, dicts or dict-like objects.\n\n:return: the list of parameter names",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 37
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 26,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'interprompt.util.class_decorators', 'typing', 'jinja2.meta', 'jinja2.nodes', 'jinja2.visitor', 'jinja2'}"
    },
    "interprompt.prompt_factory": {
      "name": "interprompt.prompt_factory",
      "path": "src/interprompt/prompt_factory.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "from typing",
        "from multilang_prompt"
      ],
      "classes": [
        {
          "name": "PromptFactoryBase",
          "module": "interprompt.prompt_factory",
          "docstring": "Base class for auto-generated prompt factory classes.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.prompt_factory",
              "signature": "def __init__(self, prompts_dir: str | list[str], lang_code: str=DEFAULT_LANG_CODE, fallback_mode=LanguageFallbackMode.EXCEPTION):",
              "docstring": ":param prompts_dir: the directory containing the prompt templates and prompt lists.\n    If a list is provided, will look for prompt templates in the dirs from left to right\n    (first one containing the desired template wins).\n:param lang_code: the language code to use for retrieving the prompt templates and prompt lists.\n    Leave as `default` for single-language use cases.\n:param fallback_mode: the fallback mode to use when a prompt template or prompt list is not found for the requested language.\n    Irrelevant for single-language use cases.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompts_dir",
                  "annotation": "str | list[str]",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "fallback_mode",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 13
            },
            {
              "name": "_render_prompt",
              "module": "interprompt.prompt_factory",
              "signature": "def _render_prompt(self, prompt_name: str, params: dict[str, Any]) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "dict[str, Any]",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 26
            },
            {
              "name": "_get_prompt_list",
              "module": "interprompt.prompt_factory",
              "signature": "def _get_prompt_list(self, prompt_name: str) -> PromptList:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "PromptList",
              "line_number": 30
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 10,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "autogenerate_prompt_factory_module",
          "module": "interprompt.prompt_factory",
          "signature": "def autogenerate_prompt_factory_module(prompts_dir: str, target_module_path: str) -> None:",
          "docstring": "Auto-generates a prompt factory module for the given prompt directory.\nThe generated `PromptFactory` class is meant to be the central entry class for retrieving and rendering prompt templates and prompt\nlists in your application.\nIt will contain one method per prompt template and prompt list, and is useful for both single- and multi-language use cases.\n\n:param prompts_dir: the directory containing the prompt templates and prompt lists\n:param target_module_path: the path to the target module file (.py). Important: The module will be overwritten!",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "prompts_dir",
              "annotation": "str",
              "default": null
            },
            {
              "name": "target_module_path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "None",
          "line_number": 34
        }
      ],
      "constants": [],
      "dependencies": "{'os', 'logging', 'typing', 'multilang_prompt'}"
    },
    "interprompt.multilang_prompt": {
      "name": "interprompt.multilang_prompt",
      "path": "src/interprompt/multilang_prompt.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "from enum",
        "from typing",
        "yaml",
        "from sensai.util.string",
        "from jinja_template"
      ],
      "classes": [
        {
          "name": "PromptTemplate",
          "module": "interprompt.multilang_prompt",
          "docstring": null,
          "bases": [
            "ToStringMixin",
            "ParameterizedTemplateInterface"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __init__(self, name: str, jinja_template_string: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "jinja_template_string",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 15
            },
            {
              "name": "_tostring_exclude_private",
              "module": "interprompt.multilang_prompt",
              "signature": "def _tostring_exclude_private(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 19
            },
            {
              "name": "render",
              "module": "interprompt.multilang_prompt",
              "signature": "def render(self, **params: Any) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 22
            },
            {
              "name": "get_parameters",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_parameters(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 25
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 14,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PromptList",
          "module": "interprompt.multilang_prompt",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __init__(self, items: list[str]) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "items",
                  "annotation": "list[str]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 30
            },
            {
              "name": "to_string",
              "module": "interprompt.multilang_prompt",
              "signature": "def to_string(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 33
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 29,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LanguageFallbackMode",
          "module": "interprompt.multilang_prompt",
          "docstring": "Defines what to do if there is no item for the given language.",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 44,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "_MultiLangContainer",
          "module": "interprompt.multilang_prompt",
          "docstring": "A container of items (usually, all having the same semantic meaning) which are associated with different languages.\nCan also be used for single-language purposes by always using the default language code.",
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __init__(self, name: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 69
            },
            {
              "name": "_tostring_excludes",
              "module": "interprompt.multilang_prompt",
              "signature": "def _tostring_excludes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 74
            },
            {
              "name": "_tostring_additional_entries",
              "module": "interprompt.multilang_prompt",
              "signature": "def _tostring_additional_entries(self) -> dict[str, Any]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 77
            },
            {
              "name": "get_language_codes",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_language_codes(self) -> list[str]:",
              "docstring": "The language codes for which items are registered in the container.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 80
            },
            {
              "name": "add_item",
              "module": "interprompt.multilang_prompt",
              "signature": "def add_item(self, item: T, lang_code: str=DEFAULT_LANG_CODE, allow_overwrite: bool=False) -> None:",
              "docstring": "Adds an item to the container, representing the same semantic entity as the other items in the container but in a different language.\n\n:param item: the item to add\n:param lang_code: the language shortcode for which to add the item. Use the default for single-language use cases.\n:param allow_overwrite: if True, allow overwriting an existing entry for the same language",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "item",
                  "annotation": "T",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "allow_overwrite",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 84
            },
            {
              "name": "has_item",
              "module": "interprompt.multilang_prompt",
              "signature": "def has_item(self, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 95
            },
            {
              "name": "get_item",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_item(self, lang: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> T:",
              "docstring": "Gets the item for the given language.\n\n:param lang: the language shortcode for which to obtain the prompt template. A default language can be specified.\n:param fallback_mode: defines what to do if there is no item for the given language\n:return: the item",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "fallback_mode",
                  "annotation": "LanguageFallbackMode",
                  "default": null
                }
              ],
              "return_annotation": "T",
              "line_number": 98
            },
            {
              "name": "__len__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __len__(self) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 124
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 63,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MultiLangPromptTemplate",
          "module": "interprompt.multilang_prompt",
          "docstring": "Represents a prompt template with support for multiple languages.\nThe parameters of all prompt templates (for all languages) are (must be) the same.",
          "bases": [
            "ParameterizedTemplateInterface"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __init__(self, name: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 134
            },
            {
              "name": "__len__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __len__(self) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 137
            },
            {
              "name": "name",
              "module": "interprompt.multilang_prompt",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 141
            },
            {
              "name": "add_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def add_prompt_template(self, prompt_template: PromptTemplate, lang_code: str=DEFAULT_LANG_CODE, allow_overwrite: bool=False) -> None:",
              "docstring": "Adds a prompt template for a new language.\nThe parameters of all prompt templates (for all languages) are (must be) the same, so if a prompt template is already registered,\nthe parameters of the new prompt template should be the same as the existing ones.\n\n:param prompt_template: the prompt template to add\n:param lang_code: the language code for which to add the prompt template. For single-language use cases, you should always use the default language code.\n:param allow_overwrite: whether to allow overwriting an existing entry for the same language",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_template",
                  "annotation": "PromptTemplate",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "allow_overwrite",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 144
            },
            {
              "name": "get_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_template(self, lang_code: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> PromptTemplate:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "fallback_mode",
                  "annotation": "LanguageFallbackMode",
                  "default": null
                }
              ],
              "return_annotation": "PromptTemplate",
              "line_number": 167
            },
            {
              "name": "get_parameters",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_parameters(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 172
            },
            {
              "name": "render",
              "module": "interprompt.multilang_prompt",
              "signature": "def render(self, params: dict[str, Any], lang_code: str=DEFAULT_LANG_CODE, fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "dict[str, Any]",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "fallback_mode",
                  "annotation": "LanguageFallbackMode",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 180
            },
            {
              "name": "has_item",
              "module": "interprompt.multilang_prompt",
              "signature": "def has_item(self, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 189
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 128,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MultiLangPromptList",
          "module": "interprompt.multilang_prompt",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 193,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MultiLangPromptCollection",
          "module": "interprompt.multilang_prompt",
          "docstring": "Main class for managing a collection of prompt templates and prompt lists, with support for multiple languages.\nAll data will be read from the yamls directly contained in the given directory on initialization.\nIt is thus assumed that you manage one directory per prompt collection.\n\nThe yamls are assumed to be either of the form\n\n```yaml\nlang: <language_code> # optional, defaults to \"default\"\nprompts:\n  <prompt_name>:\n    <prompt_template_string>\n  <prompt_list_name>: [<prompt_string_1>, <prompt_string_2>, ...]\n\n```\n\nWhen specifying prompt templates for multiple languages, make sure that the Jinja template parameters\n(inferred from the things inside the `{{ }}` in the template strings) are the same for all languages\n(you will get an exception otherwise).\n\nThe prompt names must be unique (for the same language) within the collection.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __init__(self, prompts_dir: str | list[str], fallback_mode: LanguageFallbackMode=LanguageFallbackMode.EXCEPTION) -> None:",
              "docstring": ":param prompts_dir: the directory containing the prompt templates and prompt lists.\n    If a list is provided, will look for prompt templates in the dirs from left to right\n    (first one containing the desired template wins).\n:param fallback_mode: the fallback mode to use when a prompt template or prompt list is not found for the requested language.\n    May be reset after initialization.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompts_dir",
                  "annotation": "str | list[str]",
                  "default": null
                },
                {
                  "name": "fallback_mode",
                  "annotation": "LanguageFallbackMode",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 221
            },
            {
              "name": "_add_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def _add_prompt_template(self, name: str, template_str: str, lang_code: str=DEFAULT_LANG_CODE, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
              "docstring": ":param name: name of the prompt template\n:param template_str: the Jinja template string\n:param lang_code: the language code for which to add the prompt template.\n:param on_name_collision: how to deal with name/lang_code collisions",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "template_str",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "on_name_collision",
                  "annotation": "Literal['skip', 'overwrite', 'raise']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 248
            },
            {
              "name": "_add_prompt_list",
              "module": "interprompt.multilang_prompt",
              "signature": "def _add_prompt_list(self, name: str, prompt_list: list[str], lang_code: str=DEFAULT_LANG_CODE, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
              "docstring": ":param name: name of the prompt list\n:param prompt_list: a list of prompts\n:param lang_code: the language code for which to add the prompt list.\n:param on_name_collision: how to deal with name/lang_code collisions",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "prompt_list",
                  "annotation": "list[str]",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "on_name_collision",
                  "annotation": "Literal['skip', 'overwrite', 'raise']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 277
            },
            {
              "name": "_load_from_disc",
              "module": "interprompt.multilang_prompt",
              "signature": "def _load_from_disc(self, prompts_dir: str, on_name_collision: Literal['skip', 'overwrite', 'raise']='raise') -> None:",
              "docstring": "Loads all prompt templates and prompt lists from yaml files in the given directory.\n\n:param prompts_dir:\n:param on_name_collision: how to deal with name/lang_code collisions",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompts_dir",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "on_name_collision",
                  "annotation": "Literal['skip', 'overwrite', 'raise']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 305
            },
            {
              "name": "get_prompt_template_names",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_template_names(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 337
            },
            {
              "name": "get_prompt_list_names",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_list_names(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 340
            },
            {
              "name": "__len__",
              "module": "interprompt.multilang_prompt",
              "signature": "def __len__(self) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 343
            },
            {
              "name": "get_multilang_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_multilang_prompt_template(self, prompt_name: str) -> MultiLangPromptTemplate:",
              "docstring": "The MultiLangPromptTemplate object for the given prompt name. For single-language use cases, you should use the `get_prompt_template` method instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "MultiLangPromptTemplate",
              "line_number": 346
            },
            {
              "name": "get_multilang_prompt_list",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_multilang_prompt_list(self, prompt_name: str) -> MultiLangPromptList:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "MultiLangPromptList",
              "line_number": 350
            },
            {
              "name": "get_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_template(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> PromptTemplate:",
              "docstring": "The PromptTemplate object for the given prompt name and language code.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "PromptTemplate",
              "line_number": 353
            },
            {
              "name": "get_prompt_template_parameters",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_template_parameters(self, prompt_name: str) -> list[str]:",
              "docstring": "The parameters of the PromptTemplate object for the given prompt name.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 361
            },
            {
              "name": "get_prompt_list",
              "module": "interprompt.multilang_prompt",
              "signature": "def get_prompt_list(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> PromptList:",
              "docstring": "The PromptList object for the given prompt name and language code.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "PromptList",
              "line_number": 365
            },
            {
              "name": "_has_prompt_list",
              "module": "interprompt.multilang_prompt",
              "signature": "def _has_prompt_list(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 369
            },
            {
              "name": "_has_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def _has_prompt_template(self, prompt_name: str, lang_code: str=DEFAULT_LANG_CODE) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 375
            },
            {
              "name": "render_prompt_template",
              "module": "interprompt.multilang_prompt",
              "signature": "def render_prompt_template(self, prompt_name: str, params: dict[str, Any], lang_code: str=DEFAULT_LANG_CODE) -> str:",
              "docstring": "Renders the prompt template for the given prompt name and language code.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "dict[str, Any]",
                  "default": null
                },
                {
                  "name": "lang_code",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 381
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 197,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "T",
        "DEFAULT_LANG_CODE",
        "ANY",
        "EXCEPTION",
        "USE_DEFAULT_LANG"
      ],
      "dependencies": "{'typing', 'os', 'yaml', 'logging', 'jinja_template', 'enum', 'sensai.util.string'}"
    },
    "interprompt": {
      "name": "interprompt",
      "path": "src/interprompt/__init__.py",
      "docstring": null,
      "imports": [
        "from prompt_factory"
      ],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "{'prompt_factory'}"
    },
    "solidlsp.ls_exceptions": {
      "name": "solidlsp.ls_exceptions",
      "path": "src/solidlsp/ls_exceptions.py",
      "docstring": "This module contains the exceptions raised by the framework.",
      "imports": [
        "from ls_handler"
      ],
      "classes": [
        {
          "name": "SolidLSPException",
          "module": "solidlsp.ls_exceptions",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_exceptions",
              "signature": "def __init__(self, message: str, cause: Exception | None=None):",
              "docstring": "Initializes the exception with the given message.\n\n:param message: the message describing the exception\n:param cause: the original exception that caused this exception, if any.\n    For exceptions raised during request handling, this is typically\n        * an LSPError for errors returned by the LSP server\n        * LanguageServerTerminatedException for errors due to the language server having terminated.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "cause",
                  "annotation": "Exception | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 7
            },
            {
              "name": "is_language_server_terminated",
              "module": "solidlsp.ls_exceptions",
              "signature": "def is_language_server_terminated(self):",
              "docstring": ":return: True if the exception is caused by the language server having terminated as indicated\n    by the causing exception being an instance of LanguageServerTerminatedException.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 20
            },
            {
              "name": "__str__",
              "module": "solidlsp.ls_exceptions",
              "signature": "def __str__(self) -> str:",
              "docstring": "Returns a string representation of the exception.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 29
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 6,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'ls_handler'}"
    },
    "solidlsp.ls_utils": {
      "name": "solidlsp.ls_utils",
      "path": "src/solidlsp/ls_utils.py",
      "docstring": "This file contains various utility functions like I/O operations, handling paths, etc.",
      "imports": [
        "gzip",
        "logging",
        "os",
        "platform",
        "shutil",
        "subprocess",
        "uuid",
        "from enum",
        "from pathlib",
        "requests",
        "from solidlsp.ls_exceptions",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_types",
        "ctypes",
        "from ctypes",
        "from urllib.parse",
        "from urllib.request",
        "from urllib",
        "from urlparse"
      ],
      "classes": [
        {
          "name": "InvalidTextLocationError",
          "module": "solidlsp.ls_utils",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 22,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextUtils",
          "module": "solidlsp.ls_utils",
          "docstring": "Utilities for text operations.",
          "bases": [],
          "methods": [
            {
              "name": "get_line_col_from_index",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Returns the zero-indexed line and column number of the given index in the given text",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "index",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "tuple[int, int]",
              "line_number": 32
            },
            {
              "name": "get_index_from_line_col",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Returns the index of the given zero-indexed line and column number in the given text",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "col",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 50
            },
            {
              "name": "_get_updated_position_from_line_and_column_and_edit",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Utility function to get the position of the cursor after inserting text at a given line and column.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "l",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "c",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "text_to_be_inserted",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "tuple[int, int]",
              "line_number": 65
            },
            {
              "name": "delete_text_between_positions",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Deletes the text between the given start and end positions.\nReturns the modified text and the deleted text.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "start_col",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_col",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "tuple[str, str]",
              "line_number": 78
            },
            {
              "name": "insert_text_at_position",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Inserts the given text at the given line and column.\nReturns the modified text and the new line and column.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "col",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "text_to_be_inserted",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "tuple[str, int, int]",
              "line_number": 91
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 26,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PathUtils",
          "module": "solidlsp.ls_utils",
          "docstring": "Utilities for platform-agnostic path operations.",
          "bases": [],
          "methods": [
            {
              "name": "uri_to_path",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Converts a URI to a file path. Works on both Linux and Windows.\n\nThis method was obtained from https://stackoverflow.com/a/61922504",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "uri",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 118
            },
            {
              "name": "path_to_uri",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Converts a file path to a file URI (file:///...).",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 138
            },
            {
              "name": "is_glob_pattern",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Check if a pattern contains glob-specific characters.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "pattern",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 145
            },
            {
              "name": "get_relative_path",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Gets relative path if it's possible (paths should be on the same drive),\nreturns `None` otherwise.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "base_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str | None",
              "line_number": 150
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 112,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileUtils",
          "module": "solidlsp.ls_utils",
          "docstring": "Utility functions for file operations.",
          "bases": [],
          "methods": [
            {
              "name": "read_file",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Reads the file at the given path and returns the contents as a string.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 167
            },
            {
              "name": "download_file",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Downloads the file from the given URL to the given {target_path}",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "target_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 182
            },
            {
              "name": "download_and_extract_archive",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Downloads the archive from the given URL having format {archive_type} and extracts it to the given {target_path}",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "url",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "target_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "archive_type",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 199
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 161,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PlatformId",
          "module": "solidlsp.ls_utils",
          "docstring": "multilspy supported platforms",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [
            {
              "name": "is_windows",
              "module": "solidlsp.ls_utils",
              "signature": "def is_windows(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 251
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 234,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DotnetVersion",
          "module": "solidlsp.ls_utils",
          "docstring": "multilspy supported dotnet versions",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 255,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PlatformUtils",
          "module": "solidlsp.ls_utils",
          "docstring": "This class provides utilities for platform detection and identification.",
          "bases": [],
          "methods": [
            {
              "name": "get_platform_id",
              "module": "solidlsp.ls_utils",
              "signature": "@classmethod",
              "docstring": "Returns the platform id for the current system",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PlatformId",
              "line_number": 274
            },
            {
              "name": "_determine_windows_machine_type",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": null,
              "line_number": 296
            },
            {
              "name": "get_dotnet_version",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": "Returns the dotnet version for the current system",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": "DotnetVersion",
              "line_number": 336
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 268,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolUtils",
          "module": "solidlsp.ls_utils",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "symbol_tree_contains_name",
              "module": "solidlsp.ls_utils",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "roots",
                  "annotation": "list[UnifiedSymbolInformation]",
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 378
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 376,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SYSTEM_INFO",
          "module": "solidlsp.ls_utils",
          "docstring": null,
          "bases": [
            "ctypes.Structure"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 300,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "_U",
          "module": "solidlsp.ls_utils",
          "docstring": null,
          "bases": [
            "ctypes.Union"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 301,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "_S",
          "module": "solidlsp.ls_utils",
          "docstring": null,
          "bases": [
            "ctypes.Structure"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 302,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "OSX",
        "V4",
        "V6",
        "V7",
        "V8",
        "V9",
        "VMONO"
      ],
      "dependencies": "{'uuid', 'urllib', 'ctypes', 'shutil', 'gzip', 'os', 'solidlsp.ls_exceptions', 'urllib.request', 'solidlsp.ls_logger', 'solidlsp.ls_types', 'logging', 'subprocess', 'urllib.parse', 'enum', 'urlparse', 'platform', 'pathlib', 'requests'}"
    },
    "solidlsp.ls": {
      "name": "solidlsp.ls",
      "path": "src/solidlsp/ls.py",
      "docstring": null,
      "imports": [
        "dataclasses",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "pickle",
        "shutil",
        "subprocess",
        "threading",
        "from abc",
        "from collections",
        "from collections.abc",
        "from contextlib",
        "from copy",
        "from pathlib",
        "from typing",
        "pathspec",
        "from serena.text_utils",
        "from serena.util.file_system",
        "from solidlsp",
        "from solidlsp.ls_config",
        "from solidlsp.ls_exceptions",
        "from solidlsp.ls_handler",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler",
        "from solidlsp.lsp_protocol_handler",
        "from solidlsp.lsp_protocol_handler.lsp_constants",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from solidlsp.language_servers.pyright_server",
        "from solidlsp.language_servers.jedi_server",
        "from solidlsp.language_servers.eclipse_jdtls",
        "from solidlsp.language_servers.kotlin_language_server",
        "from solidlsp.language_servers.rust_analyzer",
        "from solidlsp.language_servers.csharp_language_server",
        "from solidlsp.language_servers.omnisharp",
        "from solidlsp.language_servers.typescript_language_server",
        "from solidlsp.language_servers.vts_language_server",
        "from solidlsp.language_servers.gopls",
        "from solidlsp.language_servers.solargraph",
        "from solidlsp.language_servers.dart_language_server",
        "from solidlsp.language_servers.clangd_language_server",
        "from solidlsp.language_servers.intelephense",
        "from solidlsp.language_servers.clojure_lsp",
        "from solidlsp.language_servers.elixir_tools.elixir_tools",
        "from solidlsp.language_servers.terraform_ls",
        "from solidlsp.language_servers.bash_language_server"
      ],
      "classes": [
        {
          "name": "ReferenceInSymbol",
          "module": "solidlsp.ls",
          "docstring": "A symbol retrieved when requesting reference to a symbol, together with the location of the reference",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclasses.dataclass"
          ],
          "line_number": 44,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LSPFileBuffer",
          "module": "solidlsp.ls",
          "docstring": "This class is used to store the contents of an open LSP file in memory.",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "module": "solidlsp.ls",
              "signature": "def __post_init__(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 75
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclasses.dataclass"
          ],
          "line_number": 53,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SolidLanguageServer",
          "module": "solidlsp.ls",
          "docstring": "The LanguageServer class provides a language agnostic interface to the Language Server Protocol.\nIt is used to communicate with Language Servers of different programming languages.",
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.ls",
              "signature": "def is_ignored_dirname(self, dirname: str) -> bool:",
              "docstring": "A language-specific condition for directories that should always be ignored. For example, venv\nin Python and node_modules in JS/TS should be ignored always.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 86
            },
            {
              "name": "ls_resources_dir",
              "module": "solidlsp.ls",
              "signature": "@classmethod",
              "docstring": "Returns the directory where the language server resources are downloaded.\nThis is used to store language server binaries, configuration files, etc.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                },
                {
                  "name": "mkdir",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 94
            },
            {
              "name": "create",
              "module": "solidlsp.ls",
              "signature": "@classmethod",
              "docstring": "Creates a language specific LanguageServer instance based on the given configuration, and appropriate settings for the programming language.\n\nIf language is Java, then ensure that jdk-17.0.6 or higher is installed, `java` is in PATH, and JAVA_HOME is set to the installation directory.\nIf language is JS/TS, then ensure that node (v18.16.0 or higher) is installed and in PATH.\n\n:param repository_root_path: The root path of the repository.\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param timeout: the timeout for requests to the language server. If None, no timeout will be used.\n:return LanguageServer: A language specific LanguageServer instance.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float | None",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings | None",
                  "default": null
                }
              ],
              "return_annotation": "'SolidLanguageServer'",
              "line_number": 115
            },
            {
              "name": "__init__",
              "module": "solidlsp.ls",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, process_launch_info: ProcessLaunchInfo, language_id: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Initializes a LanguageServer instance.\n\nDo not instantiate this class directly. Use `LanguageServer.create` method instead.\n\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param repository_root_path: The root path of the repository.\n:param process_launch_info: Each language server has a specific command used to start the server.\n            This parameter is the command to launch the language server process.\n            The command must pass appropriate flags to the binary, so that it runs in the stdio mode,\n            as opposed to HTTP, TCP modes supported by some language servers.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "process_launch_info",
                  "annotation": "ProcessLaunchInfo",
                  "default": null
                },
                {
                  "name": "language_id",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 241
            },
            {
              "name": "set_request_timeout",
              "module": "solidlsp.ls",
              "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
              "docstring": ":param timeout: the timeout, in seconds, for requests to the language server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 320
            },
            {
              "name": "get_ignore_spec",
              "module": "solidlsp.ls",
              "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
              "docstring": "Returns the pathspec matcher for the paths that were configured to be ignored through\nthe multilspy config.\n\nThis is is a subset of the full language-specific ignore spec that determines\nwhich files are relevant for the language server.\n\nThis matcher is useful for operations outside of the language server,\nsuch as when searching for relevant non-language files in the project.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "pathspec.PathSpec",
              "line_number": 326
            },
            {
              "name": "is_ignored_path",
              "module": "solidlsp.ls",
              "signature": "def is_ignored_path(self, relative_path: str, ignore_unsupported_files: bool=True) -> bool:",
              "docstring": "Determine if a path should be ignored based on file type\nand ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_unsupported_files: whether files that are not supported source files should be ignored\n\n:return: True if the path should be ignored, False otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "ignore_unsupported_files",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 338
            },
            {
              "name": "_shutdown",
              "module": "solidlsp.ls",
              "signature": "def _shutdown(self, timeout: float=5.0):",
              "docstring": "A robust shutdown process designed to terminate cleanly on all platforms, including Windows,\nby explicitly closing all I/O pipes.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 374
            },
            {
              "name": "start_server",
              "module": "solidlsp.ls",
              "signature": "@contextmanager",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Iterator['SolidLanguageServer']",
              "line_number": 431
            },
            {
              "name": "_start_server_process",
              "module": "solidlsp.ls",
              "signature": "def _start_server_process(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 436
            },
            {
              "name": "_start_server",
              "module": "solidlsp.ls",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 441
            },
            {
              "name": "open_file",
              "module": "solidlsp.ls",
              "signature": "@contextmanager",
              "docstring": "Open a file in the Language Server. This is required before making any requests to the Language Server.\n\n:param relative_file_path: The relative path of the file to open.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Iterator[LSPFileBuffer]",
              "line_number": 445
            },
            {
              "name": "insert_text_at_position",
              "module": "solidlsp.ls",
              "signature": "def insert_text_at_position(self, relative_file_path: str, line: int, column: int, text_to_be_inserted: str) -> ls_types.Position:",
              "docstring": "Insert text at the given line and column in the given file and return\nthe updated cursor position after inserting the text.\n\n:param relative_file_path: The relative path of the file to open.\n:param line: The line number at which text should be inserted.\n:param column: The column number at which text should be inserted.\n:param text_to_be_inserted: The text to insert.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "text_to_be_inserted",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.Position",
              "line_number": 497
            },
            {
              "name": "delete_text_between_positions",
              "module": "solidlsp.ls",
              "signature": "def delete_text_between_positions(self, relative_file_path: str, start: ls_types.Position, end: ls_types.Position) -> str:",
              "docstring": "Delete text between the given start and end positions in the given file and return the deleted text.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start",
                  "annotation": "ls_types.Position",
                  "default": null
                },
                {
                  "name": "end",
                  "annotation": "ls_types.Position",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 544
            },
            {
              "name": "_send_definition_request",
              "module": "solidlsp.ls",
              "signature": "def _send_definition_request(self, definition_params: DefinitionParams) -> Definition | list[LocationLink] | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "definition_params",
                  "annotation": "DefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": "Definition | list[LocationLink] | None",
              "line_number": 583
            },
            {
              "name": "request_definition",
              "module": "solidlsp.ls",
              "signature": "def request_definition(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
              "docstring": "Raise a [textDocument/definition](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_definition) request to the Language Server\nfor the symbol at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which definition should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.Location]: A list of locations where the symbol is defined",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.Location]",
              "line_number": 586
            },
            {
              "name": "_send_references_request",
              "module": "solidlsp.ls",
              "signature": "def _send_references_request(self, relative_file_path: str, line: int, column: int) -> list[lsp_types.Location] | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "list[lsp_types.Location] | None",
              "line_number": 668
            },
            {
              "name": "request_references",
              "module": "solidlsp.ls",
              "signature": "def request_references(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
              "docstring": "Raise a [textDocument/references](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_references) request to the Language Server\nto find references to the symbol at the given line and column in the given file. Wait for the response and return the result.\nFilters out references located in ignored directories.\n\n:param relative_file_path: The relative path of the file that has the symbol for which references should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return: A list of locations where the symbol is referenced (excluding ignored directories)",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.Location]",
              "line_number": 677
            },
            {
              "name": "request_text_document_diagnostics",
              "module": "solidlsp.ls",
              "signature": "def request_text_document_diagnostics(self, relative_file_path: str) -> list[ls_types.Diagnostic]:",
              "docstring": "Raise a [textDocument/diagnostic](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_diagnostic) request to the Language Server\nto find diagnostics for the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file to retrieve diagnostics for\n\n:return: A list of diagnostics for the file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.Diagnostic]",
              "line_number": 739
            },
            {
              "name": "retrieve_full_file_content",
              "module": "solidlsp.ls",
              "signature": "def retrieve_full_file_content(self, file_path: str) -> str:",
              "docstring": "Retrieve the full content of the given file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 781
            },
            {
              "name": "retrieve_content_around_line",
              "module": "solidlsp.ls",
              "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
              "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_before",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_after",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "MatchedConsecutiveLines",
              "line_number": 790
            },
            {
              "name": "request_completions",
              "module": "solidlsp.ls",
              "signature": "def request_completions(self, relative_file_path: str, line: int, column: int, allow_incomplete: bool=False) -> list[ls_types.CompletionItem]:",
              "docstring": "Raise a [textDocument/completion](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_completion) request to the Language Server\nto find completions at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which completions should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.CompletionItem]: A list of completions",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "allow_incomplete",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.CompletionItem]",
              "line_number": 813
            },
            {
              "name": "request_document_symbols",
              "module": "solidlsp.ls",
              "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
              "docstring": "Raise a [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentSymbol) request to the Language Server\nto find symbols in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbols\n:param include_body: whether to include the body of the symbols in the result.\n:return: A list of symbols in the file, and a list of root symbols that represent the tree structure of the symbols.\n    All symbols will have a location, a children, and a parent attribute,\n    where the parent attribute is None for root symbols.\n    Note that this is slightly different from the call to request_full_symbol_tree,\n    where the parent attribute will be the file symbol which in turn may have a package symbol as parent.\n    If you need a symbol tree that contains file symbols as well, you should use `request_full_symbol_tree` instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
              "line_number": 899
            },
            {
              "name": "request_full_symbol_tree",
              "module": "solidlsp.ls",
              "signature": "def request_full_symbol_tree(self, within_relative_path: str | None=None, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
              "docstring": "Will go through all files in the project or within a relative path and build a tree of symbols.\nNote: this may be slow the first time it is called, especially if `within_relative_path` is not used to restrict the search.\n\nFor each file, a symbol of kind File (2) will be created. For directories, a symbol of kind Package (4) will be created.\nAll symbols will have a children attribute, thereby representing the tree structure of all symbols in the project\nthat are within the repository.\nAll symbols except the root packages will have a parent attribute.\nWill ignore directories starting with '.', language-specific defaults\nand user-configured directories (e.g. from .gitignore).\n\n:param within_relative_path: pass a relative path to only consider symbols within this path.\n    If a file is passed, only the symbols within this file will be considered.\n    If a directory is passed, all files within this directory will be considered.\n:param include_body: whether to include the body of the symbols in the result.\n\n:return: A list of root symbols representing the top-level packages/modules in the project.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "within_relative_path",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
              "line_number": 1026
            },
            {
              "name": "_get_range_from_file_content",
              "module": "solidlsp.ls",
              "signature": "@staticmethod",
              "docstring": "Get the range for the given file.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "file_content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.Range",
              "line_number": 1154
            },
            {
              "name": "request_dir_overview",
              "module": "solidlsp.ls",
              "signature": "def request_dir_overview(self, relative_dir_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
              "docstring": "An overview of the given directory.\n\nMaps relative paths of all contained files to info about top-level symbols in the file\n(name, kind, line, column).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_dir_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
              "line_number": 1163
            },
            {
              "name": "request_document_overview",
              "module": "solidlsp.ls",
              "signature": "def request_document_overview(self, relative_file_path: str) -> list[tuple[str, ls_types.SymbolKind, int, int]]:",
              "docstring": "An overview of the given file.\nReturns the list of tuples (name, kind, line, column) of all top-level symbols in the file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[tuple[str, ls_types.SymbolKind, int, int]]",
              "line_number": 1199
            },
            {
              "name": "request_overview",
              "module": "solidlsp.ls",
              "signature": "def request_overview(self, within_relative_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
              "docstring": "An overview of all symbols in the given file or directory.\n\n:param within_relative_path: the relative path to the file or directory to get the overview of.\n:return: A mapping of all relative paths analyzed to lists of tuples (name, kind, line, column) of all top-level symbols in the corresponding file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "within_relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
              "line_number": 1215
            },
            {
              "name": "request_hover",
              "module": "solidlsp.ls",
              "signature": "def request_hover(self, relative_file_path: str, line: int, column: int) -> ls_types.Hover | None:",
              "docstring": "Raise a [textDocument/hover](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_hover) request to the Language Server\nto find the hover information at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the hover information\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return None",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.Hover | None",
              "line_number": 1232
            },
            {
              "name": "retrieve_symbol_body",
              "module": "solidlsp.ls",
              "signature": "def retrieve_symbol_body(self, symbol: ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation) -> str:",
              "docstring": "Load the body of the given symbol. If the body is already contained in the symbol, just return it.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol",
                  "annotation": "ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 1261
            },
            {
              "name": "request_referencing_symbols",
              "module": "solidlsp.ls",
              "signature": "def request_referencing_symbols(self, relative_file_path: str, line: int, column: int, include_imports: bool=True, include_self: bool=False, include_body: bool=False, include_file_symbols: bool=False) -> list[ReferenceInSymbol]:",
              "docstring": "Finds all symbols that reference the symbol at the given location.\nThis is similar to request_references but filters to only include symbols\n(functions, methods, classes, etc.) that reference the target symbol.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_imports: whether to also include imports as references.\n    Unfortunately, the LSP does not have an import type, so the references corresponding to imports\n    will not be easily distinguishable from definitions.\n:param include_self: whether to include the references that is the \"input symbol\" itself.\n    Only has an effect if the relative_file_path, line and column point to a symbol, for example a definition.\n:param include_body: whether to include the body of the symbols in the result.\n:param include_file_symbols: whether to include references that are file symbols. This\n    is often a fallback mechanism for when the reference cannot be resolved to a symbol.\n:return: List of objects containing the symbol and the location of the reference.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "include_imports",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_self",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_file_symbols",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[ReferenceInSymbol]",
              "line_number": 1282
            },
            {
              "name": "request_containing_symbol",
              "module": "solidlsp.ls",
              "signature": "def request_containing_symbol(self, relative_file_path: str, line: int, column: int | None=None, strict: bool=False, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
              "docstring": "Finds the first symbol containing the position for the given file.\nFor Python, container symbols are considered to be those with kinds corresponding to\nfunctions, methods, or classes (typically: Function (12), Method (6), Class (5)).\n\nThe method operates as follows:\n  - Request the document symbols for the file.\n  - Filter symbols to those that start at or before the given line.\n  - From these, first look for symbols whose range contains the (line, column).\n  - If one or more symbols contain the position, return the one with the greatest starting position\n    (i.e. the innermost container).\n  - If none (strictly) contain the position, return the symbol with the greatest starting position\n    among those above the given line.\n  - If no container candidates are found, return None.\n\n:param relative_file_path: The relative path to the Python file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column (also called character). If not passed, the lookup will be based\n    only on the line.\n:param strict: If True, the position must be strictly within the range of the symbol.\n    Setting to True is useful for example for finding the parent of a symbol, as with strict=False,\n    and the line pointing to a symbol itself, the containing symbol will be the symbol itself\n    (and not the parent).\n:param include_body: Whether to include the body of the symbol in the result.\n:return: The container symbol (if found) or None.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int | None",
                  "default": null
                },
                {
                  "name": "strict",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.UnifiedSymbolInformation | None",
              "line_number": 1427
            },
            {
              "name": "request_container_of_symbol",
              "module": "solidlsp.ls",
              "signature": "def request_container_of_symbol(self, symbol: ls_types.UnifiedSymbolInformation, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
              "docstring": "Finds the container of the given symbol if there is one. If the parent attribute is present, the parent is returned\nwithout further searching.\n\n:param symbol: The symbol to find the container of.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The container of the given symbol or None if no container is found.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol",
                  "annotation": "ls_types.UnifiedSymbolInformation",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.UnifiedSymbolInformation | None",
              "line_number": 1541
            },
            {
              "name": "request_defining_symbol",
              "module": "solidlsp.ls",
              "signature": "def request_defining_symbol(self, relative_file_path: str, line: int, column: int, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
              "docstring": "Finds the symbol that defines the symbol at the given location.\n\nThis method first finds the definition of the symbol at the given position,\nthen retrieves the full symbol information for that definition.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The symbol information for the definition, or None if not found.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "ls_types.UnifiedSymbolInformation | None",
              "line_number": 1563
            },
            {
              "name": "cache_path",
              "module": "solidlsp.ls",
              "signature": "@property",
              "docstring": "The path to the cache file for the document symbols.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Path",
              "line_number": 1606
            },
            {
              "name": "save_cache",
              "module": "solidlsp.ls",
              "signature": "def save_cache(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 1612
            },
            {
              "name": "load_cache",
              "module": "solidlsp.ls",
              "signature": "def load_cache(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 1631
            },
            {
              "name": "request_workspace_symbol",
              "module": "solidlsp.ls",
              "signature": "def request_workspace_symbol(self, query: str) -> list[ls_types.UnifiedSymbolInformation] | None:",
              "docstring": "Raise a [workspace/symbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_symbol) request to the Language Server\nto find symbols across the whole workspace. Wait for the response and return the result.\n\n:param query: The query string to filter symbols by\n\n:return: A list of matching symbols",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "query",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.UnifiedSymbolInformation] | None",
              "line_number": 1649
            },
            {
              "name": "start",
              "module": "solidlsp.ls",
              "signature": "def start(self) -> 'SolidLanguageServer':",
              "docstring": "Starts the language server process and connects to it. Call shutdown when ready.\n\n:return: self for method chaining",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'SolidLanguageServer'",
              "line_number": 1676
            },
            {
              "name": "stop",
              "module": "solidlsp.ls",
              "signature": "def stop(self, shutdown_timeout: float=2.0) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "shutdown_timeout",
                  "annotation": "float",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 1689
            },
            {
              "name": "language_server",
              "module": "solidlsp.ls",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 1693
            },
            {
              "name": "is_running",
              "module": "solidlsp.ls",
              "signature": "def is_running(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 1696
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 79,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'serena.util.file_system', 'copy', 'solidlsp', 'solidlsp.lsp_protocol_handler.lsp_constants', 'solidlsp.ls_exceptions', 'solidlsp.language_servers.typescript_language_server', 'solidlsp.ls_utils', 'solidlsp.ls_config', 'solidlsp.language_servers.dart_language_server', 'solidlsp.language_servers.csharp_language_server', 'solidlsp.language_servers.jedi_server', 'pathspec', 'os', 'solidlsp.language_servers.eclipse_jdtls', 'solidlsp.language_servers.elixir_tools.elixir_tools', 'solidlsp.ls_handler', 'json', 'subprocess', 'pickle', 'hashlib', 'serena.text_utils', 'solidlsp.language_servers.pyright_server', 'solidlsp.language_servers.bash_language_server', 'dataclasses', 'solidlsp.lsp_protocol_handler', 'collections.abc', 'solidlsp.settings', 'solidlsp.language_servers.terraform_ls', 'solidlsp.language_servers.solargraph', 'solidlsp.language_servers.gopls', 'threading', 'collections', 'solidlsp.language_servers.clojure_lsp', 'solidlsp.language_servers.kotlin_language_server', 'solidlsp.language_servers.clangd_language_server', 'solidlsp.language_servers.omnisharp', 'solidlsp.language_servers.intelephense', 'shutil', 'solidlsp.language_servers.vts_language_server', 'contextlib', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'abc', 'solidlsp.language_servers.rust_analyzer', 'solidlsp.lsp_protocol_handler.lsp_types', 'pathlib'}"
    },
    "solidlsp.ls_logger": {
      "name": "solidlsp.ls_logger",
      "path": "src/solidlsp/ls_logger.py",
      "docstring": "Multilspy logger module.",
      "imports": [
        "inspect",
        "logging",
        "from datetime",
        "from pydantic"
      ],
      "classes": [
        {
          "name": "LogLine",
          "module": "solidlsp.ls_logger",
          "docstring": "Represents a line in the Multilspy log",
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 12,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LanguageServerLogger",
          "module": "solidlsp.ls_logger",
          "docstring": "Logger class",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_logger",
              "signature": "def __init__(self, json_format: bool=False, log_level: int=logging.INFO) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "json_format",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 30
            },
            {
              "name": "log",
              "module": "solidlsp.ls_logger",
              "signature": "def log(self, debug_message: str, level: int, sanitized_error_message: str='', stacklevel: int=2) -> None:",
              "docstring": "Log the debug and sanitized messages using the logger",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "debug_message",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "level",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "sanitized_error_message",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "stacklevel",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 35
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 25,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'pydantic', 'datetime', 'logging', 'inspect'}"
    },
    "solidlsp.settings": {
      "name": "solidlsp.settings",
      "path": "src/solidlsp/settings.py",
      "docstring": "Defines settings for Solid-LSP",
      "imports": [
        "os",
        "pathlib",
        "from dataclasses"
      ],
      "classes": [
        {
          "name": "SolidLSPSettings",
          "module": "solidlsp.settings",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "module": "solidlsp.settings",
              "signature": "def __post_init__(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 14
            },
            {
              "name": "ls_resources_dir",
              "module": "solidlsp.settings",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 19
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 11,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'os', 'dataclasses', 'pathlib'}"
    },
    "solidlsp.ls_handler": {
      "name": "solidlsp.ls_handler",
      "path": "src/solidlsp/ls_handler.py",
      "docstring": null,
      "imports": [
        "asyncio",
        "json",
        "logging",
        "os",
        "platform",
        "subprocess",
        "threading",
        "time",
        "from collections.abc",
        "from dataclasses",
        "from queue",
        "from typing",
        "psutil",
        "from sensai.util.string",
        "from solidlsp.ls_exceptions",
        "from solidlsp.ls_request",
        "from solidlsp.lsp_protocol_handler.lsp_requests",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server"
      ],
      "classes": [
        {
          "name": "LanguageServerTerminatedException",
          "module": "solidlsp.ls_handler",
          "docstring": "Exception raised when the language server process has terminated unexpectedly.",
          "bases": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_handler",
              "signature": "def __init__(self, message: str, cause: Exception | None=None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "cause",
                  "annotation": "Exception | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 44
            },
            {
              "name": "__str__",
              "module": "solidlsp.ls_handler",
              "signature": "def __str__(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 49
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 39,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Request",
          "module": "solidlsp.ls_handler",
          "docstring": null,
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_handler",
              "signature": "def __init__(self, request_id: int, method: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "request_id",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 63
            },
            {
              "name": "_tostring_includes",
              "module": "solidlsp.ls_handler",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 69
            },
            {
              "name": "on_result",
              "module": "solidlsp.ls_handler",
              "signature": "def on_result(self, params: PayloadLike) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "PayloadLike",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 72
            },
            {
              "name": "on_error",
              "module": "solidlsp.ls_handler",
              "signature": "def on_error(self, err: Exception) -> None:",
              "docstring": ":param err: the error that occurred while processing the request (typically an LSPError\n    for errors returned by the LS or LanguageServerTerminatedException if the error\n    is due to the language server process terminating unexpectedly).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "err",
                  "annotation": "Exception",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 76
            },
            {
              "name": "get_result",
              "module": "solidlsp.ls_handler",
              "signature": "def get_result(self, timeout: float | None=None) -> Result:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "Result",
              "line_number": 85
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 53,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SolidLanguageServerHandler",
          "module": "solidlsp.ls_handler",
          "docstring": "This class provides the implementation of Python client for the Language Server Protocol.\nA class that launches the language server and communicates with it\nusing the Language Server Protocol (LSP).\n\nIt provides methods for sending requests, responses, and notifications to the server\nand for registering handlers for requests and notifications from the server.\n\nUses JSON-RPC 2.0 for communication with the server over stdin/stdout.\n\nAttributes:\n    send: A LspRequest object that can be used to send requests to the server and\n        await for the responses.\n    notify: A LspNotification object that can be used to send notifications to the server.\n    cmd: A string that represents the command to launch the language server process.\n    process: A subprocess.Popen object that represents the language server process.\n    request_id: An integer that represents the next available request id for the client.\n    _pending_requests: A dictionary that maps request ids to Request objects that\n        store the results or errors of the requests.\n    on_request_handlers: A dictionary that maps method names to callback functions\n        that handle requests from the server.\n    on_notification_handlers: A dictionary that maps method names to callback functions\n        that handle notifications from the server.\n    logger: An optional function that takes two strings (source and destination) and\n        a payload dictionary, and logs the communication between the client and the server.\n    tasks: A dictionary that maps task ids to asyncio.Task objects that represent\n        the asynchronous tasks created by the handler.\n    task_counter: An integer that represents the next available task id for the handler.\n    loop: An asyncio.AbstractEventLoop object that represents the event loop used by the handler.\n    start_independent_lsp_process: An optional boolean flag that indicates whether to start the\n    language server process in an independent process group. Default is `True`. Setting it to\n    `False` means that the language server process will be in the same process group as the\n    the current process, and any SIGINT and SIGTERM signals will be sent to both processes.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_handler",
              "signature": "def __init__(self, process_launch_info: ProcessLaunchInfo, logger: Callable[[str, str, StringDict | str], None] | None=None, start_independent_lsp_process=True, request_timeout: float | None=None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "process_launch_info",
                  "annotation": "ProcessLaunchInfo",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "Callable[[str, str, StringDict | str], None] | None",
                  "default": null
                },
                {
                  "name": "start_independent_lsp_process",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "request_timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 126
            },
            {
              "name": "set_request_timeout",
              "module": "solidlsp.ls_handler",
              "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
              "docstring": ":param timeout: the timeout, in seconds, for all requests sent to the language server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 157
            },
            {
              "name": "is_running",
              "module": "solidlsp.ls_handler",
              "signature": "def is_running(self) -> bool:",
              "docstring": "Checks if the language server process is currently running.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 163
            },
            {
              "name": "start",
              "module": "solidlsp.ls_handler",
              "signature": "def start(self) -> None:",
              "docstring": "Starts the language server process and creates a task to continuously read from its stdout to handle communications\nfrom the server to the client",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 169
            },
            {
              "name": "stop",
              "module": "solidlsp.ls_handler",
              "signature": "def stop(self) -> None:",
              "docstring": "Sends the terminate signal to the language server process and waits for it to exit, with a timeout, killing it if necessary",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 215
            },
            {
              "name": "_cleanup_process",
              "module": "solidlsp.ls_handler",
              "signature": "def _cleanup_process(self, process):",
              "docstring": "Clean up a process: close stdin, terminate/kill process, close stdout/stderr.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "process",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 224
            },
            {
              "name": "_safely_close_pipe",
              "module": "solidlsp.ls_handler",
              "signature": "def _safely_close_pipe(self, pipe):",
              "docstring": "Safely close a pipe, ignoring any exceptions.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "pipe",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 241
            },
            {
              "name": "_terminate_or_kill_process",
              "module": "solidlsp.ls_handler",
              "signature": "def _terminate_or_kill_process(self, process):",
              "docstring": "Try to terminate the process gracefully, then forcefully if necessary.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "process",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 249
            },
            {
              "name": "_signal_process_tree",
              "module": "solidlsp.ls_handler",
              "signature": "def _signal_process_tree(self, process, terminate=True):",
              "docstring": "Send signal (terminate or kill) to the process and all its children.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "process",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "terminate",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 254
            },
            {
              "name": "shutdown",
              "module": "solidlsp.ls_handler",
              "signature": "def shutdown(self) -> None:",
              "docstring": "Perform the shutdown sequence for the client, including sending the shutdown request to the server and notifying it of exit",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 286
            },
            {
              "name": "_log",
              "module": "solidlsp.ls_handler",
              "signature": "def _log(self, message: str | StringDict) -> None:",
              "docstring": "Create a log message",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": "str | StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 298
            },
            {
              "name": "_read_bytes_from_process",
              "module": "solidlsp.ls_handler",
              "signature": "@staticmethod",
              "docstring": "Read exactly num_bytes from process stdout",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "process",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "stream",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "num_bytes",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 306
            },
            {
              "name": "_read_ls_process_stdout",
              "module": "solidlsp.ls_handler",
              "signature": "def _read_ls_process_stdout(self) -> None:",
              "docstring": "Continuously read from the language server process stdout and handle the messages\ninvoking the registered response and notification handlers",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 322
            },
            {
              "name": "_read_ls_process_stderr",
              "module": "solidlsp.ls_handler",
              "signature": "def _read_ls_process_stderr(self) -> None:",
              "docstring": "Continuously read from the language server process stderr and log the messages",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 361
            },
            {
              "name": "_handle_body",
              "module": "solidlsp.ls_handler",
              "signature": "def _handle_body(self, body: bytes) -> None:",
              "docstring": "Parse the body text received from the language server process and invoke the appropriate handler",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "bytes",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 387
            },
            {
              "name": "_receive_payload",
              "module": "solidlsp.ls_handler",
              "signature": "def _receive_payload(self, payload: StringDict) -> None:",
              "docstring": "Determine if the payload received from server is for a request, response, or notification and invoke the appropriate handler",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "payload",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 400
            },
            {
              "name": "send_notification",
              "module": "solidlsp.ls_handler",
              "signature": "def send_notification(self, method: str, params: dict | None=None) -> None:",
              "docstring": "Send notification pertaining to the given method to the server with the given parameters",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "dict | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 419
            },
            {
              "name": "send_response",
              "module": "solidlsp.ls_handler",
              "signature": "def send_response(self, request_id: Any, params: PayloadLike) -> None:",
              "docstring": "Send response to the given request id to the server with the given parameters",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "request_id",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "PayloadLike",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 425
            },
            {
              "name": "send_error_response",
              "module": "solidlsp.ls_handler",
              "signature": "def send_error_response(self, request_id: Any, err: LSPError) -> None:",
              "docstring": "Send error response to the given request id to the server with the given error",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "request_id",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "name": "err",
                  "annotation": "LSPError",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 431
            },
            {
              "name": "_cancel_pending_requests",
              "module": "solidlsp.ls_handler",
              "signature": "def _cancel_pending_requests(self, exception: Exception) -> None:",
              "docstring": "Cancel all pending requests by setting their results to an error",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exception",
                  "annotation": "Exception",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 438
            },
            {
              "name": "send_request",
              "module": "solidlsp.ls_handler",
              "signature": "def send_request(self, method: str, params: dict | None=None) -> PayloadLike:",
              "docstring": "Send request to the server, register the request id, and wait for the response",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "dict | None",
                  "default": null
                }
              ],
              "return_annotation": "PayloadLike",
              "line_number": 449
            },
            {
              "name": "_send_payload",
              "module": "solidlsp.ls_handler",
              "signature": "def _send_payload(self, payload: StringDict) -> None:",
              "docstring": "Send the payload to the server by writing to its stdin asynchronously.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "payload",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 476
            },
            {
              "name": "on_request",
              "module": "solidlsp.ls_handler",
              "signature": "def on_request(self, method: str, cb) -> None:",
              "docstring": "Register the callback function to handle requests from the server to the client for the given method",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "cb",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 496
            },
            {
              "name": "on_notification",
              "module": "solidlsp.ls_handler",
              "signature": "def on_notification(self, method: str, cb) -> None:",
              "docstring": "Register the callback function to handle notifications from the server to the client for the given method",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "cb",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 502
            },
            {
              "name": "_response_handler",
              "module": "solidlsp.ls_handler",
              "signature": "def _response_handler(self, response: StringDict) -> None:",
              "docstring": "Handle the response received from the server for a request, using the id to determine the request",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "response",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 508
            },
            {
              "name": "_request_handler",
              "module": "solidlsp.ls_handler",
              "signature": "def _request_handler(self, response: StringDict) -> None:",
              "docstring": "Handle the request received from the server: call the appropriate callback function and return the result",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "response",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 522
            },
            {
              "name": "_notification_handler",
              "module": "solidlsp.ls_handler",
              "signature": "def _notification_handler(self, response: StringDict) -> None:",
              "docstring": "Handle the notification received from the server: call the appropriate callback function",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "response",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 546
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 89,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Result",
          "module": "solidlsp.ls_handler",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "is_error",
              "module": "solidlsp.ls_handler",
              "signature": "def is_error(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 60
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 56,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'solidlsp.lsp_protocol_handler.lsp_requests', 'solidlsp.ls_exceptions', 'psutil', 'os', 'json', 'time', 'subprocess', 'sensai.util.string', 'asyncio', 'dataclasses', 'collections.abc', 'threading', 'platform', 'solidlsp.lsp_protocol_handler.server', 'queue', 'logging', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_request'}"
    },
    "solidlsp.ls_request": {
      "name": "solidlsp.ls_request",
      "path": "src/solidlsp/ls_request.py",
      "docstring": null,
      "imports": [
        "from typing",
        "from solidlsp.lsp_protocol_handler",
        "from ls_handler"
      ],
      "classes": [
        {
          "name": "LanguageServerRequest",
          "module": "solidlsp.ls_request",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_request",
              "signature": "def __init__(self, handler: 'SolidLanguageServerHandler'):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "handler",
                  "annotation": "'SolidLanguageServerHandler'",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 10
            },
            {
              "name": "_send_request",
              "module": "solidlsp.ls_request",
              "signature": "def _send_request(self, method: str, params: Any | None=None) -> Any:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "Any | None",
                  "default": null
                }
              ],
              "return_annotation": "Any",
              "line_number": 13
            },
            {
              "name": "implementation",
              "module": "solidlsp.ls_request",
              "signature": "def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ImplementationParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 16
            },
            {
              "name": "type_definition",
              "module": "solidlsp.ls_request",
              "signature": "def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeDefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 24
            },
            {
              "name": "document_color",
              "module": "solidlsp.ls_request",
              "signature": "def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
              "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentColorParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.ColorInformation']",
              "line_number": 34
            },
            {
              "name": "color_presentation",
              "module": "solidlsp.ls_request",
              "signature": "def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
              "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ColorPresentationParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.ColorPresentation']",
              "line_number": 42
            },
            {
              "name": "folding_range",
              "module": "solidlsp.ls_request",
              "signature": "def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
              "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.FoldingRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.FoldingRange'] | None",
              "line_number": 50
            },
            {
              "name": "declaration",
              "module": "solidlsp.ls_request",
              "signature": "def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DeclarationParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
              "line_number": 58
            },
            {
              "name": "selection_range",
              "module": "solidlsp.ls_request",
              "signature": "def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
              "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SelectionRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SelectionRange'] | None",
              "line_number": 67
            },
            {
              "name": "prepare_call_hierarchy",
              "module": "solidlsp.ls_request",
              "signature": "def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
              "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyPrepareParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
              "line_number": 75
            },
            {
              "name": "incoming_calls",
              "module": "solidlsp.ls_request",
              "signature": "def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
              "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
              "line_number": 83
            },
            {
              "name": "outgoing_calls",
              "module": "solidlsp.ls_request",
              "signature": "def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
              "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
              "line_number": 90
            },
            {
              "name": "semantic_tokens_full",
              "module": "solidlsp.ls_request",
              "signature": "def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', None]",
              "line_number": 97
            },
            {
              "name": "semantic_tokens_delta",
              "module": "solidlsp.ls_request",
              "signature": "def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensDeltaParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
              "line_number": 101
            },
            {
              "name": "semantic_tokens_range",
              "module": "solidlsp.ls_request",
              "signature": "def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', None]",
              "line_number": 107
            },
            {
              "name": "linked_editing_range",
              "module": "solidlsp.ls_request",
              "signature": "def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
              "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.LinkedEditingRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
              "line_number": 111
            },
            {
              "name": "will_create_files",
              "module": "solidlsp.ls_request",
              "signature": "def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CreateFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 118
            },
            {
              "name": "will_rename_files",
              "module": "solidlsp.ls_request",
              "signature": "def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.RenameFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 126
            },
            {
              "name": "will_delete_files",
              "module": "solidlsp.ls_request",
              "signature": "def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DeleteFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 134
            },
            {
              "name": "moniker",
              "module": "solidlsp.ls_request",
              "signature": "def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
              "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.MonikerParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.Moniker'] | None",
              "line_number": 142
            },
            {
              "name": "prepare_type_hierarchy",
              "module": "solidlsp.ls_request",
              "signature": "def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchyPrepareParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 149
            },
            {
              "name": "type_hierarchy_supertypes",
              "module": "solidlsp.ls_request",
              "signature": "def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchySupertypesParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 157
            },
            {
              "name": "type_hierarchy_subtypes",
              "module": "solidlsp.ls_request",
              "signature": "def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchySubtypesParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 164
            },
            {
              "name": "inline_value",
              "module": "solidlsp.ls_request",
              "signature": "def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
              "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlineValueParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.InlineValue'] | None",
              "line_number": 171
            },
            {
              "name": "inlay_hint",
              "module": "solidlsp.ls_request",
              "signature": "def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
              "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlayHintParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.InlayHint'] | None",
              "line_number": 180
            },
            {
              "name": "resolve_inlay_hint",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
              "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlayHint",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.InlayHint'",
              "line_number": 189
            },
            {
              "name": "text_document_diagnostic",
              "module": "solidlsp.ls_request",
              "signature": "def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
              "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentDiagnosticParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
              "line_number": 198
            },
            {
              "name": "workspace_diagnostic",
              "module": "solidlsp.ls_request",
              "signature": "def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
              "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceDiagnosticParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
              "line_number": 205
            },
            {
              "name": "initialize",
              "module": "solidlsp.ls_request",
              "signature": "def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
              "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InitializeParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.InitializeResult'",
              "line_number": 212
            },
            {
              "name": "shutdown",
              "module": "solidlsp.ls_request",
              "signature": "def shutdown(self) -> None:",
              "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 221
            },
            {
              "name": "will_save_wait_until",
              "module": "solidlsp.ls_request",
              "signature": "def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WillSaveTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 229
            },
            {
              "name": "completion",
              "module": "solidlsp.ls_request",
              "signature": "def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
              "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CompletionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
              "line_number": 239
            },
            {
              "name": "resolve_completion_item",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
              "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CompletionItem",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CompletionItem'",
              "line_number": 252
            },
            {
              "name": "hover",
              "module": "solidlsp.ls_request",
              "signature": "def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
              "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.HoverParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Hover', None]",
              "line_number": 259
            },
            {
              "name": "signature_help",
              "module": "solidlsp.ls_request",
              "signature": "def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SignatureHelpParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SignatureHelp', None]",
              "line_number": 266
            },
            {
              "name": "definition",
              "module": "solidlsp.ls_request",
              "signature": "def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 269
            },
            {
              "name": "references",
              "module": "solidlsp.ls_request",
              "signature": "def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
              "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ReferenceParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.Location'] | None",
              "line_number": 278
            },
            {
              "name": "document_highlight",
              "module": "solidlsp.ls_request",
              "signature": "def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
              "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentHighlightParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
              "line_number": 286
            },
            {
              "name": "document_symbol",
              "module": "solidlsp.ls_request",
              "signature": "def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
              "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentSymbolParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
              "line_number": 294
            },
            {
              "name": "code_action",
              "module": "solidlsp.ls_request",
              "signature": "def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
              "docstring": "A request to provide commands for the given text document and range.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeActionParams",
                  "default": null
                }
              ],
              "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
              "line_number": 304
            },
            {
              "name": "resolve_code_action",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
              "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeAction",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CodeAction'",
              "line_number": 308
            },
            {
              "name": "workspace_symbol",
              "module": "solidlsp.ls_request",
              "signature": "def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
              "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceSymbolParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
              "line_number": 315
            },
            {
              "name": "resolve_workspace_symbol",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
              "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceSymbol",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.WorkspaceSymbol'",
              "line_number": 329
            },
            {
              "name": "code_lens",
              "module": "solidlsp.ls_request",
              "signature": "def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
              "docstring": "A request to provide code lens for the given text document.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeLensParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CodeLens'] | None",
              "line_number": 337
            },
            {
              "name": "resolve_code_lens",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
              "docstring": "A request to resolve a command for a given code lens.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeLens",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CodeLens'",
              "line_number": 341
            },
            {
              "name": "document_link",
              "module": "solidlsp.ls_request",
              "signature": "def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
              "docstring": "A request to provide document links",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentLinkParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.DocumentLink'] | None",
              "line_number": 345
            },
            {
              "name": "resolve_document_link",
              "module": "solidlsp.ls_request",
              "signature": "def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
              "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentLink",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.DocumentLink'",
              "line_number": 349
            },
            {
              "name": "formatting",
              "module": "solidlsp.ls_request",
              "signature": "def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to to format a whole document.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 356
            },
            {
              "name": "range_formatting",
              "module": "solidlsp.ls_request",
              "signature": "def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to to format a range in a document.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentRangeFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 360
            },
            {
              "name": "on_type_formatting",
              "module": "solidlsp.ls_request",
              "signature": "def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to format a document on type.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 364
            },
            {
              "name": "rename",
              "module": "solidlsp.ls_request",
              "signature": "def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "A request to rename a symbol.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.RenameParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 368
            },
            {
              "name": "prepare_rename",
              "module": "solidlsp.ls_request",
              "signature": "def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
              "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.PrepareRenameParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
              "line_number": 372
            },
            {
              "name": "execute_command",
              "module": "solidlsp.ls_request",
              "signature": "def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
              "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ExecuteCommandParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.LSPAny', None]",
              "line_number": 379
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 9,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'solidlsp.lsp_protocol_handler', 'ls_handler'}"
    },
    "solidlsp.ls_config": {
      "name": "solidlsp.ls_config",
      "path": "src/solidlsp/ls_config.py",
      "docstring": "Configuration objects for language servers",
      "imports": [
        "fnmatch",
        "from collections.abc",
        "from dataclasses",
        "from enum",
        "from typing",
        "inspect"
      ],
      "classes": [
        {
          "name": "FilenameMatcher",
          "module": "solidlsp.ls_config",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.ls_config",
              "signature": "def __init__(self, *patterns: str) -> None:",
              "docstring": ":param patterns: fnmatch-compatible patterns",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 13
            },
            {
              "name": "is_relevant_filename",
              "module": "solidlsp.ls_config",
              "signature": "def is_relevant_filename(self, fn: str) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "fn",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 19
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 12,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Language",
          "module": "solidlsp.ls_config",
          "docstring": "Possible languages with Multilspy.",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [
            {
              "name": "iter_all",
              "module": "solidlsp.ls_config",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_experimental",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "Iterable[Self]",
              "line_number": 57
            },
            {
              "name": "is_experimental",
              "module": "solidlsp.ls_config",
              "signature": "def is_experimental(self) -> bool:",
              "docstring": "Check if the language server is experimental or deprecated.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 62
            },
            {
              "name": "__str__",
              "module": "solidlsp.ls_config",
              "signature": "def __str__(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 68
            },
            {
              "name": "get_source_fn_matcher",
              "module": "solidlsp.ls_config",
              "signature": "def get_source_fn_matcher(self) -> FilenameMatcher:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "FilenameMatcher",
              "line_number": 71
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 26,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LanguageServerConfig",
          "module": "solidlsp.ls_config",
          "docstring": "Configuration parameters",
          "bases": [],
          "methods": [
            {
              "name": "from_dict",
              "module": "solidlsp.ls_config",
              "signature": "@classmethod",
              "docstring": "Create a MultilspyConfig instance from a dictionary",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "env",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 126
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 114,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [],
      "constants": [
        "CSHARP",
        "PYTHON",
        "RUST",
        "JAVA",
        "KOTLIN",
        "TYPESCRIPT",
        "GO",
        "RUBY",
        "DART",
        "CPP",
        "PHP",
        "CLOJURE",
        "ELIXIR",
        "TERRAFORM",
        "BASH",
        "TYPESCRIPT_VTS",
        "PYTHON_JEDI",
        "CSHARP_OMNISHARP"
      ],
      "dependencies": "{'typing', 'dataclasses', 'collections.abc', 'fnmatch', 'inspect', 'enum'}"
    },
    "solidlsp.ls_types": {
      "name": "solidlsp.ls_types",
      "path": "src/solidlsp/ls_types.py",
      "docstring": "Defines wrapper objects around the types returned by LSP to ensure decoupling between LSP versions and multilspy",
      "imports": [
        "from __future__",
        "from enum",
        "from typing",
        "from typing_extensions"
      ],
      "classes": [
        {
          "name": "Position",
          "module": "solidlsp.ls_types",
          "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 18,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Range",
          "module": "solidlsp.ls_types",
          "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 63,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Location",
          "module": "solidlsp.ls_types",
          "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 83,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItemKind",
          "module": "solidlsp.ls_types",
          "docstring": "The kind of a completion entry.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 94,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItem",
          "module": "solidlsp.ls_types",
          "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 124,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolKind",
          "module": "solidlsp.ls_types",
          "docstring": "A symbol kind.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 144,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolTag",
          "module": "solidlsp.ls_types",
          "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 175,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "UnifiedSymbolInformation",
          "module": "solidlsp.ls_types",
          "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 185,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MarkupKind",
          "module": "solidlsp.ls_types",
          "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 247,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__MarkedString_Type_1",
          "module": "solidlsp.ls_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 261,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MarkupContent",
          "module": "solidlsp.ls_types",
          "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 281,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Hover",
          "module": "solidlsp.ls_types",
          "docstring": "The result of a hover request.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 312,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticsSeverity",
          "module": "solidlsp.ls_types",
          "docstring": null,
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 322,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Diagnostic",
          "module": "solidlsp.ls_types",
          "docstring": "Diagnostic information for a text document.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 329,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "URI",
        "ERROR",
        "WARNING",
        "INFORMATION",
        "HINT"
      ],
      "dependencies": "{'__future__', 'typing', 'enum', 'typing_extensions'}"
    },
    "solidlsp": {
      "name": "solidlsp",
      "path": "src/solidlsp/__init__.py",
      "docstring": null,
      "imports": [
        "from ls"
      ],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "{'ls'}"
    },
    "serena.analytics": {
      "name": "serena.analytics",
      "path": "src/serena/analytics.py",
      "docstring": null,
      "imports": [
        "from __future__",
        "logging",
        "threading",
        "from abc",
        "from collections",
        "from copy",
        "from dataclasses",
        "from enum",
        "from anthropic.types",
        "from dotenv",
        "tiktoken",
        "anthropic"
      ],
      "classes": [
        {
          "name": "TokenCountEstimator",
          "module": "serena.analytics",
          "docstring": null,
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "estimate_token_count",
              "module": "serena.analytics",
              "signature": "@abstractmethod",
              "docstring": "Estimate the number of tokens in the given text.\nThis is an abstract method that should be implemented by subclasses.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 19
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 17,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TiktokenCountEstimator",
          "module": "serena.analytics",
          "docstring": "Approximate token count using tiktoken.",
          "bases": [
            "TokenCountEstimator"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.analytics",
              "signature": "def __init__(self, model_name: str='gpt-4o'):",
              "docstring": "The tokenizer will be downloaded on the first initialization, which may take some time.\n\n:param model_name: see `tiktoken.model` to see available models.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "model_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 31
            },
            {
              "name": "estimate_token_count",
              "module": "serena.analytics",
              "signature": "def estimate_token_count(self, text: str) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 42
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 26,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "AnthropicTokenCount",
          "module": "serena.analytics",
          "docstring": "The exact count using the Anthropic API.\nCounting is free, but has a rate limit and will require an API key,\n(typically, set through an env variable).\nSee https://docs.anthropic.com/en/docs/build-with-claude/token-counting",
          "bases": [
            "TokenCountEstimator"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.analytics",
              "signature": "def __init__(self, model_name: str='claude-sonnet-4-20250514', api_key: str | None=None):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "model_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "api_key",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 54
            },
            {
              "name": "_send_count_tokens_request",
              "module": "serena.analytics",
              "signature": "def _send_count_tokens_request(self, text: str) -> MessageTokensCount:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "MessageTokensCount",
              "line_number": 62
            },
            {
              "name": "estimate_token_count",
              "module": "serena.analytics",
              "signature": "def estimate_token_count(self, text: str) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 68
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 46,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RegisteredTokenCountEstimator",
          "module": "serena.analytics",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [
            {
              "name": "get_valid_names",
              "module": "serena.analytics",
              "signature": "@classmethod",
              "docstring": "Get a list of all registered token count estimator names.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 80
            },
            {
              "name": "_create_estimator",
              "module": "serena.analytics",
              "signature": "def _create_estimator(self) -> TokenCountEstimator:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "TokenCountEstimator",
              "line_number": 86
            },
            {
              "name": "load_estimator",
              "module": "serena.analytics",
              "signature": "def load_estimator(self) -> TokenCountEstimator:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "TokenCountEstimator",
              "line_number": 95
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 75,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolUsageStats",
          "module": "serena.analytics",
          "docstring": "A class to record and manage tool usage statistics.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.analytics",
              "signature": "def __init__(self, token_count_estimator: RegisteredTokenCountEstimator=RegisteredTokenCountEstimator.TIKTOKEN_GPT4O):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "token_count_estimator",
                  "annotation": "RegisteredTokenCountEstimator",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 108
            },
            {
              "name": "token_estimator_name",
              "module": "serena.analytics",
              "signature": "@property",
              "docstring": "Get the name of the registered token count estimator used.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 115
            },
            {
              "name": "_estimate_token_count",
              "module": "serena.analytics",
              "signature": "def _estimate_token_count(self, text: str) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 135
            },
            {
              "name": "get_stats",
              "module": "serena.analytics",
              "signature": "def get_stats(self, tool_name: str) -> ToolUsageStats.Entry:",
              "docstring": "Get (a copy of) the current usage statistics for a specific tool.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "ToolUsageStats.Entry",
              "line_number": 138
            },
            {
              "name": "record_tool_usage",
              "module": "serena.analytics",
              "signature": "def record_tool_usage(self, tool_name: str, input_str: str, output_str: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "input_str",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "output_str",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 145
            },
            {
              "name": "get_tool_stats_dict",
              "module": "serena.analytics",
              "signature": "def get_tool_stats_dict(self) -> dict[str, dict[str, int]]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "dict[str, dict[str, int]]",
              "line_number": 152
            },
            {
              "name": "clear",
              "module": "serena.analytics",
              "signature": "def clear(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 156
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 103,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Entry",
          "module": "serena.analytics",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "update_on_call",
              "module": "serena.analytics",
              "signature": "def update_on_call(self, input_tokens: int, output_tokens: int) -> None:",
              "docstring": "Update the entry with the number of tokens used for a single call.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "input_tokens",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "output_tokens",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 127
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 122,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [],
      "constants": [
        "TIKTOKEN_GPT4O",
        "ANTHROPIC_CLAUDE_SONNET_4"
      ],
      "dependencies": "{'dotenv', 'dataclasses', 'copy', '__future__', 'anthropic', 'anthropic.types', 'logging', 'abc', 'threading', 'collections', 'enum', 'tiktoken'}"
    },
    "serena.text_utils": {
      "name": "serena.text_utils",
      "path": "src/serena/text_utils.py",
      "docstring": null,
      "imports": [
        "fnmatch",
        "logging",
        "os",
        "re",
        "from collections.abc",
        "from dataclasses",
        "from enum",
        "from typing",
        "from joblib"
      ],
      "classes": [
        {
          "name": "LineType",
          "module": "serena.text_utils",
          "docstring": "Enum for different types of lines in search results.",
          "bases": [
            "StrEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 15,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextLine",
          "module": "serena.text_utils",
          "docstring": "Represents a line of text with information on how it relates to the match.",
          "bases": [],
          "methods": [
            {
              "name": "get_display_prefix",
              "module": "serena.text_utils",
              "signature": "def get_display_prefix(self) -> str:",
              "docstring": "Get the display prefix for this line based on the match type.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 35
            },
            {
              "name": "format_line",
              "module": "serena.text_utils",
              "signature": "def format_line(self, include_line_numbers: bool=True) -> str:",
              "docstring": "Format the line for display (e.g.,for logging or passing to an LLM).\n\n:param include_line_numbers: Whether to include the line number in the result.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_line_numbers",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 41
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 27,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "MatchedConsecutiveLines",
          "module": "serena.text_utils",
          "docstring": "Represents a collection of consecutive lines found through some criterion in a text file or a string.\nMay include lines before, after, and matched.",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "module": "serena.text_utils",
              "signature": "def __post_init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 69
            },
            {
              "name": "start_line",
              "module": "serena.text_utils",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 81
            },
            {
              "name": "end_line",
              "module": "serena.text_utils",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 85
            },
            {
              "name": "num_matched_lines",
              "module": "serena.text_utils",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 89
            },
            {
              "name": "to_display_string",
              "module": "serena.text_utils",
              "signature": "def to_display_string(self, include_line_numbers: bool=True) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_line_numbers",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 92
            },
            {
              "name": "from_file_contents",
              "module": "serena.text_utils",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "file_contents",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_before",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_after",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "source_file_path",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 96
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 54,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [
        {
          "name": "glob_to_regex",
          "module": "serena.text_utils",
          "signature": "def glob_to_regex(glob_pat: str) -> str:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "glob_pat",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "line_number": 115
        },
        {
          "name": "search_text",
          "module": "serena.text_utils",
          "signature": "def search_text(pattern: str, content: str | None=None, source_file_path: str | None=None, allow_multiline_match: bool=False, context_lines_before: int=0, context_lines_after: int=0, is_glob: bool=False) -> list[MatchedConsecutiveLines]:",
          "docstring": "Search for a pattern in text content. Supports both regex and glob-like patterns.\n\n:param pattern: Pattern to search for (regex or glob-like pattern)\n:param content: The text content to search. May be None if source_file_path is provided.\n:param source_file_path: Optional path to the source file. If content is None,\n    this has to be passed and the file will be read.\n:param allow_multiline_match: Whether to search across multiple lines. Currently, the default\n    option (False) is very inefficient, so it is recommended to set this to True.\n:param context_lines_before: Number of context lines to include before matches\n:param context_lines_after: Number of context lines to include after matches\n:param is_glob: If True, pattern is treated as a glob-like pattern (e.g., \"*.py\", \"test_??.py\")\n         and will be converted to regex internally\n\n:return: List of `TextSearchMatch` objects\n\n:raises: ValueError if the pattern is not valid",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "pattern",
              "annotation": "str",
              "default": null
            },
            {
              "name": "content",
              "annotation": "str | None",
              "default": null
            },
            {
              "name": "source_file_path",
              "annotation": "str | None",
              "default": null
            },
            {
              "name": "allow_multiline_match",
              "annotation": "bool",
              "default": null
            },
            {
              "name": "context_lines_before",
              "annotation": "int",
              "default": null
            },
            {
              "name": "context_lines_after",
              "annotation": "int",
              "default": null
            },
            {
              "name": "is_glob",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "list[MatchedConsecutiveLines]",
          "line_number": 136
        },
        {
          "name": "default_file_reader",
          "module": "serena.text_utils",
          "signature": "def default_file_reader(file_path: str) -> str:",
          "docstring": "Reads using utf-8 encoding.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "file_path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "str",
          "line_number": 238
        },
        {
          "name": "glob_match",
          "module": "serena.text_utils",
          "signature": "def glob_match(pattern: str, path: str) -> bool:",
          "docstring": "Match a file path against a glob pattern.\n\nSupports standard glob patterns:\n- * matches any number of characters except /\n- ** matches any number of directories (zero or more)\n- ? matches a single character except /\n- [seq] matches any character in seq\n\n:param pattern: Glob pattern (e.g., 'src/**/*.py', '**agent.py')\n:param path: File path to match against\n:return: True if path matches pattern",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "pattern",
              "annotation": "str",
              "default": null
            },
            {
              "name": "path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "line_number": 244
        },
        {
          "name": "search_files",
          "module": "serena.text_utils",
          "signature": "def search_files(relative_file_paths: list[str], pattern: str, root_path: str='', file_reader: Callable[[str], str]=default_file_reader, context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None) -> list[MatchedConsecutiveLines]:",
          "docstring": "Search for a pattern in a list of files.\n\n:param relative_file_paths: List of relative file paths in which to search\n:param pattern: Pattern to search for\n:param root_path: Root path to resolve relative paths against (by default, current working directory).\n:param file_reader: Function to read a file, by default will just use os.open.\n    All files that can't be read by it will be skipped.\n:param context_lines_before: Number of context lines to include before matches\n:param context_lines_after: Number of context lines to include after matches\n:param paths_include_glob: Optional glob pattern to include files from the list\n:param paths_exclude_glob: Optional glob pattern to exclude files from the list\n:return: List of MatchedConsecutiveLines objects",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "relative_file_paths",
              "annotation": "list[str]",
              "default": null
            },
            {
              "name": "pattern",
              "annotation": "str",
              "default": null
            },
            {
              "name": "root_path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "file_reader",
              "annotation": "Callable[[str], str]",
              "default": null
            },
            {
              "name": "context_lines_before",
              "annotation": "int",
              "default": null
            },
            {
              "name": "context_lines_after",
              "annotation": "int",
              "default": null
            },
            {
              "name": "paths_include_glob",
              "annotation": "str | None",
              "default": null
            },
            {
              "name": "paths_exclude_glob",
              "annotation": "str | None",
              "default": null
            }
          ],
          "return_annotation": "list[MatchedConsecutiveLines]",
          "line_number": 290
        }
      ],
      "constants": [
        "MATCH",
        "BEFORE_MATCH",
        "AFTER_MATCH"
      ],
      "dependencies": "{'typing', 'dataclasses', 'collections.abc', 'os', 'joblib', 'fnmatch', 're', 'logging', 'enum'}"
    },
    "serena.agno": {
      "name": "serena.agno",
      "path": "src/serena/agno.py",
      "docstring": null,
      "imports": [
        "argparse",
        "logging",
        "os",
        "threading",
        "from pathlib",
        "from typing",
        "from agno.agent",
        "from agno.memory",
        "from agno.models.base",
        "from agno.storage.sqlite",
        "from agno.tools.function",
        "from agno.tools.toolkit",
        "from dotenv",
        "from sensai.util.logging",
        "from serena.agent",
        "from serena.config.context_mode",
        "from serena.constants",
        "from serena.util.exception"
      ],
      "classes": [
        {
          "name": "SerenaAgnoToolkit",
          "module": "serena.agno",
          "docstring": null,
          "bases": [
            "Toolkit"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.agno",
              "signature": "def __init__(self, serena_agent: SerenaAgent):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "serena_agent",
                  "annotation": "SerenaAgent",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 26
            },
            {
              "name": "_create_agno_function",
              "module": "serena.agno",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "tool",
                  "annotation": "Tool",
                  "default": null
                }
              ],
              "return_annotation": "Function",
              "line_number": 33
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 25,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaAgnoAgentProvider",
          "module": "serena.agno",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "get_agent",
              "module": "serena.agno",
              "signature": "@classmethod",
              "docstring": "Returns the singleton instance of the Serena agent or creates it with the given parameters if it doesn't exist.\n\nNOTE: This is very ugly with poor separation of concerns, but the way in which the Agno UI works (reloading the\n    module that defines the `app` variable) essentially forces us to do something like this.\n\n:param model: the large language model to use for the agent\n:return: the agent instance",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "model",
                  "annotation": "Model",
                  "default": null
                }
              ],
              "return_annotation": "Agent",
              "line_number": 54
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 49,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'agno.agent', 'typing', 'dotenv', 'sensai.util.logging', 'serena.constants', 'argparse', 'os', 'agno.tools.toolkit', 'logging', 'agno.memory', 'threading', 'agno.models.base', 'agno.storage.sqlite', 'serena.agent', 'serena.config.context_mode', 'serena.util.exception', 'agno.tools.function', 'pathlib'}"
    },
    "serena.project": {
      "name": "serena.project",
      "path": "src/serena/project.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "from pathlib",
        "pathspec",
        "from serena.config.serena_config",
        "from serena.constants",
        "from serena.text_utils",
        "from serena.util.file_system",
        "from solidlsp",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "Project",
          "module": "serena.project",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.project",
              "signature": "def __init__(self, project_root: str, project_config: ProjectConfig, is_newly_created: bool=False):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "project_config",
                  "annotation": "ProjectConfig",
                  "default": null
                },
                {
                  "name": "is_newly_created",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 20
            },
            {
              "name": "project_name",
              "module": "serena.project",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 50
            },
            {
              "name": "language",
              "module": "serena.project",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Language",
              "line_number": 54
            },
            {
              "name": "load",
              "module": "serena.project",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str | Path",
                  "default": null
                },
                {
                  "name": "autogenerate",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "'Project'",
              "line_number": 58
            },
            {
              "name": "path_to_project_yml",
              "module": "serena.project",
              "signature": "def path_to_project_yml(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 65
            },
            {
              "name": "read_file",
              "module": "serena.project",
              "signature": "def read_file(self, relative_path: str) -> str:",
              "docstring": "Reads a file relative to the project root.\n\n:param relative_path: the path to the file relative to the project root\n:return: the content of the file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 68
            },
            {
              "name": "get_ignore_spec",
              "module": "serena.project",
              "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
              "docstring": ":return: the pathspec matcher for the paths that were configured to be ignored,\n    either explicitly or implicitly through .gitignore files.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "pathspec.PathSpec",
              "line_number": 80
            },
            {
              "name": "_is_ignored_dirname",
              "module": "serena.project",
              "signature": "def _is_ignored_dirname(self, dirname: str) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 87
            },
            {
              "name": "_is_ignored_relative_path",
              "module": "serena.project",
              "signature": "def _is_ignored_relative_path(self, relative_path: str, ignore_non_source_files: bool=True) -> bool:",
              "docstring": "Determine whether a path should be ignored based on file type and ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_non_source_files: whether files that are not source files (according to the file masks\n    determined by the project's programming language) shall be ignored\n\n:return: whether the path should be ignored",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "ignore_non_source_files",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 90
            },
            {
              "name": "is_ignored_path",
              "module": "serena.project",
              "signature": "def is_ignored_path(self, path: str | Path) -> bool:",
              "docstring": "Checks whether the given path is ignored\n\n:param path: the path to check, can be absolute or relative",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 126
            },
            {
              "name": "is_path_in_project",
              "module": "serena.project",
              "signature": "def is_path_in_project(self, path: str | Path) -> bool:",
              "docstring": "Checks if the given (absolute or relative) path is inside the project directory.\nNote that even relative paths may be outside if they contain \"..\" or point to symlinks.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 144
            },
            {
              "name": "validate_relative_path",
              "module": "serena.project",
              "signature": "def validate_relative_path(self, relative_path: str) -> None:",
              "docstring": "Validates that the given relative path is safe to read or edit,\nmeaning it's inside the project directory and is not ignored by git.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 157
            },
            {
              "name": "gather_source_files",
              "module": "serena.project",
              "signature": "def gather_source_files(self, relative_path: str='') -> list[str]:",
              "docstring": "Retrieves relative paths of all source files, optionally limited to the given path\n\n:param relative_path: if provided, restrict search to this path",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 168
            },
            {
              "name": "search_source_files_for_pattern",
              "module": "serena.project",
              "signature": "def search_source_files_for_pattern(self, pattern: str, relative_path: str='', context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None) -> list[MatchedConsecutiveLines]:",
              "docstring": "Search for a pattern across all (non-ignored) source files\n\n:param pattern: Regular expression pattern to search for, either as a compiled Pattern or string\n:param relative_path:\n:param context_lines_before: Number of lines of context to include before each match\n:param context_lines_after: Number of lines of context to include after each match\n:param paths_include_glob: Glob pattern to filter which files to include in the search\n:param paths_exclude_glob: Glob pattern to filter which files to exclude from the search. Takes precedence over paths_include_glob.\n:return: List of matched consecutive lines with context",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "pattern",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "context_lines_before",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_after",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "paths_include_glob",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "paths_exclude_glob",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "list[MatchedConsecutiveLines]",
              "line_number": 193
            },
            {
              "name": "retrieve_content_around_line",
              "module": "serena.project",
              "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
              "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_before",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_after",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "MatchedConsecutiveLines",
              "line_number": 224
            },
            {
              "name": "create_language_server",
              "module": "serena.project",
              "signature": "def create_language_server(self, log_level: int=logging.INFO, ls_timeout: float | None=DEFAULT_TOOL_TIMEOUT - 5, trace_lsp_communication: bool=False) -> SolidLanguageServer:",
              "docstring": "Create a language server for a project. Note that you will have to start it\nbefore performing any LS operations.\n\n:param project: either a path to the project root or a ProjectConfig instance.\n    If no project.yml is found, the default project configuration will be used.\n:param log_level: the log level for the language server\n:param ls_timeout: the timeout for the language server\n:param trace_lsp_communication: whether to trace LSP communication\n:return: the language server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "ls_timeout",
                  "annotation": "float | None",
                  "default": null
                },
                {
                  "name": "trace_lsp_communication",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "SolidLanguageServer",
              "line_number": 246
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 19,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'serena.constants', 'serena.util.file_system', 'solidlsp.settings', 'pathspec', 'os', 'solidlsp', 'solidlsp.ls_logger', 'logging', 'serena.config.serena_config', 'serena.text_utils', 'solidlsp.ls_config', 'pathlib'}"
    },
    "serena.agent": {
      "name": "serena.agent",
      "path": "src/serena/agent.py",
      "docstring": "The Serena Model Context Protocol (MCP) Server",
      "imports": [
        "multiprocessing",
        "os",
        "platform",
        "sys",
        "threading",
        "webbrowser",
        "from collections",
        "from collections.abc",
        "from concurrent.futures",
        "from logging",
        "from pathlib",
        "from typing",
        "from sensai.util",
        "from sensai.util.logging",
        "from interprompt.jinja_template",
        "from serena",
        "from serena.analytics",
        "from serena.config.context_mode",
        "from serena.config.serena_config",
        "from serena.dashboard",
        "from serena.project",
        "from serena.prompt_factory",
        "from serena.tools",
        "from serena.util.inspection",
        "from serena.util.logging",
        "from solidlsp",
        "from serena.gui_log_viewer",
        "from serena.gui_log_viewer"
      ],
      "classes": [
        {
          "name": "ProjectNotFoundError",
          "module": "serena.agent",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 43,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinesRead",
          "module": "serena.agent",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.agent",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 48
            },
            {
              "name": "add_lines_read",
              "module": "serena.agent",
              "signature": "def add_lines_read(self, relative_path: str, lines: tuple[int, int]) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lines",
                  "annotation": "tuple[int, int]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 51
            },
            {
              "name": "were_lines_read",
              "module": "serena.agent",
              "signature": "def were_lines_read(self, relative_path: str, lines: tuple[int, int]) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "lines",
                  "annotation": "tuple[int, int]",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 54
            },
            {
              "name": "invalidate_lines_read",
              "module": "serena.agent",
              "signature": "def invalidate_lines_read(self, relative_path: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 58
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 47,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MemoriesManager",
          "module": "serena.agent",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.agent",
              "signature": "def __init__(self, project_root: str):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 64
            },
            {
              "name": "_get_memory_file_path",
              "module": "serena.agent",
              "signature": "def _get_memory_file_path(self, name: str) -> Path:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Path",
              "line_number": 68
            },
            {
              "name": "load_memory",
              "module": "serena.agent",
              "signature": "def load_memory(self, name: str) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 74
            },
            {
              "name": "save_memory",
              "module": "serena.agent",
              "signature": "def save_memory(self, name: str, content: str) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 81
            },
            {
              "name": "list_memories",
              "module": "serena.agent",
              "signature": "def list_memories(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 87
            },
            {
              "name": "delete_memory",
              "module": "serena.agent",
              "signature": "def delete_memory(self, name: str) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 90
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 63,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "AvailableTools",
          "module": "serena.agent",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.agent",
              "signature": "def __init__(self, tools: list[Tool]):",
              "docstring": ":param tools: the list of available tools",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tools",
                  "annotation": "list[Tool]",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 97
            },
            {
              "name": "__len__",
              "module": "serena.agent",
              "signature": "def __len__(self) -> int:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 109
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 96,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaAgent",
          "module": "serena.agent",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.agent",
              "signature": "def __init__(self, project: str | None=None, project_activation_callback: Callable[[], None] | None=None, serena_config: SerenaConfig | None=None, context: SerenaAgentContext | None=None, modes: list[SerenaAgentMode] | None=None, memory_log_handler: MemoryLogHandler | None=None):",
              "docstring": ":param project: the project to load immediately or None to not load any project; may be a path to the project or a name of\n    an already registered project;\n:param project_activation_callback: a callback function to be called when a project is activated.\n:param serena_config: the Serena configuration or None to read the configuration from the default location.\n:param context: the context in which the agent is operating, None for default context.\n    The context may adjust prompts, tool availability, and tool descriptions.\n:param modes: list of modes in which the agent is operating (they will be combined), None for default modes.\n    The modes may adjust prompts, tool availability, and tool descriptions.\n:param memory_log_handler: a MemoryLogHandler instance from which to read log messages; if None, a new one will be created\n    if necessary.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "project_activation_callback",
                  "annotation": "Callable[[], None] | None",
                  "default": null
                },
                {
                  "name": "serena_config",
                  "annotation": "SerenaConfig | None",
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "SerenaAgentContext | None",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "list[SerenaAgentMode] | None",
                  "default": null
                },
                {
                  "name": "memory_log_handler",
                  "annotation": "MemoryLogHandler | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 114
            },
            {
              "name": "get_context",
              "module": "serena.agent",
              "signature": "def get_context(self) -> SerenaAgentContext:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SerenaAgentContext",
              "line_number": 249
            },
            {
              "name": "get_tool_description_override",
              "module": "serena.agent",
              "signature": "def get_tool_description_override(self, tool_name: str) -> str | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str | None",
              "line_number": 252
            },
            {
              "name": "_check_shell_settings",
              "module": "serena.agent",
              "signature": "def _check_shell_settings(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 255
            },
            {
              "name": "_ide_context_tool_inclusion_definitions",
              "module": "serena.agent",
              "signature": "def _ide_context_tool_inclusion_definitions(self, project_root_or_name: str | None) -> list[ToolInclusionDefinition]:",
              "docstring": "In the IDE assistant context, the agent is assumed to work on a single project, and we thus\nwant to apply that project's tool exclusions/inclusions from the get-go, limiting the set\nof tools that will be exposed to the client.\nSo if the project exists, we apply all the aforementioned exclusions.\n\n:param project_root_or_name: the project root path or project name\n:return:",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root_or_name",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "list[ToolInclusionDefinition]",
              "line_number": 265
            },
            {
              "name": "record_tool_usage_if_enabled",
              "module": "serena.agent",
              "signature": "def record_tool_usage_if_enabled(self, input_kwargs: dict, tool_result: str | dict, tool: Tool) -> None:",
              "docstring": "Record the usage of a tool with the given input and output strings if tool usage statistics recording is enabled.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "input_kwargs",
                  "annotation": "dict",
                  "default": null
                },
                {
                  "name": "tool_result",
                  "annotation": "str | dict",
                  "default": null
                },
                {
                  "name": "tool",
                  "annotation": "Tool",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 286
            },
            {
              "name": "_open_dashboard",
              "module": "serena.agent",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "url",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 300
            },
            {
              "name": "get_project_root",
              "module": "serena.agent",
              "signature": "def get_project_root(self) -> str:",
              "docstring": ":return: the root directory of the active project (if any); raises a ValueError if there is no active project",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 311
            },
            {
              "name": "get_exposed_tool_instances",
              "module": "serena.agent",
              "signature": "def get_exposed_tool_instances(self) -> list['Tool']:",
              "docstring": ":return: the tool instances which are exposed (e.g. to the MCP client).\n    Note that the set of exposed tools is fixed for the session, as\n    clients don't react to changes in the set of tools, so this is the superset\n    of tools that can be offered during the session.\n    If a client should attempt to use a tool that is dynamically disabled\n    (e.g. because a project is activated that disables it), it will receive an error.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list['Tool']",
              "line_number": 320
            },
            {
              "name": "get_active_project",
              "module": "serena.agent",
              "signature": "def get_active_project(self) -> Project | None:",
              "docstring": ":return: the active project or None if no project is active",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Project | None",
              "line_number": 331
            },
            {
              "name": "get_active_project_or_raise",
              "module": "serena.agent",
              "signature": "def get_active_project_or_raise(self) -> Project:",
              "docstring": ":return: the active project or raises an exception if no project is active",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Project",
              "line_number": 337
            },
            {
              "name": "set_modes",
              "module": "serena.agent",
              "signature": "def set_modes(self, modes: list[SerenaAgentMode]) -> None:",
              "docstring": "Set the current mode configurations.\n\n:param modes: List of mode names or paths to use",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "list[SerenaAgentMode]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 346
            },
            {
              "name": "get_active_modes",
              "module": "serena.agent",
              "signature": "def get_active_modes(self) -> list[SerenaAgentMode]:",
              "docstring": ":return: the list of active modes",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[SerenaAgentMode]",
              "line_number": 357
            },
            {
              "name": "_format_prompt",
              "module": "serena.agent",
              "signature": "def _format_prompt(self, prompt_template: str) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prompt_template",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 363
            },
            {
              "name": "create_system_prompt",
              "module": "serena.agent",
              "signature": "def create_system_prompt(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 367
            },
            {
              "name": "_update_active_tools",
              "module": "serena.agent",
              "signature": "def _update_active_tools(self) -> None:",
              "docstring": "Update the active tools based on enabled modes and the active project.\nThe base tool set already takes the Serena configuration and the context into account\n(as well as any internal modes that are not handled dynamically, such as JetBrains mode).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 379
            },
            {
              "name": "issue_task",
              "module": "serena.agent",
              "signature": "def issue_task(self, task: Callable[[], Any], name: str | None=None) -> Future:",
              "docstring": "Issue a task to the executor for asynchronous execution.\nIt is ensured that tasks are executed in the order they are issued, one after another.\n\n:param task: the task to execute\n:param name: the name of the task for logging purposes; if None, use the task function's name\n:return: a Future object representing the execution of the task",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "task",
                  "annotation": "Callable[[], Any]",
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "Future",
              "line_number": 399
            },
            {
              "name": "execute_task",
              "module": "serena.agent",
              "signature": "def execute_task(self, task: Callable[[], T]) -> T:",
              "docstring": "Executes the given task synchronously via the agent's task executor.\nThis is useful for tasks that need to be executed immediately and whose results are needed right away.\n\n:param task: the task to execute\n:return: the result of the task execution",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "task",
                  "annotation": "Callable[[], T]",
                  "default": null
                }
              ],
              "return_annotation": "T",
              "line_number": 419
            },
            {
              "name": "is_using_language_server",
              "module": "serena.agent",
              "signature": "def is_using_language_server(self) -> bool:",
              "docstring": ":return: whether this agent uses language server-based code analysis",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 430
            },
            {
              "name": "_activate_project",
              "module": "serena.agent",
              "signature": "def _activate_project(self, project: Project) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "Project",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 436
            },
            {
              "name": "load_project_from_path_or_name",
              "module": "serena.agent",
              "signature": "def load_project_from_path_or_name(self, project_root_or_name: str, autogenerate: bool) -> Project | None:",
              "docstring": "Get a project instance from a path or a name.\n\n:param project_root_or_name: the path to the project root or the name of the project\n:param autogenerate: whether to autogenerate the project for the case where first argument is a directory\n    which does not yet contain a Serena project configuration file\n:return: the project instance if it was found/could be created, None otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root_or_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "autogenerate",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "Project | None",
              "line_number": 458
            },
            {
              "name": "activate_project_from_path_or_name",
              "module": "serena.agent",
              "signature": "def activate_project_from_path_or_name(self, project_root_or_name: str) -> Project:",
              "docstring": "Activate a project from a path or a name.\nIf the project was already registered, it will just be activated.\nIf the argument is a path at which no Serena project previously existed, the project will be created beforehand.\nRaises ProjectNotFoundError if the project could neither be found nor created.\n\n:return: a tuple of the project instance and a Boolean indicating whether the project was newly\n    created",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root_or_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Project",
              "line_number": 475
            },
            {
              "name": "get_active_tool_classes",
              "module": "serena.agent",
              "signature": "def get_active_tool_classes(self) -> list[type['Tool']]:",
              "docstring": ":return: the list of active tool classes for the current project",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[type['Tool']]",
              "line_number": 494
            },
            {
              "name": "get_active_tool_names",
              "module": "serena.agent",
              "signature": "def get_active_tool_names(self) -> list[str]:",
              "docstring": ":return: the list of names of the active tools for the current project",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 500
            },
            {
              "name": "tool_is_active",
              "module": "serena.agent",
              "signature": "def tool_is_active(self, tool_class: type['Tool'] | str) -> bool:",
              "docstring": ":param tool_class: the class or name of the tool to check\n:return: True if the tool is active, False otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_class",
                  "annotation": "type['Tool'] | str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 506
            },
            {
              "name": "get_current_config_overview",
              "module": "serena.agent",
              "signature": "def get_current_config_overview(self) -> str:",
              "docstring": ":return: a string overview of the current configuration, including the active and available configuration options",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 516
            },
            {
              "name": "is_language_server_running",
              "module": "serena.agent",
              "signature": "def is_language_server_running(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 560
            },
            {
              "name": "reset_language_server",
              "module": "serena.agent",
              "signature": "def reset_language_server(self) -> None:",
              "docstring": "Starts/resets the language server for the current project",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 563
            },
            {
              "name": "get_tool",
              "module": "serena.agent",
              "signature": "def get_tool(self, tool_class: type[TTool]) -> TTool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_class",
                  "annotation": "type[TTool]",
                  "default": null
                }
              ],
              "return_annotation": "TTool",
              "line_number": 596
            },
            {
              "name": "print_tool_overview",
              "module": "serena.agent",
              "signature": "def print_tool_overview(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 599
            },
            {
              "name": "mark_file_modified",
              "module": "serena.agent",
              "signature": "def mark_file_modified(self, relativ_path: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relativ_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 602
            },
            {
              "name": "__del__",
              "module": "serena.agent",
              "signature": "def __del__(self) -> None:",
              "docstring": "Destructor to clean up the language server instance and GUI logger",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 606
            },
            {
              "name": "get_tool_by_name",
              "module": "serena.agent",
              "signature": "def get_tool_by_name(self, tool_name: str) -> Tool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Tool",
              "line_number": 622
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 113,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "T",
        "SUCCESS_RESULT"
      ],
      "dependencies": "{'typing', 'serena.project', 'solidlsp', 'sensai.util', 'multiprocessing', 'os', 'serena', 'serena.config.context_mode', 'serena.config.serena_config', 'serena.prompt_factory', 'serena.gui_log_viewer', 'concurrent.futures', 'interprompt.jinja_template', 'serena.util.inspection', 'sys', 'serena.util.logging', 'collections.abc', 'serena.tools', 'serena.analytics', 'threading', 'collections', 'webbrowser', 'platform', 'sensai.util.logging', 'serena.dashboard', 'logging', 'pathlib'}"
    },
    "serena.cli": {
      "name": "serena.cli",
      "path": "src/serena/cli.py",
      "docstring": null,
      "imports": [
        "glob",
        "os",
        "shutil",
        "subprocess",
        "sys",
        "from logging",
        "from pathlib",
        "from typing",
        "click",
        "from sensai.util",
        "from tqdm",
        "from serena.agent",
        "from serena.config.context_mode",
        "from serena.config.serena_config",
        "from serena.constants",
        "from serena.mcp",
        "from serena.project",
        "from serena.tools",
        "from serena.util.logging",
        "from solidlsp.ls_config",
        "from serena.tools.workflow_tools"
      ],
      "classes": [
        {
          "name": "ProjectType",
          "module": "serena.cli",
          "docstring": "ParamType allowing either a project name or a path to a project directory.",
          "bases": [
            "click.ParamType"
          ],
          "methods": [
            {
              "name": "convert",
              "module": "serena.cli",
              "signature": "def convert(self, value: str, param: Any, ctx: Any) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "value",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "param",
                  "annotation": "Any",
                  "default": null
                },
                {
                  "name": "ctx",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 64
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 59,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "AutoRegisteringGroup",
          "module": "serena.cli",
          "docstring": "A click.Group subclass that automatically registers any click.Command\nattributes defined on the class into the group.\n\nAfter initialization, it inspects its own class for attributes that are\ninstances of click.Command (typically created via @click.command) and\ncalls self.add_command(cmd) on each. This lets you define your commands\nas static methods on the subclass for IDE-friendly organization without\nmanual registration.",
          "bases": [
            "click.Group"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self, name: str, help: str):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "help",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 86
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 74,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TopLevelCommands",
          "module": "serena.cli",
          "docstring": "Root CLI group containing the core Serena commands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 98
            },
            {
              "name": "start_mcp_server",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.option",
                "click.option",
                "click.argument",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "project",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "project_file_arg",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "tuple[str, ...]",
                  "default": null
                },
                {
                  "name": "transport",
                  "annotation": "Literal['stdio', 'sse']",
                  "default": null
                },
                {
                  "name": "host",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "port",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "enable_web_dashboard",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "enable_gui_log_window",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None",
                  "default": null
                },
                {
                  "name": "trace_lsp_communication",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "tool_timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 131
            },
            {
              "name": "print_system_prompt",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument",
                "click.option",
                "click.option",
                "click.option",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "project",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "only_instructions",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "tuple[str, ...]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 206
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 95,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ModeCommands",
          "module": "serena.cli",
          "docstring": "Group for 'mode' subcommands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 232
            },
            {
              "name": "list",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command"
              ],
              "parameters": [],
              "return_annotation": "None",
              "line_number": 237
            },
            {
              "name": "create",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.option",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "from_internal",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 257
            },
            {
              "name": "edit",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "mode_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 279
            },
            {
              "name": "delete",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "mode_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 295
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 229,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ContextCommands",
          "module": "serena.cli",
          "docstring": "Group for 'context' subcommands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 307
            },
            {
              "name": "list",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command"
              ],
              "parameters": [],
              "return_annotation": "None",
              "line_number": 314
            },
            {
              "name": "create",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.option",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "from_internal",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 334
            },
            {
              "name": "edit",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "context_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 356
            },
            {
              "name": "delete",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "context_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 372
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 304,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaConfigCommands",
          "module": "serena.cli",
          "docstring": "Group for 'config' subcommands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 384
            },
            {
              "name": "edit",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command"
              ],
              "parameters": [],
              "return_annotation": "None",
              "line_number": 391
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 381,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ProjectCommands",
          "module": "serena.cli",
          "docstring": "Group for 'project' subcommands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 401
            },
            {
              "name": "generate_yml",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "project_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "language",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 410
            },
            {
              "name": "index",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "project",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 433
            },
            {
              "name": "index_deprecated",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "project",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 440
            },
            {
              "name": "_index_project",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "project",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 445
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 398,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolCommands",
          "module": "serena.cli",
          "docstring": "Group for 'tool' subcommands.",
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 464
            },
            {
              "name": "list",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "quiet",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 473
            },
            {
              "name": "description",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument",
                "click.option"
              ],
              "parameters": [
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 488
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 461,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PromptCommands",
          "module": "serena.cli",
          "docstring": null,
          "bases": [
            "AutoRegisteringGroup"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.cli",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 505
            },
            {
              "name": "_get_user_prompt_yaml_path",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "prompt_yaml_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 509
            },
            {
              "name": "list",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command"
              ],
              "parameters": [],
              "return_annotation": "None",
              "line_number": 515
            },
            {
              "name": "create_override",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": ":param prompt_yaml_name: The yaml name of the prompt you want to override. Call the `list` command for discovering valid prompt yaml names.\n:return:",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "prompt_yaml_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 527
            },
            {
              "name": "edit_override",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": ":param prompt_yaml_name: The yaml name of the prompt override to edit.\n:return:",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "prompt_yaml_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 545
            },
            {
              "name": "list_overrides",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command"
              ],
              "parameters": [],
              "return_annotation": "None",
              "line_number": 561
            },
            {
              "name": "delete_override",
              "module": "serena.cli",
              "signature": "@staticmethod",
              "docstring": ":param prompt_yaml_name:  The yaml name of the prompt override to delete.\"\n:return:",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod",
                "click.command",
                "click.argument"
              ],
              "parameters": [
                {
                  "name": "prompt_yaml_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 572
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 504,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "_open_in_editor",
          "module": "serena.cli",
          "signature": "def _open_in_editor(path: str) -> None:",
          "docstring": "Open the given file in the system's default editor or viewer.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "None",
          "line_number": 40
        },
        {
          "name": "get_help",
          "module": "serena.cli",
          "signature": "def get_help() -> str:",
          "docstring": "Retrieve the help text for the top-level Serena CLI.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "str",
          "line_number": 607
        }
      ],
      "constants": [
        "PROJECT_TYPE"
      ],
      "dependencies": "{'typing', 'serena.project', 'serena.tools.workflow_tools', 'glob', 'serena.agent', 'solidlsp.ls_config', 'sensai.util', 'os', 'tqdm', 'subprocess', 'serena.config.context_mode', 'serena.config.serena_config', 'click', 'serena.constants', 'sys', 'serena.util.logging', 'serena.mcp', 'serena.tools', 'shutil', 'logging', 'pathlib'}"
    },
    "serena.symbol": {
      "name": "serena.symbol",
      "path": "src/serena/symbol.py",
      "docstring": null,
      "imports": [
        "json",
        "logging",
        "os",
        "from abc",
        "from collections.abc",
        "from dataclasses",
        "from typing",
        "from sensai.util.string",
        "from solidlsp",
        "from solidlsp.ls",
        "from solidlsp.ls_types",
        "from project",
        "from agent"
      ],
      "classes": [
        {
          "name": "LanguageServerSymbolLocation",
          "module": "serena.symbol",
          "docstring": "Represents the (start) location of a symbol identifier, which, within Serena, uniquely identifies the symbol.",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "module": "serena.symbol",
              "signature": "def __post_init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 44
            },
            {
              "name": "to_dict",
              "module": "serena.symbol",
              "signature": "def to_dict(self, include_relative_path: bool=True) -> dict[str, Any]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_relative_path",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 48
            },
            {
              "name": "has_position_in_file",
              "module": "serena.symbol",
              "signature": "def has_position_in_file(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 54
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 24,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "PositionInFile",
          "module": "serena.symbol",
          "docstring": "Represents a character position within a file",
          "bases": [],
          "methods": [
            {
              "name": "to_lsp_position",
              "module": "serena.symbol",
              "signature": "def to_lsp_position(self) -> Position:",
              "docstring": "Convert to LSP Position.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Position",
              "line_number": 73
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 59,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "Symbol",
          "module": "serena.symbol",
          "docstring": null,
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "get_body_start_position",
              "module": "serena.symbol",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 82
            },
            {
              "name": "get_body_end_position",
              "module": "serena.symbol",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 86
            },
            {
              "name": "get_body_start_position_or_raise",
              "module": "serena.symbol",
              "signature": "def get_body_start_position_or_raise(self) -> PositionInFile:",
              "docstring": "Get the start position of the symbol body, raising an error if it is not defined.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile",
              "line_number": 89
            },
            {
              "name": "get_body_end_position_or_raise",
              "module": "serena.symbol",
              "signature": "def get_body_end_position_or_raise(self) -> PositionInFile:",
              "docstring": "Get the end position of the symbol body, raising an error if it is not defined.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile",
              "line_number": 98
            },
            {
              "name": "is_neighbouring_definition_separated_by_empty_line",
              "module": "serena.symbol",
              "signature": "@abstractmethod",
              "docstring": ":return: whether a symbol definition of this symbol's kind is usually separated from the\n    previous/next definition by at least one empty line.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 108
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 80,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LanguageServerSymbol",
          "module": "serena.symbol",
          "docstring": null,
          "bases": [
            "Symbol",
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "match_name_path",
              "module": "serena.symbol",
              "signature": "@staticmethod",
              "docstring": "Checks if a given `name_path` matches a symbol's qualified name parts.\nSee docstring of `Symbol.find` for more details.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "symbol_name_path_parts",
                  "annotation": "list[str]",
                  "default": null
                },
                {
                  "name": "substring_matching",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 119
            },
            {
              "name": "__init__",
              "module": "serena.symbol",
              "signature": "def __init__(self, symbol_root_from_ls: UnifiedSymbolInformation) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol_root_from_ls",
                  "annotation": "UnifiedSymbolInformation",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 154
            },
            {
              "name": "_tostring_includes",
              "module": "serena.symbol",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 157
            },
            {
              "name": "_tostring_additional_entries",
              "module": "serena.symbol",
              "signature": "def _tostring_additional_entries(self) -> dict[str, Any]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 160
            },
            {
              "name": "name",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 164
            },
            {
              "name": "kind",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 168
            },
            {
              "name": "symbol_kind",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SymbolKind",
              "line_number": 172
            },
            {
              "name": "is_neighbouring_definition_separated_by_empty_line",
              "module": "serena.symbol",
              "signature": "def is_neighbouring_definition_separated_by_empty_line(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 175
            },
            {
              "name": "relative_path",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str | None",
              "line_number": 179
            },
            {
              "name": "location",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": ":return: the start location of the actual symbol identifier",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "LanguageServerSymbolLocation",
              "line_number": 186
            },
            {
              "name": "body_start_position",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Position | None",
              "line_number": 193
            },
            {
              "name": "body_end_position",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Position | None",
              "line_number": 204
            },
            {
              "name": "get_body_start_position",
              "module": "serena.symbol",
              "signature": "def get_body_start_position(self) -> PositionInFile | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 214
            },
            {
              "name": "get_body_end_position",
              "module": "serena.symbol",
              "signature": "def get_body_end_position(self) -> PositionInFile | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 220
            },
            {
              "name": "get_body_line_numbers",
              "module": "serena.symbol",
              "signature": "def get_body_line_numbers(self) -> tuple[int | None, int | None]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "tuple[int | None, int | None]",
              "line_number": 226
            },
            {
              "name": "line",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": ":return: the line in which the symbol identifier is defined.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int | None",
              "line_number": 234
            },
            {
              "name": "column",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "int | None",
              "line_number": 245
            },
            {
              "name": "body",
              "module": "serena.symbol",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str | None",
              "line_number": 253
            },
            {
              "name": "get_name_path",
              "module": "serena.symbol",
              "signature": "def get_name_path(self) -> str:",
              "docstring": "Get the name path of the symbol (e.g. \"class/method/inner_function\").",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 256
            },
            {
              "name": "get_name_path_parts",
              "module": "serena.symbol",
              "signature": "def get_name_path_parts(self) -> list[str]:",
              "docstring": "Get the parts of the name path of the symbol (e.g. [\"class\", \"method\", \"inner_function\"]).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 262
            },
            {
              "name": "iter_children",
              "module": "serena.symbol",
              "signature": "def iter_children(self) -> Iterator[Self]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Iterator[Self]",
              "line_number": 270
            },
            {
              "name": "iter_ancestors",
              "module": "serena.symbol",
              "signature": "def iter_ancestors(self, up_to_symbol_kind: SymbolKind | None=None) -> Iterator[Self]:",
              "docstring": "Iterate over all ancestors of the symbol, starting with the parent and going up to the root or\nthe given symbol kind.\n\n:param up_to_symbol_kind: if provided, iteration will stop *before* the first ancestor of the given kind.\n    A typical use case is to pass `SymbolKind.File` or `SymbolKind.Package`.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "up_to_symbol_kind",
                  "annotation": "SymbolKind | None",
                  "default": null
                }
              ],
              "return_annotation": "Iterator[Self]",
              "line_number": 274
            },
            {
              "name": "get_parent",
              "module": "serena.symbol",
              "signature": "def get_parent(self) -> Self | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Self | None",
              "line_number": 288
            },
            {
              "name": "find",
              "module": "serena.symbol",
              "signature": "def find(self, name_path: str, substring_matching: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[Self]:",
              "docstring": "Find all symbols within the symbol's subtree that match the given `name_path`.\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path).\n\nKey aspects of the name path matching behavior:\n- Trailing slashes in `name_path` play no role and are ignored.\n- The name of the retrieved symbols will match (either exactly or as a substring)\n  the last segment of `name_path`, while other segments will restrict the search to symbols that\n  have a desired sequence of ancestors.\n- If there is no starting or intermediate slash in `name_path`, there is no\n  restriction on the ancestor symbols. For example, passing `method` will match\n  against symbols with name paths like `method`, `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains a `/` but doesn't start with a `/`, the matching is restricted to symbols\n  with the same ancestors as the last segment of `name_path`. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, meaning\n  that the first segment of it must match the first segment of the symbol's name path.\n  For example, passing `/class` will match only against top-level symbols like `class` but not against `nested_class/class`.\n  Passing `/class/method` will match against `class/method` but not `nested_class/class/method` or `method`.\n\n:param name_path: the name path to match against\n:param substring_matching: whether to use substring matching (as opposed to exact matching)\n    of the last segment of `name_path` against the symbol name.\n:param include_kinds: an optional sequence of ints representing the LSP symbol kind.\n    If provided, only symbols of the given kinds will be included in the result.\n:param exclude_kinds: If provided, symbols of the given kinds will be excluded from the result.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "substring_matching",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                }
              ],
              "return_annotation": "list[Self]",
              "line_number": 294
            },
            {
              "name": "to_dict",
              "module": "serena.symbol",
              "signature": "def to_dict(self, kind: bool=False, location: bool=False, depth: int=0, include_body: bool=False, include_children_body: bool=False, include_relative_path: bool=True) -> dict[str, Any]:",
              "docstring": "Converts the symbol to a dictionary.\n\n:param kind: whether to include the kind of the symbol\n:param location: whether to include the location of the symbol\n:param depth: the depth of the symbol\n:param include_body: whether to include the body of the top-level symbol.\n:param include_children_body: whether to also include the body of the children.\n    Note that the body of the children is part of the body of the parent symbol,\n    so there is usually no need to set this to True unless you want process the output\n    and pass the children without passing the parent body to the LM.\n:param include_relative_path: whether to include the relative path of the symbol in the location\n    entry. Relative paths of the symbol's children are always excluded.\n:return: a dictionary representation of the symbol",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "kind",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "location",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "depth",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_children_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_relative_path",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 352
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 115,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceInLanguageServerSymbol",
          "module": "serena.symbol",
          "docstring": "Represents the location of a reference to another symbol within a symbol/file.\n\nThe contained symbol is the symbol within which the reference is located,\nnot the symbol that is referenced.",
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "from_lsp_reference",
              "module": "serena.symbol",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "reference",
                  "annotation": "LSPReferenceInSymbol",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 436
            },
            {
              "name": "get_relative_path",
              "module": "serena.symbol",
              "signature": "def get_relative_path(self) -> str | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str | None",
              "line_number": 439
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 414,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "LanguageServerSymbolRetriever",
          "module": "serena.symbol",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.symbol",
              "signature": "def __init__(self, lang_server: SolidLanguageServer, agent: Union['SerenaAgent', None]=None) -> None:",
              "docstring": ":param lang_server: the language server to use for symbol retrieval as well as editing operations.\n:param agent: the agent to use (only needed for marking files as modified). You can pass None if you don't\n    need an agent to be aware of file modifications performed by the symbol manager.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_server",
                  "annotation": "SolidLanguageServer",
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "Union['SerenaAgent', None]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 444
            },
            {
              "name": "set_language_server",
              "module": "serena.symbol",
              "signature": "def set_language_server(self, lang_server: SolidLanguageServer) -> None:",
              "docstring": "Set the language server to use for symbol retrieval and editing operations.\nThis is useful if you want to change the language server after initializing the SymbolManager.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_server",
                  "annotation": "SolidLanguageServer",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 453
            },
            {
              "name": "get_language_server",
              "module": "serena.symbol",
              "signature": "def get_language_server(self) -> SolidLanguageServer:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SolidLanguageServer",
              "line_number": 460
            },
            {
              "name": "find_by_name",
              "module": "serena.symbol",
              "signature": "def find_by_name(self, name_path: str, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None, substring_matching: bool=False, within_relative_path: str | None=None) -> list[LanguageServerSymbol]:",
              "docstring": "Find all symbols that match the given name. See docstring of `Symbol.find` for more details.\nThe only parameter not mentioned there is `within_relative_path`, which can be used to restrict the search\nto symbols within a specific file or directory.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                },
                {
                  "name": "substring_matching",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "within_relative_path",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": "list[LanguageServerSymbol]",
              "line_number": 463
            },
            {
              "name": "get_document_symbols",
              "module": "serena.symbol",
              "signature": "def get_document_symbols(self, relative_path: str) -> list[LanguageServerSymbol]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[LanguageServerSymbol]",
              "line_number": 487
            },
            {
              "name": "find_by_location",
              "module": "serena.symbol",
              "signature": "def find_by_location(self, location: LanguageServerSymbolLocation) -> LanguageServerSymbol | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "location",
                  "annotation": "LanguageServerSymbolLocation",
                  "default": null
                }
              ],
              "return_annotation": "LanguageServerSymbol | None",
              "line_number": 492
            },
            {
              "name": "find_referencing_symbols",
              "module": "serena.symbol",
              "signature": "def find_referencing_symbols(self, name_path: str, relative_file_path: str, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[ReferenceInLanguageServerSymbol]:",
              "docstring": "Find all symbols that reference the symbol with the given name.\nIf multiple symbols fit the name (e.g. for variables that are overwritten), will use the first one.\n\n:param name_path: the name path of the symbol to find\n:param relative_file_path: the relative path of the file in which the referenced symbol is defined.\n:param include_body: whether to include the body of all symbols in the result.\n    Not recommended, as the referencing symbols will often be files, and thus the bodies will be very long.\n:param include_kinds: which kinds of symbols to include in the result.\n:param exclude_kinds: which kinds of symbols to exclude from the result.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                }
              ],
              "return_annotation": "list[ReferenceInLanguageServerSymbol]",
              "line_number": 502
            },
            {
              "name": "find_referencing_symbols_by_location",
              "module": "serena.symbol",
              "signature": "def find_referencing_symbols_by_location(self, symbol_location: LanguageServerSymbolLocation, include_body: bool=False, include_kinds: Sequence[SymbolKind] | None=None, exclude_kinds: Sequence[SymbolKind] | None=None) -> list[ReferenceInLanguageServerSymbol]:",
              "docstring": "Find all symbols that reference the symbol at the given location.\n\n:param symbol_location: the location of the symbol for which to find references.\n    Does not need to include an end_line, as it is unused in the search.\n:param include_body: whether to include the body of all symbols in the result.\n    Not recommended, as the referencing symbols will often be files, and thus the bodies will be very long.\n    Note: you can filter out the bodies of the children if you set include_children_body=False\n    in the to_dict method.\n:param include_kinds: an optional sequence of ints representing the LSP symbol kind.\n    If provided, only symbols of the given kinds will be included in the result.\n:param exclude_kinds: If provided, symbols of the given kinds will be excluded from the result.\n    Takes precedence over include_kinds.\n:return: a list of symbols that reference the given symbol",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol_location",
                  "annotation": "LanguageServerSymbolLocation",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "Sequence[SymbolKind] | None",
                  "default": null
                }
              ],
              "return_annotation": "list[ReferenceInLanguageServerSymbol]",
              "line_number": 537
            },
            {
              "name": "get_symbol_overview",
              "module": "serena.symbol",
              "signature": "def get_symbol_overview(self, relative_path: str) -> dict[str, list[SymbolOverviewElement]]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, list[SymbolOverviewElement]]",
              "line_number": 587
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 443,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JetBrainsSymbol",
          "module": "serena.symbol",
          "docstring": null,
          "bases": [
            "Symbol"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.symbol",
              "signature": "def __init__(self, symbol_dict: dict, project: Project) -> None:",
              "docstring": ":param symbol_dict: dictionary as returned by the JetBrains plugin client.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol_dict",
                  "annotation": "dict",
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "Project",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 598
            },
            {
              "name": "get_relative_path",
              "module": "serena.symbol",
              "signature": "def get_relative_path(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 608
            },
            {
              "name": "get_file_content",
              "module": "serena.symbol",
              "signature": "def get_file_content(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 611
            },
            {
              "name": "is_position_in_file_available",
              "module": "serena.symbol",
              "signature": "def is_position_in_file_available(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 618
            },
            {
              "name": "get_body_start_position",
              "module": "serena.symbol",
              "signature": "def get_body_start_position(self) -> PositionInFile | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 621
            },
            {
              "name": "get_body_end_position",
              "module": "serena.symbol",
              "signature": "def get_body_end_position(self) -> PositionInFile | None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PositionInFile | None",
              "line_number": 630
            },
            {
              "name": "is_neighbouring_definition_separated_by_empty_line",
              "module": "serena.symbol",
              "signature": "def is_neighbouring_definition_separated_by_empty_line(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 639
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 597,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolOverviewElement",
          "module": "serena.symbol",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 583,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [],
      "constants": [
        "_NAME_PATH_SEP"
      ],
      "dependencies": "{'typing', 'agent', 'solidlsp.ls', 'dataclasses', 'collections.abc', 'os', 'solidlsp', 'project', 'solidlsp.ls_types', 'json', 'logging', 'abc', 'sensai.util.string'}"
    },
    "serena.mcp": {
      "name": "serena.mcp",
      "path": "src/serena/mcp.py",
      "docstring": "The Serena Model Context Protocol (MCP) Server",
      "imports": [
        "sys",
        "from abc",
        "from collections.abc",
        "from contextlib",
        "from dataclasses",
        "from typing",
        "docstring_parser",
        "from mcp.server.fastmcp",
        "from mcp.server.fastmcp.server",
        "from mcp.server.fastmcp.tools.base",
        "from pydantic_settings",
        "from sensai.util",
        "from serena.agent",
        "from serena.config.context_mode",
        "from serena.constants",
        "from serena.tools",
        "from serena.util.exception",
        "from serena.util.logging"
      ],
      "classes": [
        {
          "name": "SerenaMCPRequestContext",
          "module": "serena.mcp",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 44,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "SerenaMCPFactory",
          "module": "serena.mcp",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.mcp",
              "signature": "def __init__(self, context: str=DEFAULT_CONTEXT, project: str | None=None):",
              "docstring": ":param context: The context name or path to context file\n:param project: Either an absolute path to the project directory or a name of an already registered project.\n    If the project passed here hasn't been registered yet, it will be registered automatically and can be activated by its name\n    afterward.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 49
            },
            {
              "name": "make_mcp_tool",
              "module": "serena.mcp",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "tool",
                  "annotation": "Tool",
                  "default": null
                }
              ],
              "return_annotation": "MCPTool",
              "line_number": 60
            },
            {
              "name": "_iter_tools",
              "module": "serena.mcp",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Iterator[Tool]",
              "line_number": 112
            },
            {
              "name": "_set_mcp_tools",
              "module": "serena.mcp",
              "signature": "def _set_mcp_tools(self, mcp: FastMCP) -> None:",
              "docstring": "Update the tools in the MCP server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "mcp",
                  "annotation": "FastMCP",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 116
            },
            {
              "name": "_instantiate_agent",
              "module": "serena.mcp",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "serena_config",
                  "annotation": "SerenaConfig",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "list[SerenaAgentMode]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 126
            },
            {
              "name": "create_mcp_server",
              "module": "serena.mcp",
              "signature": "def create_mcp_server(self, host: str='0.0.0.0', port: int=8000, modes: Sequence[str]=DEFAULT_MODES, enable_web_dashboard: bool | None=None, enable_gui_log_window: bool | None=None, log_level: Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None=None, trace_lsp_communication: bool | None=None, tool_timeout: float | None=None) -> FastMCP:",
              "docstring": "Create an MCP server with process-isolated SerenaAgent to prevent asyncio contamination.\n\n:param host: The host to bind to\n:param port: The port to bind to\n:param modes: List of mode names or paths to mode files\n:param enable_web_dashboard: Whether to enable the web dashboard. If not specified, will take the value from the serena configuration.\n:param enable_gui_log_window: Whether to enable the GUI log window. It currently does not work on macOS, and setting this to True will be ignored then.\n    If not specified, will take the value from the serena configuration.\n:param log_level: Log level. If not specified, will take the value from the serena configuration.\n:param trace_lsp_communication: Whether to trace the communication between Serena and the language servers.\n    This is useful for debugging language server issues.\n:param tool_timeout: Timeout in seconds for tool execution. If not specified, will take the value from the serena configuration.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "host",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "port",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "Sequence[str]",
                  "default": null
                },
                {
                  "name": "enable_web_dashboard",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "enable_gui_log_window",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "log_level",
                  "annotation": "Literal['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'] | None",
                  "default": null
                },
                {
                  "name": "trace_lsp_communication",
                  "annotation": "bool | None",
                  "default": null
                },
                {
                  "name": "tool_timeout",
                  "annotation": "float | None",
                  "default": null
                }
              ],
              "return_annotation": "FastMCP",
              "line_number": 129
            },
            {
              "name": "server_lifespan",
              "module": "serena.mcp",
              "signature": "@asynccontextmanager",
              "docstring": "Manage server startup and shutdown lifecycle.",
              "is_method": true,
              "is_async": true,
              "decorators": [
                "asynccontextmanager",
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "mcp_server",
                  "annotation": "FastMCP",
                  "default": null
                }
              ],
              "return_annotation": "AsyncIterator[None]",
              "line_number": 187
            },
            {
              "name": "_get_initial_instructions",
              "module": "serena.mcp",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 192
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 48,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaMCPFactorySingleProcess",
          "module": "serena.mcp",
          "docstring": "MCP server factory where the SerenaAgent and its language server run in the same process as the MCP server",
          "bases": [
            "SerenaMCPFactory"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.mcp",
              "signature": "def __init__(self, context: str=DEFAULT_CONTEXT, project: str | None=None, memory_log_handler: MemoryLogHandler | None=None):",
              "docstring": ":param context: The context name or path to context file\n:param project: Either an absolute path to the project directory or a name of an already registered project.\n    If the project passed here hasn't been registered yet, it will be registered automatically and can be activated by its name\n    afterward.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "context",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "memory_log_handler",
                  "annotation": "MemoryLogHandler | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 201
            },
            {
              "name": "_instantiate_agent",
              "module": "serena.mcp",
              "signature": "def _instantiate_agent(self, serena_config: SerenaConfig, modes: list[SerenaAgentMode]) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "serena_config",
                  "annotation": "SerenaConfig",
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "list[SerenaAgentMode]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 212
            },
            {
              "name": "_iter_tools",
              "module": "serena.mcp",
              "signature": "def _iter_tools(self) -> Iterator[Tool]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Iterator[Tool]",
              "line_number": 217
            },
            {
              "name": "_get_initial_instructions",
              "module": "serena.mcp",
              "signature": "def _get_initial_instructions(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 221
            },
            {
              "name": "server_lifespan",
              "module": "serena.mcp",
              "signature": "@asynccontextmanager",
              "docstring": null,
              "is_method": true,
              "is_async": true,
              "decorators": [
                "asynccontextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "mcp_server",
                  "annotation": "FastMCP",
                  "default": null
                }
              ],
              "return_annotation": "AsyncIterator[None]",
              "line_number": 227
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 196,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "configure_logging",
          "module": "serena.mcp",
          "signature": "def configure_logging(*args, **kwargs) -> None:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "None",
          "line_number": 32
        }
      ],
      "constants": [],
      "dependencies": "{'typing', 'serena.constants', 'sys', 'mcp.server.fastmcp.server', 'dataclasses', 'docstring_parser', 'collections.abc', 'serena.util.logging', 'serena.tools', 'contextlib', 'abc', 'pydantic_settings', 'serena.config.context_mode', 'mcp.server.fastmcp.tools.base', 'serena.agent', 'mcp.server.fastmcp', 'sensai.util', 'serena.util.exception'}"
    },
    "serena.prompt_factory": {
      "name": "serena.prompt_factory",
      "path": "src/serena/prompt_factory.py",
      "docstring": null,
      "imports": [
        "os",
        "from serena.constants",
        "from serena.generated.generated_prompt_factory"
      ],
      "classes": [
        {
          "name": "SerenaPromptFactory",
          "module": "serena.prompt_factory",
          "docstring": "A class for retrieving and rendering prompt templates and prompt lists.",
          "bases": [
            "PromptFactory"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.prompt_factory",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 12
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 7,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'serena.generated.generated_prompt_factory', 'os', 'serena.constants'}"
    },
    "serena.dashboard": {
      "name": "serena.dashboard",
      "path": "src/serena/dashboard.py",
      "docstring": null,
      "imports": [
        "os",
        "socket",
        "threading",
        "from collections.abc",
        "from typing",
        "from flask",
        "from pydantic",
        "from sensai.util",
        "from serena.analytics",
        "from serena.constants",
        "from serena.util.logging",
        "from flask"
      ],
      "classes": [
        {
          "name": "RequestLog",
          "module": "serena.dashboard",
          "docstring": null,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 21,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ResponseLog",
          "module": "serena.dashboard",
          "docstring": null,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 25,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ResponseToolNames",
          "module": "serena.dashboard",
          "docstring": null,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 30,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ResponseToolStats",
          "module": "serena.dashboard",
          "docstring": null,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 34,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaDashboardAPI",
          "module": "serena.dashboard",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.dashboard",
              "signature": "def __init__(self, memory_log_handler: MemoryLogHandler, tool_names: list[str], shutdown_callback: Callable[[], None] | None=None, tool_usage_stats: ToolUsageStats | None=None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "memory_log_handler",
                  "annotation": "MemoryLogHandler",
                  "default": null
                },
                {
                  "name": "tool_names",
                  "annotation": "list[str]",
                  "default": null
                },
                {
                  "name": "shutdown_callback",
                  "annotation": "Callable[[], None] | None",
                  "default": null
                },
                {
                  "name": "tool_usage_stats",
                  "annotation": "ToolUsageStats | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 41
            },
            {
              "name": "memory_log_handler",
              "module": "serena.dashboard",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "MemoryLogHandler",
              "line_number": 56
            },
            {
              "name": "_setup_routes",
              "module": "serena.dashboard",
              "signature": "def _setup_routes(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 59
            },
            {
              "name": "_get_log_messages",
              "module": "serena.dashboard",
              "signature": "def _get_log_messages(self, request_log: RequestLog) -> ResponseLog:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "request_log",
                  "annotation": "RequestLog",
                  "default": null
                }
              ],
              "return_annotation": "ResponseLog",
              "line_number": 106
            },
            {
              "name": "_get_tool_names",
              "module": "serena.dashboard",
              "signature": "def _get_tool_names(self) -> ResponseToolNames:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "ResponseToolNames",
              "line_number": 111
            },
            {
              "name": "_get_tool_stats",
              "module": "serena.dashboard",
              "signature": "def _get_tool_stats(self) -> ResponseToolStats:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "ResponseToolStats",
              "line_number": 114
            },
            {
              "name": "_clear_tool_stats",
              "module": "serena.dashboard",
              "signature": "def _clear_tool_stats(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 120
            },
            {
              "name": "_shutdown",
              "module": "serena.dashboard",
              "signature": "def _shutdown(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 124
            },
            {
              "name": "_find_first_free_port",
              "module": "serena.dashboard",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "start_port",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 134
            },
            {
              "name": "run",
              "module": "serena.dashboard",
              "signature": "def run(self, host: str='0.0.0.0', port: int=24282) -> int:",
              "docstring": "Runs the dashboard on the given host and port and returns the port number.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "host",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "port",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 146
            },
            {
              "name": "run_in_thread",
              "module": "serena.dashboard",
              "signature": "def run_in_thread(self) -> tuple[threading.Thread, int]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "tuple[threading.Thread, int]",
              "line_number": 158
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 38,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'serena.constants', 'serena.util.logging', 'collections.abc', 'pydantic', 'os', 'socket', 'flask', 'serena.analytics', 'threading', 'sensai.util'}"
    },
    "serena.code_editor": {
      "name": "serena.code_editor",
      "path": "src/serena/code_editor.py",
      "docstring": null,
      "imports": [
        "json",
        "logging",
        "os",
        "from abc",
        "from collections.abc",
        "from contextlib",
        "from typing",
        "from serena.symbol",
        "from solidlsp",
        "from solidlsp.ls",
        "from solidlsp.ls_utils",
        "from project",
        "from tools.jetbrains_plugin_client",
        "from agent"
      ],
      "classes": [
        {
          "name": "CodeEditor",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.code_editor",
              "signature": "def __init__(self, project_root: str, agent: Optional['SerenaAgent']=None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "Optional['SerenaAgent']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 26
            },
            {
              "name": "_open_file_context",
              "module": "serena.code_editor",
              "signature": "@contextmanager",
              "docstring": "Context manager for opening a file",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Iterator['CodeEditor.EditedFile']",
              "line_number": 46
            },
            {
              "name": "_edited_file_context",
              "module": "serena.code_editor",
              "signature": "@contextmanager",
              "docstring": "Context manager for editing a file.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Iterator['CodeEditor.EditedFile']",
              "line_number": 53
            },
            {
              "name": "_find_unique_symbol",
              "module": "serena.code_editor",
              "signature": "@abstractmethod",
              "docstring": "Finds the unique symbol with the given name in the given file.\nIf no such symbol exists, raises a ValueError.\n\n:param name_path: the name path\n:param relative_file_path: the relative path of the file in which to search for the symbol.\n:return: the unique symbol",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "TSymbol",
              "line_number": 68
            },
            {
              "name": "replace_body",
              "module": "serena.code_editor",
              "signature": "def replace_body(self, name_path: str, relative_file_path: str, body: str) -> None:",
              "docstring": "Replaces the body of the symbol with the given name_path in the given file.\n\n:param name_path: the name path of the symbol to replace.\n:param relative_file_path: the relative path of the file in which the symbol is defined.\n:param body: the new body",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 78
            },
            {
              "name": "_count_leading_newlines",
              "module": "serena.code_editor",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "text",
                  "annotation": "Iterable",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 99
            },
            {
              "name": "_count_trailing_newlines",
              "module": "serena.code_editor",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "Reversible",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 111
            },
            {
              "name": "insert_after_symbol",
              "module": "serena.code_editor",
              "signature": "def insert_after_symbol(self, name_path: str, relative_file_path: str, body: str) -> None:",
              "docstring": "Inserts content after the symbol with the given name in the given file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 114
            },
            {
              "name": "insert_before_symbol",
              "module": "serena.code_editor",
              "signature": "def insert_before_symbol(self, name_path: str, relative_file_path: str, body: str) -> None:",
              "docstring": "Inserts content before the symbol with the given name in the given file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 148
            },
            {
              "name": "insert_at_line",
              "module": "serena.code_editor",
              "signature": "def insert_at_line(self, relative_path: str, line: int, content: str) -> None:",
              "docstring": "Inserts content at the given line in the given file.\n\n:param relative_path: the relative path of the file in which to insert content\n:param line: the 0-based index of the line to insert content at\n:param content: the content to insert",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 176
            },
            {
              "name": "delete_lines",
              "module": "serena.code_editor",
              "signature": "def delete_lines(self, relative_path: str, start_line: int, end_line: int) -> None:",
              "docstring": "Deletes lines in the given file.\n\n:param relative_path: the relative path of the file in which to delete lines\n:param start_line: the 0-based index of the first line to delete (inclusive)\n:param end_line: the 0-based index of the last line to delete (inclusive)",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_line",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 187
            },
            {
              "name": "delete_symbol",
              "module": "serena.code_editor",
              "signature": "def delete_symbol(self, name_path: str, relative_file_path: str) -> None:",
              "docstring": "Deletes the symbol with the given name in the given file.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 203
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 25,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LanguageServerCodeEditor",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.code_editor",
              "signature": "def __init__(self, symbol_retriever: LanguageServerSymbolRetriever, agent: Optional['SerenaAgent']=None):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "symbol_retriever",
                  "annotation": "LanguageServerSymbolRetriever",
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "Optional['SerenaAgent']",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 215
            },
            {
              "name": "_lang_server",
              "module": "serena.code_editor",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SolidLanguageServer",
              "line_number": 220
            },
            {
              "name": "_open_file_context",
              "module": "serena.code_editor",
              "signature": "@contextmanager",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Iterator['CodeEditor.EditedFile']",
              "line_number": 239
            },
            {
              "name": "_get_code_file_content",
              "module": "serena.code_editor",
              "signature": "def _get_code_file_content(self, relative_path: str) -> str:",
              "docstring": "Get the content of a file using the language server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 243
            },
            {
              "name": "_find_unique_symbol",
              "module": "serena.code_editor",
              "signature": "def _find_unique_symbol(self, name_path: str, relative_file_path: str) -> LanguageServerSymbol:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "LanguageServerSymbol",
              "line_number": 247
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 214,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JetBrainsCodeEditor",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.code_editor",
              "signature": "def __init__(self, project: Project, agent: Optional['SerenaAgent']=None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "Project",
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "Optional['SerenaAgent']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 260
            },
            {
              "name": "_open_file_context",
              "module": "serena.code_editor",
              "signature": "@contextmanager",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "contextmanager"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Iterator['CodeEditor.EditedFile']",
              "line_number": 283
            },
            {
              "name": "_find_unique_symbol",
              "module": "serena.code_editor",
              "signature": "def _find_unique_symbol(self, name_path: str, relative_file_path: str) -> JetBrainsSymbol:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "JetBrainsSymbol",
              "line_number": 286
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 259,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "EditedFile",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "get_contents",
              "module": "serena.code_editor",
              "signature": "@abstractmethod",
              "docstring": ":return: the contents of the file.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 32
            },
            {
              "name": "delete_text_between_positions",
              "module": "serena.code_editor",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "start_pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "end_pos",
                  "annotation": "PositionInFile",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 38
            },
            {
              "name": "insert_text_at_position",
              "module": "serena.code_editor",
              "signature": "@abstractmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "abstractmethod"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 42
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 30,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "EditedFile",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [
            "CodeEditor.EditedFile"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.code_editor",
              "signature": "def __init__(self, lang_server: SolidLanguageServer, relative_path: str, file_buffer: LSPFileBuffer):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lang_server",
                  "annotation": "SolidLanguageServer",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "file_buffer",
                  "annotation": "LSPFileBuffer",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 224
            },
            {
              "name": "get_contents",
              "module": "serena.code_editor",
              "signature": "def get_contents(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 229
            },
            {
              "name": "delete_text_between_positions",
              "module": "serena.code_editor",
              "signature": "def delete_text_between_positions(self, start_pos: PositionInFile, end_pos: PositionInFile) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "start_pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "end_pos",
                  "annotation": "PositionInFile",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 232
            },
            {
              "name": "insert_text_at_position",
              "module": "serena.code_editor",
              "signature": "def insert_text_at_position(self, pos: PositionInFile, text: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 235
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 223,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "EditedFile",
          "module": "serena.code_editor",
          "docstring": null,
          "bases": [
            "CodeEditor.EditedFile"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.code_editor",
              "signature": "def __init__(self, relative_path: str, project: Project):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "Project",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 265
            },
            {
              "name": "get_contents",
              "module": "serena.code_editor",
              "signature": "def get_contents(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 271
            },
            {
              "name": "delete_text_between_positions",
              "module": "serena.code_editor",
              "signature": "def delete_text_between_positions(self, start_pos: PositionInFile, end_pos: PositionInFile) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "start_pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "end_pos",
                  "annotation": "PositionInFile",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 274
            },
            {
              "name": "insert_text_at_position",
              "module": "serena.code_editor",
              "signature": "def insert_text_at_position(self, pos: PositionInFile, text: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "pos",
                  "annotation": "PositionInFile",
                  "default": null
                },
                {
                  "name": "text",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 279
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 264,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'agent', 'solidlsp.ls', 'collections.abc', 'os', 'solidlsp', 'contextlib', 'serena.symbol', 'project', 'json', 'logging', 'abc', 'solidlsp.ls_utils', 'tools.jetbrains_plugin_client'}"
    },
    "serena.gui_log_viewer": {
      "name": "serena.gui_log_viewer",
      "path": "src/serena/gui_log_viewer.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "queue",
        "sys",
        "threading",
        "tkinter",
        "traceback",
        "from enum",
        "from pathlib",
        "from typing",
        "from serena",
        "from serena.util.logging",
        "ctypes"
      ],
      "classes": [
        {
          "name": "LogLevel",
          "module": "serena.gui_log_viewer",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 19,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GuiLogViewer",
          "module": "serena.gui_log_viewer",
          "docstring": "A class that creates a Tkinter GUI for displaying log messages in a separate thread.\nThe log viewer supports coloring based on log levels (DEBUG, INFO, WARNING, ERROR).\nIt can also highlight tool names in boldface when they appear in log messages.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.gui_log_viewer",
              "signature": "def __init__(self, mode: Literal['dashboard', 'error'], title='Log Viewer', memory_log_handler: MemoryLogHandler | None=None, width=800, height=600):",
              "docstring": ":param mode: the mode; if \"dashboard\", run a dashboard with logs and some control options; if \"error\", run\n    a simple error log viewer (for fatal exceptions)\n:param title: the window title\n:param memory_log_handler: an optional log handler from which to obtain log messages; If not provided,\n    must pass the instance to a `GuiLogViewerHandler` to add log messages.\n:param width: the initial window width\n:param height: the initial window height",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "mode",
                  "annotation": "Literal['dashboard', 'error']",
                  "default": null
                },
                {
                  "name": "title",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "memory_log_handler",
                  "annotation": "MemoryLogHandler | None",
                  "default": null
                },
                {
                  "name": "width",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "height",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 34
            },
            {
              "name": "start",
              "module": "serena.gui_log_viewer",
              "signature": "def start(self):",
              "docstring": "Start the log viewer in a separate thread.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 74
            },
            {
              "name": "stop",
              "module": "serena.gui_log_viewer",
              "signature": "def stop(self):",
              "docstring": "Stop the log viewer.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 83
            },
            {
              "name": "set_tool_names",
              "module": "serena.gui_log_viewer",
              "signature": "def set_tool_names(self, tool_names):",
              "docstring": "Set or update the list of tool names to be highlighted in log messages.\n\nArgs:\n    tool_names (list): A list of tool name strings to highlight",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_names",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 91
            },
            {
              "name": "add_log",
              "module": "serena.gui_log_viewer",
              "signature": "def add_log(self, message):",
              "docstring": "Add a log message to the viewer.\n\nArgs:\n    message (str): The log message to display",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 101
            },
            {
              "name": "_determine_log_level",
              "module": "serena.gui_log_viewer",
              "signature": "def _determine_log_level(self, message):",
              "docstring": "Determine the log level from the message.\n\nArgs:\n    message (str): The log message\n\nReturns:\n    LogLevel: The determined log level",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 111
            },
            {
              "name": "_process_queue",
              "module": "serena.gui_log_viewer",
              "signature": "def _process_queue(self):",
              "docstring": "Process messages from the queue and update the text widget.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 134
            },
            {
              "name": "run_gui",
              "module": "serena.gui_log_viewer",
              "signature": "def run_gui(self):",
              "docstring": "Run the GUI",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 213
            },
            {
              "name": "_shutdown_server",
              "module": "serena.gui_log_viewer",
              "signature": "def _shutdown_server(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 310
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 27,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GuiLogViewerHandler",
          "module": "serena.gui_log_viewer",
          "docstring": "A logging handler that sends log records to a ThreadedLogViewer instance.\nThis handler can be integrated with Python's standard logging module\nto direct log entries to a GUI log viewer.",
          "bases": [
            "logging.Handler"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.gui_log_viewer",
              "signature": "def __init__(self, log_viewer: GuiLogViewer, level=logging.NOTSET, format_string: str | None='%(levelname)-5s %(asctime)-15s %(name)s:%(funcName)s:%(lineno)d - %(message)s'):",
              "docstring": "Initialize the handler with a ThreadedLogViewer instance.\n\nArgs:\n    log_viewer: A ThreadedLogViewer instance that will display the logs\n    level: The logging level (default: NOTSET which captures all logs)\n    format_string: the format string",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "log_viewer",
                  "annotation": "GuiLogViewer",
                  "default": null
                },
                {
                  "name": "level",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "format_string",
                  "annotation": "str | None",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 324
            },
            {
              "name": "is_instance_registered",
              "module": "serena.gui_log_viewer",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 348
            },
            {
              "name": "emit",
              "module": "serena.gui_log_viewer",
              "signature": "def emit(self, record):",
              "docstring": "Emit a log record to the ThreadedLogViewer.\n\nArgs:\n    record: The log record to emit",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "record",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 354
            },
            {
              "name": "close",
              "module": "serena.gui_log_viewer",
              "signature": "def close(self):",
              "docstring": "Close the handler and optionally stop the log viewer.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 378
            },
            {
              "name": "stop_viewer",
              "module": "serena.gui_log_viewer",
              "signature": "def stop_viewer(self):",
              "docstring": "Explicitly stop the associated log viewer.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 386
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 317,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "show_fatal_exception",
          "module": "serena.gui_log_viewer",
          "signature": "def show_fatal_exception(e: Exception):",
          "docstring": "Makes sure the given exception is shown in the GUI log viewer,\neither an existing instance or a new one.\n\n:param e: the exception to display",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "e",
              "annotation": "Exception",
              "default": null
            }
          ],
          "return_annotation": null,
          "line_number": 394
        }
      ],
      "constants": [
        "DEBUG",
        "INFO",
        "WARNING",
        "ERROR",
        "DEFAULT"
      ],
      "dependencies": "{'typing', 'sys', 'serena.util.logging', 'ctypes', 'os', 'serena', 'queue', 'logging', 'threading', 'enum', 'tkinter', 'pathlib', 'traceback'}"
    },
    "serena": {
      "name": "serena",
      "path": "src/serena/__init__.py",
      "docstring": null,
      "imports": [
        "logging",
        "from serena.util.git"
      ],
      "classes": [],
      "functions": [
        {
          "name": "serena_version",
          "module": "serena",
          "signature": "def serena_version() -> str:",
          "docstring": ":return: the version of the package, including git status if available.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "str",
          "line_number": 8
        }
      ],
      "constants": [],
      "dependencies": "{'logging', 'serena.util.git'}"
    },
    "serena.constants": {
      "name": "serena.constants",
      "path": "src/serena/constants.py",
      "docstring": null,
      "imports": [
        "from pathlib"
      ],
      "classes": [],
      "functions": [],
      "constants": [
        "SERENA_MANAGED_DIR_NAME",
        "SERENA_MANAGED_DIR_IN_HOME",
        "REPO_ROOT",
        "PROMPT_TEMPLATES_DIR_INTERNAL",
        "PROMPT_TEMPLATES_DIR_IN_USER_HOME",
        "SERENAS_OWN_CONTEXT_YAMLS_DIR",
        "USER_CONTEXT_YAMLS_DIR",
        "SERENAS_OWN_MODE_YAMLS_DIR",
        "USER_MODE_YAMLS_DIR",
        "INTERNAL_MODE_YAMLS_DIR",
        "SERENA_DASHBOARD_DIR",
        "SERENA_ICON_DIR",
        "DEFAULT_ENCODING",
        "DEFAULT_CONTEXT",
        "DEFAULT_MODES",
        "PROJECT_TEMPLATE_FILE",
        "SELENA_CONFIG_TEMPLATE_FILE",
        "SERENA_LOG_FORMAT"
      ],
      "dependencies": "{'pathlib'}"
    },
    "serena.util.exception": {
      "name": "serena.util.exception",
      "path": "src/serena/util/exception.py",
      "docstring": null,
      "imports": [
        "os",
        "sys",
        "from serena.agent",
        "from serena.gui_log_viewer"
      ],
      "classes": [],
      "functions": [
        {
          "name": "is_headless_environment",
          "module": "serena.util.exception",
          "signature": "def is_headless_environment() -> bool:",
          "docstring": "Detect if we're running in a headless environment where GUI operations would fail.\n\nReturns True if:\n- No DISPLAY variable on Linux/Unix\n- Running in SSH session\n- Running in WSL without X server\n- Running in Docker container",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "bool",
          "line_number": 7
        },
        {
          "name": "show_fatal_exception_safe",
          "module": "serena.util.exception",
          "signature": "def show_fatal_exception_safe(e: Exception) -> None:",
          "docstring": "Shows the given exception in the GUI log viewer on the main thread and ensures that the exception is logged or at\nleast printed to stderr.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "e",
              "annotation": "Exception",
              "default": null
            }
          ],
          "return_annotation": "None",
          "line_number": 43
        }
      ],
      "constants": [],
      "dependencies": "{'serena.gui_log_viewer', 'os', 'sys', 'serena.agent'}"
    },
    "serena.util.logging": {
      "name": "serena.util.logging",
      "path": "src/serena/util/logging.py",
      "docstring": null,
      "imports": [
        "queue",
        "threading",
        "from collections.abc",
        "from sensai.util",
        "from serena.constants"
      ],
      "classes": [
        {
          "name": "MemoryLogHandler",
          "module": "serena.util.logging",
          "docstring": null,
          "bases": [
            "logging.Handler"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.util.logging",
              "signature": "def __init__(self, level: int=logging.NOTSET) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "level",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 11
            },
            {
              "name": "add_emit_callback",
              "module": "serena.util.logging",
              "signature": "def add_emit_callback(self, callback: Callable[[str], None]) -> None:",
              "docstring": "Adds a callback that will be called with each log message.\nThe callback should accept a single string argument (the log message).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "callback",
                  "annotation": "Callable[[str], None]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 23
            },
            {
              "name": "emit",
              "module": "serena.util.logging",
              "signature": "def emit(self, record: logging.LogRecord) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "record",
                  "annotation": "logging.LogRecord",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 30
            },
            {
              "name": "_process_queue",
              "module": "serena.util.logging",
              "signature": "def _process_queue(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 34
            },
            {
              "name": "get_log_messages",
              "module": "serena.util.logging",
              "signature": "def get_log_messages(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 48
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 10,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LogBuffer",
          "module": "serena.util.logging",
          "docstring": "A thread-safe buffer for storing log messages.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.util.logging",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 57
            },
            {
              "name": "append",
              "module": "serena.util.logging",
              "signature": "def append(self, msg: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "msg",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 61
            },
            {
              "name": "get_log_messages",
              "module": "serena.util.logging",
              "signature": "def get_log_messages(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 65
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 52,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'serena.constants', 'collections.abc', 'queue', 'threading', 'sensai.util'}"
    },
    "serena.util.inspection": {
      "name": "serena.util.inspection",
      "path": "src/serena/util/inspection.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "from collections.abc",
        "from typing",
        "from serena.util.file_system",
        "from solidlsp.ls_config"
      ],
      "classes": [],
      "functions": [
        {
          "name": "iter_subclasses",
          "module": "serena.util.inspection",
          "signature": "def iter_subclasses(cls: type[T], recursive: bool=True) -> Generator[type[T], None, None]:",
          "docstring": "Iterate over all subclasses of a class. If recursive is True, also iterate over all subclasses of all subclasses.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "cls",
              "annotation": "type[T]",
              "default": null
            },
            {
              "name": "recursive",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "Generator[type[T], None, None]",
          "line_number": 14
        },
        {
          "name": "determine_programming_language_composition",
          "module": "serena.util.inspection",
          "signature": "def determine_programming_language_composition(repo_path: str) -> dict[str, float]:",
          "docstring": "Determine the programming language composition of a repository.\n\n:param repo_path: Path to the repository to analyze\n\n:return: Dictionary mapping language names to percentages of files matching each language",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "repo_path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "dict[str, float]",
          "line_number": 22
        }
      ],
      "constants": [
        "T"
      ],
      "dependencies": "{'typing', 'serena.util.file_system', 'collections.abc', 'os', 'logging', 'solidlsp.ls_config'}"
    },
    "serena.util.class_decorators": {
      "name": "serena.util.class_decorators",
      "path": "src/serena/util/class_decorators.py",
      "docstring": null,
      "imports": [
        "from typing"
      ],
      "classes": [],
      "functions": [
        {
          "name": "singleton",
          "module": "serena.util.class_decorators",
          "signature": "def singleton(cls: type[Any]) -> Any:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "cls",
              "annotation": "type[Any]",
              "default": null
            }
          ],
          "return_annotation": "Any",
          "line_number": 6
        }
      ],
      "constants": [],
      "dependencies": "{'typing'}"
    },
    "serena.util.shell": {
      "name": "serena.util.shell",
      "path": "src/serena/util/shell.py",
      "docstring": null,
      "imports": [
        "os",
        "platform",
        "subprocess",
        "from pydantic"
      ],
      "classes": [
        {
          "name": "ShellCommandResult",
          "module": "serena.util.shell",
          "docstring": null,
          "bases": [
            "BaseModel"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 8,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "execute_shell_command",
          "module": "serena.util.shell",
          "signature": "def execute_shell_command(command: str, cwd: str | None=None, capture_stderr: bool=False) -> ShellCommandResult:",
          "docstring": "Execute a shell command and return the output.\n\n:param command: The command to execute.\n:param cwd: The working directory to execute the command in. If None, the current working directory will be used.\n:param capture_stderr: Whether to capture the stderr output.\n:return: The output of the command.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "command",
              "annotation": "str",
              "default": null
            },
            {
              "name": "cwd",
              "annotation": "str | None",
              "default": null
            },
            {
              "name": "capture_stderr",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "ShellCommandResult",
          "line_number": 15
        },
        {
          "name": "subprocess_check_output",
          "module": "serena.util.shell",
          "signature": "def subprocess_check_output(args: list[str], encoding: str='utf-8', strip: bool=True, timeout: float | None=None) -> str:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "args",
              "annotation": "list[str]",
              "default": null
            },
            {
              "name": "encoding",
              "annotation": "str",
              "default": null
            },
            {
              "name": "strip",
              "annotation": "bool",
              "default": null
            },
            {
              "name": "timeout",
              "annotation": "float | None",
              "default": null
            }
          ],
          "return_annotation": "str",
          "line_number": 45
        }
      ],
      "constants": [],
      "dependencies": "{'pydantic', 'os', 'subprocess', 'platform'}"
    },
    "serena.util.general": {
      "name": "serena.util.general",
      "path": "src/serena/util/general.py",
      "docstring": null,
      "imports": [
        "os",
        "from typing",
        "from ruamel.yaml",
        "from ruamel.yaml.comments"
      ],
      "classes": [],
      "functions": [
        {
          "name": "_create_YAML",
          "module": "serena.util.general",
          "signature": "def _create_YAML(preserve_comments: bool=False) -> YAML:",
          "docstring": "Creates a YAML that can load/save with comments if preserve_comments is True.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "preserve_comments",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "YAML",
          "line_number": 8
        },
        {
          "name": "load_yaml",
          "module": "serena.util.general",
          "signature": "@overload",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [
            "overload"
          ],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "preserve_comments",
              "annotation": "Literal[False]",
              "default": null
            }
          ],
          "return_annotation": "dict",
          "line_number": 19
        },
        {
          "name": "load_yaml",
          "module": "serena.util.general",
          "signature": "@overload",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [
            "overload"
          ],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "preserve_comments",
              "annotation": "Literal[True]",
              "default": null
            }
          ],
          "return_annotation": "CommentedMap",
          "line_number": 21
        },
        {
          "name": "load_yaml",
          "module": "serena.util.general",
          "signature": "def load_yaml(path: str, preserve_comments: bool=False) -> dict | CommentedMap:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "preserve_comments",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "dict | CommentedMap",
          "line_number": 22
        },
        {
          "name": "save_yaml",
          "module": "serena.util.general",
          "signature": "def save_yaml(path: str, data: dict | CommentedMap, preserve_comments: bool=False) -> None:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "data",
              "annotation": "dict | CommentedMap",
              "default": null
            },
            {
              "name": "preserve_comments",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "None",
          "line_number": 28
        }
      ],
      "constants": [],
      "dependencies": "{'ruamel.yaml', 'os', 'typing', 'ruamel.yaml.comments'}"
    },
    "serena.util.file_system": {
      "name": "serena.util.file_system",
      "path": "src/serena/util/file_system.py",
      "docstring": null,
      "imports": [
        "glob",
        "logging",
        "os",
        "from collections.abc",
        "from dataclasses",
        "from pathlib",
        "from typing",
        "pathspec",
        "from pathspec"
      ],
      "classes": [
        {
          "name": "ScanResult",
          "module": "serena.util.file_system",
          "docstring": "Result of scanning a directory.",
          "bases": [
            "NamedTuple"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 15,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GitignoreSpec",
          "module": "serena.util.file_system",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "module": "serena.util.file_system",
              "signature": "def __post_init__(self) -> None:",
              "docstring": "Initialize the PathSpec from patterns.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 97
            },
            {
              "name": "matches",
              "module": "serena.util.file_system",
              "signature": "def matches(self, relative_path: str) -> bool:",
              "docstring": "Check if the given path matches any pattern in this gitignore spec.\n\n:param relative_path: Path to check (should be relative to repo root)\n:return: True if path matches any pattern",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 101
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 87,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "GitignoreParser",
          "module": "serena.util.file_system",
          "docstring": "Parser for gitignore files in a repository.\n\nThis class handles parsing multiple gitignore files throughout a repository\nand provides methods to check if paths should be ignored.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.util.file_system",
              "signature": "def __init__(self, repo_root: str) -> None:",
              "docstring": "Initialize the parser for a repository.\n\n:param repo_root: Root directory of the repository",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "repo_root",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 119
            },
            {
              "name": "_load_gitignore_files",
              "module": "serena.util.file_system",
              "signature": "def _load_gitignore_files(self) -> None:",
              "docstring": "Load all gitignore files from the repository.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 129
            },
            {
              "name": "_find_gitignore_files",
              "module": "serena.util.file_system",
              "signature": "def _find_gitignore_files(self) -> list[str]:",
              "docstring": "Find all .gitignore files in the repository.\n\n:return: List of absolute paths to .gitignore files",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 138
            },
            {
              "name": "_create_ignore_spec",
              "module": "serena.util.file_system",
              "signature": "def _create_ignore_spec(self, gitignore_file_path: str) -> GitignoreSpec:",
              "docstring": "Create a GitignoreSpec from a single gitignore file.\n\n:param gitignore_file_path: Path to the .gitignore file\n:return: GitignoreSpec object for the gitignore patterns",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "gitignore_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "GitignoreSpec",
              "line_number": 146
            },
            {
              "name": "_parse_gitignore_content",
              "module": "serena.util.file_system",
              "signature": "def _parse_gitignore_content(self, content: str, gitignore_dir: str) -> list[str]:",
              "docstring": "Parse gitignore content and adjust patterns based on the gitignore file location.\n\n:param content: Content of the .gitignore file\n:param gitignore_dir: Directory containing the .gitignore file (absolute path)\n:return: List of adjusted patterns",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "gitignore_dir",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 165
            },
            {
              "name": "should_ignore",
              "module": "serena.util.file_system",
              "signature": "def should_ignore(self, path: str) -> bool:",
              "docstring": "Check if a path should be ignored based on the gitignore rules.\n\n:param path: Path to check (absolute or relative to repo_root)\n:return: True if the path should be ignored, False otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 241
            },
            {
              "name": "get_ignore_specs",
              "module": "serena.util.file_system",
              "signature": "def get_ignore_specs(self) -> list[GitignoreSpec]:",
              "docstring": "Get all loaded gitignore specs.\n\n:return: List of GitignoreSpec objects",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[GitignoreSpec]",
              "line_number": 280
            },
            {
              "name": "reload",
              "module": "serena.util.file_system",
              "signature": "def reload(self) -> None:",
              "docstring": "Reload all gitignore files from the repository.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 288
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 111,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "scan_directory",
          "module": "serena.util.file_system",
          "signature": "def scan_directory(path: str, recursive: bool=False, relative_to: str | None=None, is_ignored_dir: Callable[[str], bool]=lambda x: False, is_ignored_file: Callable[[str], bool]=lambda x: False) -> ScanResult:",
          "docstring": ":param path: the path to scan\n:param recursive: whether to recursively scan subdirectories\n:param relative_to: the path to which the results should be relative to; if None, provide absolute paths\n:param is_ignored_dir: a function with which to determine whether the given directory (abs. path) shall be ignored\n:param is_ignored_file: a function with which to determine whether the given file (abs. path) shall be ignored\n:return: the list of directories and files",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "recursive",
              "annotation": "bool",
              "default": null
            },
            {
              "name": "relative_to",
              "annotation": "str | None",
              "default": null
            },
            {
              "name": "is_ignored_dir",
              "annotation": "Callable[[str], bool]",
              "default": null
            },
            {
              "name": "is_ignored_file",
              "annotation": "Callable[[str], bool]",
              "default": null
            }
          ],
          "return_annotation": "ScanResult",
          "line_number": 22
        },
        {
          "name": "find_all_non_ignored_files",
          "module": "serena.util.file_system",
          "signature": "def find_all_non_ignored_files(repo_root: str) -> list[str]:",
          "docstring": "Find all non-ignored files in the repository, respecting all gitignore files in the repository.\n\n:param repo_root: The root directory of the repository\n:return: A list of all non-ignored files in the repository",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "repo_root",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "list[str]",
          "line_number": 72
        },
        {
          "name": "match_path",
          "module": "serena.util.file_system",
          "signature": "def match_path(relative_path: str, path_spec: PathSpec, root_path: str='') -> bool:",
          "docstring": "Match a relative path against a given pathspec. Just pathspec.match_file() is not enough,\nwe need to do some massaging to fix issues with pathspec matching.\n\n:param relative_path: relative path to match against the pathspec\n:param path_spec: the pathspec to match against\n:param root_path: the root path from which the relative path is derived\n:return:",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "relative_path",
              "annotation": "str",
              "default": null
            },
            {
              "name": "path_spec",
              "annotation": "PathSpec",
              "default": null
            },
            {
              "name": "root_path",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "bool",
          "line_number": 294
        }
      ],
      "constants": [],
      "dependencies": "{'typing', 'dataclasses', 'collections.abc', 'pathspec', 'os', 'glob', 'logging', 'pathlib'}"
    },
    "serena.util.thread": {
      "name": "serena.util.thread",
      "path": "src/serena/util/thread.py",
      "docstring": null,
      "imports": [
        "threading",
        "from collections.abc",
        "from enum",
        "from typing",
        "from sensai.util.string"
      ],
      "classes": [
        {
          "name": "TimeoutException",
          "module": "serena.util.thread",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.util.thread",
              "signature": "def __init__(self, message: str, timeout: float) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "float",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 10
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 9,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecutionResult",
          "module": "serena.util.thread",
          "docstring": null,
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.util.thread",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 25
            },
            {
              "name": "set_result_value",
              "module": "serena.util.thread",
              "signature": "def set_result_value(self, value: T) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "value",
                  "annotation": "T",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 30
            },
            {
              "name": "set_timed_out",
              "module": "serena.util.thread",
              "signature": "def set_timed_out(self, exception: TimeoutException) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exception",
                  "annotation": "TimeoutException",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 34
            },
            {
              "name": "set_exception",
              "module": "serena.util.thread",
              "signature": "def set_exception(self, exception: Exception) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exception",
                  "annotation": "Exception",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 38
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 18,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Status",
          "module": "serena.util.thread",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 20,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "execute_with_timeout",
          "module": "serena.util.thread",
          "signature": "def execute_with_timeout(func: Callable[[], T], timeout: float, function_name: str) -> ExecutionResult[T]:",
          "docstring": "Executes the given function with a timeout\n\n:param func: the function to execute\n:param timeout: the timeout in seconds\n:param function_name: the name of the function (for error messages)\n:returns: the execution result",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "func",
              "annotation": "Callable[[], T]",
              "default": null
            },
            {
              "name": "timeout",
              "annotation": "float",
              "default": null
            },
            {
              "name": "function_name",
              "annotation": "str",
              "default": null
            }
          ],
          "return_annotation": "ExecutionResult[T]",
          "line_number": 43
        }
      ],
      "constants": [
        "T",
        "SUCCESS",
        "TIMEOUT",
        "EXCEPTION"
      ],
      "dependencies": "{'typing', 'collections.abc', 'threading', 'enum', 'sensai.util.string'}"
    },
    "serena.util.git": {
      "name": "serena.util.git",
      "path": "src/serena/util/git.py",
      "docstring": null,
      "imports": [
        "logging",
        "from sensai.util.git",
        "from shell"
      ],
      "classes": [],
      "functions": [
        {
          "name": "get_git_status",
          "module": "serena.util.git",
          "signature": "def get_git_status() -> GitStatus | None:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "GitStatus | None",
          "line_number": 10
        }
      ],
      "constants": [],
      "dependencies": "{'logging', 'shell', 'sensai.util.git'}"
    },
    "serena.config": {
      "name": "serena.config",
      "path": "src/serena/config/__init__.py",
      "docstring": null,
      "imports": [],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "set()"
    },
    "serena.config.serena_config": {
      "name": "serena.config.serena_config",
      "path": "src/serena/config/serena_config.py",
      "docstring": "The Serena Model Context Protocol (MCP) Server",
      "imports": [
        "os",
        "shutil",
        "from collections.abc",
        "from copy",
        "from dataclasses",
        "from datetime",
        "from functools",
        "from pathlib",
        "from typing",
        "yaml",
        "from ruamel.yaml.comments",
        "from sensai.util",
        "from sensai.util.logging",
        "from sensai.util.string",
        "from serena.constants",
        "from serena.util.general",
        "from serena.util.inspection",
        "from solidlsp.ls_config",
        "from analytics",
        "from util.class_decorators",
        "from project",
        "from serena.tools",
        "from serena.tools",
        "from serena.tools",
        "from project",
        "from project"
      ],
      "classes": [
        {
          "name": "SerenaPaths",
          "module": "serena.config.serena_config",
          "docstring": "Provides paths to various Serena-related directories and files.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.config.serena_config",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 50
            },
            {
              "name": "get_next_log_file_path",
              "module": "serena.config.serena_config",
              "signature": "def get_next_log_file_path(self, prefix: str) -> str:",
              "docstring": ":param prefix: the filename prefix indicating the type of the log file\n:return: the full path to the log file to use",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "prefix",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 56
            }
          ],
          "class_variables": [],
          "decorators": [
            "singleton"
          ],
          "line_number": 45,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolSet",
          "module": "serena.config.serena_config",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.config.serena_config",
              "signature": "def __init__(self, tool_names: set[str]) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_names",
                  "annotation": "set[str]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 69
            },
            {
              "name": "default",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": ":return: the default tool set, which contains all tools that are enabled by default",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'ToolSet'",
              "line_number": 73
            },
            {
              "name": "apply",
              "module": "serena.config.serena_config",
              "signature": "def apply(self, *tool_inclusion_definitions: 'ToolInclusionDefinition') -> 'ToolSet':",
              "docstring": ":param tool_inclusion_definitions: the definitions to apply\n:return: a new tool set with the definitions applied",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'ToolSet'",
              "line_number": 81
            },
            {
              "name": "without_editing_tools",
              "module": "serena.config.serena_config",
              "signature": "def without_editing_tools(self) -> 'ToolSet':",
              "docstring": ":return: a new tool set that excludes all tools that can edit",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'ToolSet'",
              "line_number": 111
            },
            {
              "name": "get_tool_names",
              "module": "serena.config.serena_config",
              "signature": "def get_tool_names(self) -> set[str]:",
              "docstring": "Returns the names of the tools that are currently included in the tool set.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "set[str]",
              "line_number": 124
            },
            {
              "name": "includes_name",
              "module": "serena.config.serena_config",
              "signature": "def includes_name(self, tool_name: str) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 130
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 68,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolInclusionDefinition",
          "module": "serena.config.serena_config",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 135,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "SerenaConfigError",
          "module": "serena.config.serena_config",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 140,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ProjectConfig",
          "module": "serena.config.serena_config",
          "docstring": null,
          "bases": [
            "ToolInclusionDefinition",
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "_tostring_includes",
              "module": "serena.config.serena_config",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 173
            },
            {
              "name": "autogenerate",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Autogenerate a project configuration for a given project root.\n\n:param project_root: the path to the project root\n:param project_name: the name of the project; if None, the name of the project will be the name of the directory\n    containing the project\n:param project_language: the programming language of the project; if None, it will be determined automatically\n:param save_to_disk: whether to save the project configuration to disk\n:return: the project configuration",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str | Path",
                  "default": null
                },
                {
                  "name": "project_name",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "project_language",
                  "annotation": "Language | None",
                  "default": null
                },
                {
                  "name": "save_to_disk",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 177
            },
            {
              "name": "rel_path_to_project_yml",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 220
            },
            {
              "name": "_from_dict",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Create a ProjectConfig instance from a configuration dictionary",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "data",
                  "annotation": "dict[str, Any]",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 224
            },
            {
              "name": "load",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Load a ProjectConfig instance from the path to the project root.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "Path | str",
                  "default": null
                },
                {
                  "name": "autogenerate",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 251
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 162,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "RegisteredProject",
          "module": "serena.config.serena_config",
          "docstring": null,
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.config.serena_config",
              "signature": "def __init__(self, project_root: str, project_config: 'ProjectConfig', project_instance: Optional['Project']=None) -> None:",
              "docstring": "Represents a registered project in the Serena configuration.\n\n:param project_root: the root directory of the project\n:param project_config: the configuration of the project",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "project_config",
                  "annotation": "'ProjectConfig'",
                  "default": null
                },
                {
                  "name": "project_instance",
                  "annotation": "Optional['Project']",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 270
            },
            {
              "name": "_tostring_exclude_private",
              "module": "serena.config.serena_config",
              "signature": "def _tostring_exclude_private(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 281
            },
            {
              "name": "project_name",
              "module": "serena.config.serena_config",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 285
            },
            {
              "name": "from_project_instance",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_instance",
                  "annotation": "'Project'",
                  "default": null
                }
              ],
              "return_annotation": "'RegisteredProject'",
              "line_number": 289
            },
            {
              "name": "matches_root_path",
              "module": "serena.config.serena_config",
              "signature": "def matches_root_path(self, path: str | Path) -> bool:",
              "docstring": "Check if the given path matches the project root path.\n\n:param path: the path to check\n:return: True if the path matches the project root, False otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 296
            },
            {
              "name": "get_project_instance",
              "module": "serena.config.serena_config",
              "signature": "def get_project_instance(self) -> 'Project':",
              "docstring": "Returns the project instance for this registered project, loading it if necessary.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'Project'",
              "line_number": 305
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 269,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SerenaConfig",
          "module": "serena.config.serena_config",
          "docstring": "Holds the Serena agent configuration, which is typically loaded from a YAML configuration file\n(when instantiated via :method:`from_config_file`), which is updated when projects are added or removed.\nFor testing purposes, it can also be instantiated directly with the desired parameters.",
          "bases": [
            "ToolInclusionDefinition",
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "_tostring_includes",
              "module": "serena.config.serena_config",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 357
            },
            {
              "name": "generate_config_file",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Generates a Serena configuration file at the specified path from the template file.\n\n:param config_file_path: the path where the configuration file should be generated",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config_file_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 361
            },
            {
              "name": "_determine_config_file_path",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": ":return: the location where the Serena configuration file is stored/should be stored",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 372
            },
            {
              "name": "from_config_file",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Static constructor to create SerenaConfig from the configuration file",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "generate_if_missing",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "'SerenaConfig'",
              "line_number": 392
            },
            {
              "name": "_migrate_out_of_project_config_file",
              "module": "serena.config.serena_config",
              "signature": "@classmethod",
              "docstring": "Migrates a legacy project configuration file (which is a YAML file containing the project root) to the\nin-project configuration file (project.yml) inside the project root directory.\n\n:param path: the path to the legacy project configuration file\n:return: the project root path if the migration was successful, None otherwise.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "path",
                  "annotation": "Path",
                  "default": null
                }
              ],
              "return_annotation": "Path | None",
              "line_number": 467
            },
            {
              "name": "project_paths",
              "module": "serena.config.serena_config",
              "signature": "@cached_property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "cached_property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 491
            },
            {
              "name": "project_names",
              "module": "serena.config.serena_config",
              "signature": "@cached_property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "cached_property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 495
            },
            {
              "name": "get_project",
              "module": "serena.config.serena_config",
              "signature": "def get_project(self, project_root_or_name: str) -> Optional['Project']:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root_or_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Optional['Project']",
              "line_number": 498
            },
            {
              "name": "add_project_from_path",
              "module": "serena.config.serena_config",
              "signature": "def add_project_from_path(self, project_root: Path | str) -> 'Project':",
              "docstring": "Add a project to the Serena configuration from a given path. Will raise a FileExistsError if a\nproject already exists at the path.\n\n:param project_root: the path to the project to add\n:return: the project that was added",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_root",
                  "annotation": "Path | str",
                  "default": null
                }
              ],
              "return_annotation": "'Project'",
              "line_number": 518
            },
            {
              "name": "remove_project",
              "module": "serena.config.serena_config",
              "signature": "def remove_project(self, project_name: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 548
            },
            {
              "name": "save",
              "module": "serena.config.serena_config",
              "signature": "def save(self) -> None:",
              "docstring": "Saves the configuration to the file from which it was loaded (if any)",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 558
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 318,
          "is_abstract": false,
          "is_dataclass": true
        }
      ],
      "functions": [
        {
          "name": "get_serena_managed_in_project_dir",
          "module": "serena.config.serena_config",
          "signature": "def get_serena_managed_in_project_dir(project_root: str | Path) -> str:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "project_root",
              "annotation": "str | Path",
              "default": null
            }
          ],
          "return_annotation": "str",
          "line_number": 144
        },
        {
          "name": "is_running_in_docker",
          "module": "serena.config.serena_config",
          "signature": "def is_running_in_docker() -> bool:",
          "docstring": "Check if we're running inside a Docker container.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": "bool",
          "line_number": 148
        }
      ],
      "constants": [
        "T",
        "SERENA_DEFAULT_PROJECT_FILE",
        "CONFIG_FILE",
        "CONFIG_FILE_DOCKER"
      ],
      "dependencies": "{'typing', 'util.class_decorators', 'copy', 'solidlsp.ls_config', 'sensai.util', 'os', 'yaml', 'functools', 'sensai.util.string', 'analytics', 'serena.util.inspection', 'serena.constants', 'dataclasses', 'collections.abc', 'serena.tools', 'serena.util.general', 'ruamel.yaml.comments', 'datetime', 'sensai.util.logging', 'shutil', 'project', 'pathlib'}"
    },
    "serena.config.context_mode": {
      "name": "serena.config.context_mode",
      "path": "src/serena/config/context_mode.py",
      "docstring": "Context and Mode configuration loader",
      "imports": [
        "os",
        "from dataclasses",
        "from enum",
        "from pathlib",
        "from typing",
        "yaml",
        "from sensai.util",
        "from sensai.util.string",
        "from serena.config.serena_config",
        "from serena.constants"
      ],
      "classes": [
        {
          "name": "SerenaAgentMode",
          "module": "serena.config.context_mode",
          "docstring": "Represents a mode of operation for the agent, typically read off a YAML file.\nAn agent can be in multiple modes simultaneously as long as they are not mutually exclusive.\nThe modes can be adjusted after the agent is running, for example for switching from planning to editing.",
          "bases": [
            "ToolInclusionDefinition",
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "_tostring_includes",
              "module": "serena.config.context_mode",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 47
            },
            {
              "name": "print_overview",
              "module": "serena.config.context_mode",
              "signature": "def print_overview(self) -> None:",
              "docstring": "Print an overview of the mode.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 50
            },
            {
              "name": "from_yaml",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load a mode from a YAML file.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "yaml_path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 57
            },
            {
              "name": "get_path",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Get the path to the YAML file for a mode.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 65
            },
            {
              "name": "from_name",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load a registered Serena mode.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 81
            },
            {
              "name": "from_name_internal",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Loads an internal Serena mode",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 87
            },
            {
              "name": "list_registered_mode_names",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Names of all registered modes (from the corresponding YAML files in the serena repo).",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_user_modes",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 95
            },
            {
              "name": "list_custom_mode_names",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Names of all custom modes defined by the user.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 103
            },
            {
              "name": "load_default_modes",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load the default modes (interactive and editing).",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[Self]",
              "line_number": 108
            },
            {
              "name": "load",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_or_path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 113
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 33,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "SerenaAgentContext",
          "module": "serena.config.context_mode",
          "docstring": "Represents a context where the agent is operating (an IDE, a chat, etc.), typically read off a YAML file.\nAn agent can only be in a single context at a time.\nThe contexts cannot be changed after the agent is running.",
          "bases": [
            "ToolInclusionDefinition",
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "_tostring_includes",
              "module": "serena.config.context_mode",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 136
            },
            {
              "name": "from_yaml",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load a context from a YAML file.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "yaml_path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 140
            },
            {
              "name": "get_path",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Get the path to the YAML file for a context.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 151
            },
            {
              "name": "from_name",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load a registered Serena context.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 167
            },
            {
              "name": "load",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_or_path",
                  "annotation": "str | Path",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 173
            },
            {
              "name": "list_registered_context_names",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Names of all registered contexts (from the corresponding YAML files in the serena repo).",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "include_user_contexts",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 179
            },
            {
              "name": "list_custom_context_names",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Names of all custom contexts defined by the user.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 187
            },
            {
              "name": "load_default",
              "module": "serena.config.context_mode",
              "signature": "@classmethod",
              "docstring": "Load the default context.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 192
            },
            {
              "name": "print_overview",
              "module": "serena.config.context_mode",
              "signature": "def print_overview(self) -> None:",
              "docstring": "Print an overview of the mode.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 196
            }
          ],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 120,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "RegisteredContext",
          "module": "serena.config.context_mode",
          "docstring": "A registered context.",
          "bases": [
            "Enum"
          ],
          "methods": [
            {
              "name": "load",
              "module": "serena.config.context_mode",
              "signature": "def load(self) -> SerenaAgentContext:",
              "docstring": "Load the context.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SerenaAgentContext",
              "line_number": 213
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 203,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RegisteredMode",
          "module": "serena.config.context_mode",
          "docstring": "A registered mode.",
          "bases": [
            "Enum"
          ],
          "methods": [
            {
              "name": "load",
              "module": "serena.config.context_mode",
              "signature": "def load(self) -> SerenaAgentMode:",
              "docstring": "Load the mode.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "SerenaAgentMode",
              "line_number": 230
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 218,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "IDE_ASSISTANT",
        "DESKTOP_APP",
        "AGENT",
        "INTERACTIVE",
        "EDITING",
        "PLANNING",
        "ONE_SHOT"
      ],
      "dependencies": "{'typing', 'serena.constants', 'dataclasses', 'os', 'yaml', 'enum', 'sensai.util.string', 'serena.config.serena_config', 'sensai.util', 'pathlib'}"
    },
    "serena.generated.generated_prompt_factory": {
      "name": "serena.generated.generated_prompt_factory",
      "path": "src/serena/generated/generated_prompt_factory.py",
      "docstring": null,
      "imports": [
        "from interprompt.multilang_prompt",
        "from interprompt.prompt_factory",
        "from typing"
      ],
      "classes": [
        {
          "name": "PromptFactory",
          "module": "serena.generated.generated_prompt_factory",
          "docstring": "A class for retrieving and rendering prompt templates and prompt lists.",
          "bases": [
            "PromptFactoryBase"
          ],
          "methods": [
            {
              "name": "create_onboarding_prompt",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_onboarding_prompt(self, *, system: Any) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 17
            },
            {
              "name": "create_think_about_collected_information",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_think_about_collected_information(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 20
            },
            {
              "name": "create_think_about_task_adherence",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_think_about_task_adherence(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 23
            },
            {
              "name": "create_think_about_whether_you_are_done",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_think_about_whether_you_are_done(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 26
            },
            {
              "name": "create_summarize_changes",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_summarize_changes(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 29
            },
            {
              "name": "create_prepare_for_new_conversation",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_prepare_for_new_conversation(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 32
            },
            {
              "name": "create_system_prompt",
              "module": "serena.generated.generated_prompt_factory",
              "signature": "def create_system_prompt(self, *, available_markers: Any, available_tools: Any, context_system_prompt: Any, mode_system_prompts: Any) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 35
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 12,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'interprompt.multilang_prompt', 'interprompt.prompt_factory'}"
    },
    "serena.tools.file_tools": {
      "name": "serena.tools.file_tools",
      "path": "src/serena/tools/file_tools.py",
      "docstring": "File and file system-related tools, specifically for\n  * listing directory contents\n  * reading files\n  * creating files\n  * editing at the file level",
      "imports": [
        "json",
        "os",
        "re",
        "from collections",
        "from fnmatch",
        "from pathlib",
        "from serena.text_utils",
        "from serena.tools",
        "from serena.util.file_system"
      ],
      "classes": [
        {
          "name": "ReadFileTool",
          "module": "serena.tools.file_tools",
          "docstring": "Reads a file within the project directory.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, start_line: int=0, end_line: int | None=None, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Reads the given file or a chunk of it. Generally, symbolic operations\nlike find_symbol or find_referencing_symbols should be preferred if you know which symbols you are looking for.\n\n:param relative_path: the relative path to the file to read\n:param start_line: the 0-based index of the first line to be retrieved.\n:param end_line: the 0-based index of the last line to be retrieved (inclusive). If None, read until the end of the file.\n:param max_answer_chars: if the file (chunk) is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: the full text of the file at the given relative path",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_line",
                  "annotation": "int | None",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 26
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 21,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CreateTextFileTool",
          "module": "serena.tools.file_tools",
          "docstring": "Creates/overwrites a file in the project directory.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, content: str) -> str:",
              "docstring": "Write a new file or overwrite an existing file.\n\n:param relative_path: the relative path to the file to create\n:param content: the (utf-8-encoded) content to write to the file\n:return: a message indicating success or failure",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 60
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 55,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ListDirTool",
          "module": "serena.tools.file_tools",
          "docstring": "Lists files and directories in the given directory (optionally with recursion).",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, recursive: bool, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Lists all non-gitignored files and directories in the given directory (optionally with recursion).\n\n:param relative_path: the relative path to the directory to list; pass \".\" to scan the project root\n:param recursive: whether to scan subdirectories recursively\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: a JSON object with the names of directories and files within the given directory",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "recursive",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 86
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 81,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FindFileTool",
          "module": "serena.tools.file_tools",
          "docstring": "Finds files in the given relative paths",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, file_mask: str, relative_path: str) -> str:",
              "docstring": "Finds non-gitignored files matching the given file mask within the given relative path\n\n:param file_mask: the filename or file mask (using the wildcards * or ?) to search for\n:param relative_path: the relative path to the directory to search in; pass \".\" to scan the project root\n:return: a JSON object with the list of matching files",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "file_mask",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 116
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 111,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReplaceRegexTool",
          "module": "serena.tools.file_tools",
          "docstring": "Replaces content in a file by using regular expressions.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, regex: str, repl: str, allow_multiple_occurrences: bool=False) -> str:",
              "docstring": "Replaces one or more occurrences of the given regular expression.\nThis is the preferred way to replace content in a file whenever the symbol-level\ntools are not appropriate.\nEven large sections of code can be replaced by providing a concise regular expression of\nthe form \"beginning.*?end-of-text-to-be-replaced\".\nAlways try to use wildcards to avoid specifying the exact content of the code to be replaced,\nespecially if it spans several lines.\n\nIMPORTANT: REMEMBER TO USE WILDCARDS WHEN APPROPRIATE! I WILL BE VERY UNHAPPY IF YOU WRITE LONG REGEXES WITHOUT USING WILDCARDS INSTEAD!\n\n:param relative_path: the relative path to the file\n:param regex: a Python-style regular expression, matches of which will be replaced.\n    Dot matches all characters, multi-line matching is enabled.\n:param repl: the string to replace the matched content with, which may contain\n    backreferences like \\1, \\2, etc.\n:param allow_multiple_occurrences: if True, the regex may match multiple occurrences in the file\n    and all of them will be replaced.\n    If this is set to False and the regex matches multiple occurrences, an error will be returned\n    (and you may retry with a revised, more specific regex).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "regex",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "repl",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "allow_multiple_occurrences",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 152
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 147,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeleteLinesTool",
          "module": "serena.tools.file_tools",
          "docstring": "Deletes a range of lines within a file.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, start_line: int, end_line: int) -> str:",
              "docstring": "Deletes the given lines in the file.\nRequires that the same range of lines was previously read using the `read_file` tool to verify correctness\nof the operation.\n\n:param relative_path: the relative path to the file\n:param start_line: the 0-based index of the first line to be deleted\n:param end_line: the 0-based index of the last line to be deleted",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_line",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 200
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 195,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReplaceLinesTool",
          "module": "serena.tools.file_tools",
          "docstring": "Replaces a range of lines within a file with new content.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, start_line: int, end_line: int, content: str) -> str:",
              "docstring": "Replaces the given range of lines in the given file.\nRequires that the same range of lines was previously read using the `read_file` tool to verify correctness\nof the operation.\n\n:param relative_path: the relative path to the file\n:param start_line: the 0-based index of the first line to be deleted\n:param end_line: the 0-based index of the last line to be deleted\n:param content: the content to insert",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "end_line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 228
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 223,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertAtLineTool",
          "module": "serena.tools.file_tools",
          "docstring": "Inserts content at a given line in a file.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, relative_path: str, line: int, content: str) -> str:",
              "docstring": "Inserts the given content at the given line in the file, pushing existing content of the line down.\nIn general, symbolic insert operations like insert_after_symbol or insert_before_symbol should be preferred if you know which\nsymbol you are looking for.\nHowever, this can also be useful for small targeted edits of the body of a longer symbol (without replacing the entire body).\n\n:param relative_path: the relative path to the file\n:param line: the 0-based index of the line to insert content at\n:param content: the content to be inserted",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 259
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 254,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SearchForPatternTool",
          "module": "serena.tools.file_tools",
          "docstring": "Performs a search for a pattern in the project.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.file_tools",
              "signature": "def apply(self, substring_pattern: str, context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None, relative_path: str='', restrict_search_to_code_files: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Offers a flexible search for arbitrary patterns in the codebase, including the\npossibility to search in non-code files.\nGenerally, symbolic operations like find_symbol or find_referencing_symbols\nshould be preferred if you know which symbols you are looking for.\n\nPattern Matching Logic:\n    For each match, the returned result will contain the full lines where the\n    substring pattern is found, as well as optionally some lines before and after it. The pattern will be compiled with\n    DOTALL, meaning that the dot will match all characters including newlines.\n    This also means that it never makes sense to have .* at the beginning or end of the pattern,\n    but it may make sense to have it in the middle for complex patterns.\n    If a pattern matches multiple lines, all those lines will be part of the match.\n    Be careful to not use greedy quantifiers unnecessarily, it is usually better to use non-greedy quantifiers like .*? to avoid\n    matching too much content.\n\nFile Selection Logic:\n    The files in which the search is performed can be restricted very flexibly.\n    Using `restrict_search_to_code_files` is useful if you are only interested in code symbols (i.e., those\n    symbols that can be manipulated with symbolic tools like find_symbol).\n    You can also restrict the search to a specific file or directory,\n    and provide glob patterns to include or exclude certain files on top of that.\n    The globs are matched against relative file paths from the project root (not to the `relative_path` parameter that\n    is used to further restrict the search).\n    Smartly combining the various restrictions allows you to perform very targeted searches.\n\n\n:param substring_pattern: Regular expression for a substring pattern to search for\n:param context_lines_before: Number of lines of context to include before each match\n:param context_lines_after: Number of lines of context to include after each match\n:param paths_include_glob: optional glob pattern specifying files to include in the search.\n    Matches against relative file paths from the project root (e.g., \"*.py\", \"src/**/*.ts\").\n    Only matches files, not directories.\n:param paths_exclude_glob: optional glob pattern specifying files to exclude from the search.\n    Matches against relative file paths from the project root (e.g., \"*test*\", \"**/*_generated.py\").\n    Takes precedence over paths_include_glob. Only matches files, not directories.\n:param relative_path: only subpaths of this path (relative to the repo root) will be analyzed. If a path to a single\n    file is passed, only that will be searched. The path must exist, otherwise a `FileNotFoundError` is raised.\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task. Instead, if the output is too long, you should\n    make a stricter query.\n:param restrict_search_to_code_files: whether to restrict the search to only those files where\n    analyzed code symbols can be found. Otherwise, will search all non-ignored files.\n    Set this to True if your search is only meant to discover code that can be manipulated with symbolic tools.\n    For example, for finding classes or methods from a name pattern.\n    Setting to False is a better choice if you also want to search in non-code files, like in html or yaml files,\n    which is why it is the default.\n:return: A mapping of file paths to lists of matched consecutive lines.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "substring_pattern",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "context_lines_before",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "context_lines_after",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "paths_include_glob",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "paths_exclude_glob",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "restrict_search_to_code_files",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 287
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 282,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'serena.util.file_system', 'os', 'serena.tools', 'fnmatch', 're', 'json', 'collections', 'serena.text_utils', 'pathlib'}"
    },
    "serena.tools.jetbrains_plugin_client": {
      "name": "serena.tools.jetbrains_plugin_client",
      "path": "src/serena/tools/jetbrains_plugin_client.py",
      "docstring": "Client for the Serena JetBrains Plugin",
      "imports": [
        "json",
        "logging",
        "from pathlib",
        "from typing",
        "requests",
        "from sensai.util.string",
        "from serena.project"
      ],
      "classes": [
        {
          "name": "SerenaClientError",
          "module": "serena.tools.jetbrains_plugin_client",
          "docstring": "Base exception for Serena client errors.",
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 19,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ConnectionError",
          "module": "serena.tools.jetbrains_plugin_client",
          "docstring": "Raised when connection to the service fails.",
          "bases": [
            "SerenaClientError"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 23,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "APIError",
          "module": "serena.tools.jetbrains_plugin_client",
          "docstring": "Raised when the API returns an error response.",
          "bases": [
            "SerenaClientError"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 27,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ServerNotFoundError",
          "module": "serena.tools.jetbrains_plugin_client",
          "docstring": "Raised when the plugin's service is not found.",
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 31,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JetBrainsPluginClient",
          "module": "serena.tools.jetbrains_plugin_client",
          "docstring": "Python client for the Serena Backend Service.\n\nProvides simple methods to interact with all available endpoints.",
          "bases": [
            "ToStringMixin"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def __init__(self, port: int, timeout: int=30):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "port",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "timeout",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 45
            },
            {
              "name": "_tostring_includes",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def _tostring_includes(self) -> list[str]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 51
            },
            {
              "name": "from_project",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "Project",
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 55
            },
            {
              "name": "matches",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def matches(self, resolved_path: Path) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "resolved_path",
                  "annotation": "Path",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 72
            },
            {
              "name": "_make_request",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def _make_request(self, method: str, endpoint: str, data: Optional[dict]=None) -> dict[str, Any]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "method",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "endpoint",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "data",
                  "annotation": "Optional[dict]",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 78
            },
            {
              "name": "_pythonify_response",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "@staticmethod",
              "docstring": "Converts dictionary keys from camelCase to snake_case recursively.\n\n:response: the response in which to convert keys (dictionary or list)",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "response",
                  "annotation": "T",
                  "default": null
                }
              ],
              "return_annotation": "T",
              "line_number": 109
            },
            {
              "name": "project_root",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def project_root(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 127
            },
            {
              "name": "find_symbol",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def find_symbol(self, name_path: str, relative_path: str | None=None, include_body: bool=False, depth: int=0, include_location: bool=False) -> dict[str, Any]:",
              "docstring": "Find symbols by name.\n\n:param name_path: the name path to match\n:param relative_path: the relative path to which to restrict the search\n:param include_body: whether to include symbol body content\n:param depth: depth of children to include (0 = no children)\n\n:return: Dictionary containing 'symbols' list with matching symbols",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "depth",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "include_location",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 131
            },
            {
              "name": "find_references",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def find_references(self, name_path: str, relative_path: str) -> dict[str, Any]:",
              "docstring": "Find references to a symbol.\n\n:param name_path: the name path of the symbol\n:param relative_path: the relative path\n:return: dictionary containing 'symbols' list with symbol references",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 153
            },
            {
              "name": "get_symbols_overview",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def get_symbols_overview(self, relative_path: str) -> dict[str, Any]:",
              "docstring": ":param relative_path: the relative path to a source file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, Any]",
              "line_number": 164
            },
            {
              "name": "is_service_available",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def is_service_available(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 171
            },
            {
              "name": "close",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def close(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 178
            },
            {
              "name": "__enter__",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def __enter__(self) -> Self:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 181
            },
            {
              "name": "__exit__",
              "module": "serena.tools.jetbrains_plugin_client",
              "signature": "def __exit__(self, exc_type, exc_val, exc_tb):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exc_type",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exc_val",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exc_tb",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 184
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 35,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "T",
        "BASE_PORT"
      ],
      "dependencies": "{'typing', 'serena.project', 'json', 'logging', 'sensai.util.string', 'pathlib', 'requests'}"
    },
    "serena.tools.workflow_tools": {
      "name": "serena.tools.workflow_tools",
      "path": "src/serena/tools/workflow_tools.py",
      "docstring": "Tools supporting the general workflow of the agent",
      "imports": [
        "json",
        "platform",
        "from serena.tools",
        "from memory_tools"
      ],
      "classes": [
        {
          "name": "CheckOnboardingPerformedTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Checks whether project onboarding was already performed.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Checks whether project onboarding was already performed.\nYou should always call this tool before beginning to actually work on the project/after activating a project,\nbut after calling the initial instructions tool.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 16
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 11,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "OnboardingTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Performs onboarding (identifying the project structure and essential tasks, e.g. for testing or building).",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Call this tool if onboarding was not performed yet.\nYou will call this tool at most once per conversation.\n\n:return: instructions on how to create the onboarding information",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 46
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 41,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ThinkAboutCollectedInformationTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Thinking tool for pondering the completeness of collected information.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Think about the collected information and whether it is sufficient and relevant.\nThis tool should ALWAYS be called after you have completed a non-trivial sequence of searching steps like\nfind_symbol, find_referencing_symbols, search_files_for_pattern, read_file, etc.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 62
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 57,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ThinkAboutTaskAdherenceTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Thinking tool for determining whether the agent is still on track with the current task.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Think about the task at hand and whether you are still on track.\nEspecially important if the conversation has been going on for a while and there\nhas been a lot of back and forth.\n\nThis tool should ALWAYS be called before you insert, replace, or delete code.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 76
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 71,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ThinkAboutWhetherYouAreDoneTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Thinking tool for determining whether the task is truly completed.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Whenever you feel that you are done with what the user has asked for, it is important to call this tool.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 92
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 87,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SummarizeChangesTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Provides instructions for summarizing the changes made to the codebase.",
          "bases": [
            "Tool",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Summarize the changes you have made to the codebase.\nThis tool should always be called after you have fully completed any non-trivial coding task,\nbut only after the think_about_whether_you_are_done call.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 104
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 99,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PrepareForNewConversationTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Provides instructions for preparing for a new conversation (in order to continue with the necessary context).",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Instructions for preparing for a new conversation. This tool should only be called on explicit user request.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 118
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 113,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InitialInstructionsTool",
          "module": "serena.tools.workflow_tools",
          "docstring": "Gets the initial instructions for the current project.\nShould only be used in settings where the system prompt cannot be set,\ne.g. in clients you have no control over, like Claude Desktop.",
          "bases": [
            "Tool",
            "ToolMarkerDoesNotRequireActiveProject",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.workflow_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Get the initial instructions for the current coding project.\nIf you haven't received instructions on how to use Serena's tools in the system prompt,\nyou should always call this tool before starting to work (including using any other tool) on any programming task,\nthe only exception being when you are asked to call `activate_project`, which you should then call before.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 132
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 125,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'memory_tools', 'json', 'platform', 'serena.tools'}"
    },
    "serena.tools.tools_base": {
      "name": "serena.tools.tools_base",
      "path": "src/serena/tools/tools_base.py",
      "docstring": null,
      "imports": [
        "inspect",
        "os",
        "from abc",
        "from collections.abc",
        "from dataclasses",
        "from types",
        "from typing",
        "from mcp.server.fastmcp.utilities.func_metadata",
        "from sensai.util",
        "from sensai.util.string",
        "from serena.project",
        "from serena.prompt_factory",
        "from serena.symbol",
        "from serena.util.class_decorators",
        "from serena.util.inspection",
        "from solidlsp.ls_exceptions",
        "from serena.agent",
        "from serena.code_editor",
        "from code_editor"
      ],
      "classes": [
        {
          "name": "Component",
          "module": "serena.tools.tools_base",
          "docstring": null,
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.tools.tools_base",
              "signature": "def __init__(self, agent: 'SerenaAgent'):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "'SerenaAgent'",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 30
            },
            {
              "name": "get_project_root",
              "module": "serena.tools.tools_base",
              "signature": "def get_project_root(self) -> str:",
              "docstring": ":return: the root directory of the active project, raises a ValueError if no active project configuration is set",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 33
            },
            {
              "name": "prompt_factory",
              "module": "serena.tools.tools_base",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "PromptFactory",
              "line_number": 40
            },
            {
              "name": "memories_manager",
              "module": "serena.tools.tools_base",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'MemoriesManager'",
              "line_number": 44
            },
            {
              "name": "create_language_server_symbol_retriever",
              "module": "serena.tools.tools_base",
              "signature": "def create_language_server_symbol_retriever(self) -> LanguageServerSymbolRetriever:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "LanguageServerSymbolRetriever",
              "line_number": 48
            },
            {
              "name": "project",
              "module": "serena.tools.tools_base",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Project",
              "line_number": 56
            },
            {
              "name": "create_code_editor",
              "module": "serena.tools.tools_base",
              "signature": "def create_code_editor(self) -> 'CodeEditor':",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'CodeEditor'",
              "line_number": 59
            },
            {
              "name": "lines_read",
              "module": "serena.tools.tools_base",
              "signature": "@property",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "property"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "'LinesRead'",
              "line_number": 68
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 29,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarker",
          "module": "serena.tools.tools_base",
          "docstring": "Base class for tool markers.",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 76,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarkerCanEdit",
          "module": "serena.tools.tools_base",
          "docstring": "Marker class for all tools that can perform editing operations on files.",
          "bases": [
            "ToolMarker"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 82,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarkerDoesNotRequireActiveProject",
          "module": "serena.tools.tools_base",
          "docstring": null,
          "bases": [
            "ToolMarker"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 88,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarkerOptional",
          "module": "serena.tools.tools_base",
          "docstring": "Marker class for optional tools that are disabled by default.",
          "bases": [
            "ToolMarker"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 92,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarkerSymbolicRead",
          "module": "serena.tools.tools_base",
          "docstring": "Marker class for tools that perform symbol read operations.",
          "bases": [
            "ToolMarker"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 98,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ToolMarkerSymbolicEdit",
          "module": "serena.tools.tools_base",
          "docstring": "Marker class for tools that perform symbolic edit operations.",
          "bases": [
            "ToolMarkerCanEdit"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 104,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ApplyMethodProtocol",
          "module": "serena.tools.tools_base",
          "docstring": "Callable protocol for the apply method of a tool.",
          "bases": [
            "Protocol"
          ],
          "methods": [
            {
              "name": "__call__",
              "module": "serena.tools.tools_base",
              "signature": "def __call__(self, *args: Any, **kwargs: Any) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 113
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 110,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Tool",
          "module": "serena.tools.tools_base",
          "docstring": null,
          "bases": [
            "Component"
          ],
          "methods": [
            {
              "name": "get_name_from_cls",
              "module": "serena.tools.tools_base",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 129
            },
            {
              "name": "get_name",
              "module": "serena.tools.tools_base",
              "signature": "def get_name(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 137
            },
            {
              "name": "get_apply_fn",
              "module": "serena.tools.tools_base",
              "signature": "def get_apply_fn(self) -> ApplyMethodProtocol:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "ApplyMethodProtocol",
              "line_number": 140
            },
            {
              "name": "can_edit",
              "module": "serena.tools.tools_base",
              "signature": "@classmethod",
              "docstring": "Returns whether this tool can perform editing operations on code.\n\n:return: True if the tool can edit code, False otherwise",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 147
            },
            {
              "name": "get_tool_description",
              "module": "serena.tools.tools_base",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 156
            },
            {
              "name": "get_apply_docstring_from_cls",
              "module": "serena.tools.tools_base",
              "signature": "@classmethod",
              "docstring": "Get the docstring for the apply method from the class (static metadata).\nNeeded for creating MCP tools in a separate process without running into serialization issues.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 163
            },
            {
              "name": "get_apply_docstring",
              "module": "serena.tools.tools_base",
              "signature": "def get_apply_docstring(self) -> str:",
              "docstring": "Gets the docstring for the tool application, used by the MCP server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 181
            },
            {
              "name": "get_apply_fn_metadata",
              "module": "serena.tools.tools_base",
              "signature": "def get_apply_fn_metadata(self) -> FuncMetadata:",
              "docstring": "Gets the metadata for the tool application function, used by the MCP server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "FuncMetadata",
              "line_number": 185
            },
            {
              "name": "get_apply_fn_metadata_from_cls",
              "module": "serena.tools.tools_base",
              "signature": "@classmethod",
              "docstring": "Get the metadata for the apply method from the class (static metadata).\nNeeded for creating MCP tools in a separate process without running into serialization issues.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "FuncMetadata",
              "line_number": 190
            },
            {
              "name": "_log_tool_application",
              "module": "serena.tools.tools_base",
              "signature": "def _log_tool_application(self, frame: Any) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "frame",
                  "annotation": "Any",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 205
            },
            {
              "name": "_limit_length",
              "module": "serena.tools.tools_base",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "result",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 218
            },
            {
              "name": "is_active",
              "module": "serena.tools.tools_base",
              "signature": "def is_active(self) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 226
            },
            {
              "name": "apply_ex",
              "module": "serena.tools.tools_base",
              "signature": "def apply_ex(self, log_call: bool=True, catch_exceptions: bool=True, **kwargs) -> str:",
              "docstring": "Applies the tool with logging and exception handling, using the given keyword arguments",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "log_call",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "catch_exceptions",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 229
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 117,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "EditedFileContext",
          "module": "serena.tools.tools_base",
          "docstring": "Context manager for file editing.\n\nCreate the context, then use `set_updated_content` to set the new content, the original content\nbeing provided in `original_content`.\nWhen exiting the context without an exception, the updated content will be written back to the file.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.tools.tools_base",
              "signature": "def __init__(self, relative_path: str, agent: 'SerenaAgent'):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "agent",
                  "annotation": "'SerenaAgent'",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 302
            },
            {
              "name": "__enter__",
              "module": "serena.tools.tools_base",
              "signature": "def __enter__(self) -> Self:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "Self",
              "line_number": 312
            },
            {
              "name": "get_original_content",
              "module": "serena.tools.tools_base",
              "signature": "def get_original_content(self) -> str:",
              "docstring": ":return: the original content of the file before any modifications.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 315
            },
            {
              "name": "set_updated_content",
              "module": "serena.tools.tools_base",
              "signature": "def set_updated_content(self, content: str) -> None:",
              "docstring": "Sets the updated content of the file, which will be written back to the file\nwhen the context is exited without an exception.\n\n:param content: the updated content of the file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 321
            },
            {
              "name": "__exit__",
              "module": "serena.tools.tools_base",
              "signature": "def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "exc_type",
                  "annotation": "type[BaseException] | None",
                  "default": null
                },
                {
                  "name": "exc_value",
                  "annotation": "BaseException | None",
                  "default": null
                },
                {
                  "name": "traceback",
                  "annotation": "TracebackType | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 330
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 293,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RegisteredTool",
          "module": "serena.tools.tools_base",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 341,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "ToolRegistry",
          "module": "serena.tools.tools_base",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "serena.tools.tools_base",
              "signature": "def __init__(self) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 349
            },
            {
              "name": "get_tool_class_by_name",
              "module": "serena.tools.tools_base",
              "signature": "def get_tool_class_by_name(self, tool_name: str) -> type[Tool]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "type[Tool]",
              "line_number": 360
            },
            {
              "name": "get_all_tool_classes",
              "module": "serena.tools.tools_base",
              "signature": "def get_all_tool_classes(self) -> list[type[Tool]]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[type[Tool]]",
              "line_number": 363
            },
            {
              "name": "get_tool_names_default_enabled",
              "module": "serena.tools.tools_base",
              "signature": "def get_tool_names_default_enabled(self) -> list[str]:",
              "docstring": ":return: the list of tool names that are enabled by default (i.e. non-optional tools).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 366
            },
            {
              "name": "print_tool_overview",
              "module": "serena.tools.tools_base",
              "signature": "def print_tool_overview(self, tools: Iterable[type[Tool] | Tool] | None=None) -> None:",
              "docstring": "Print a summary of the tools. If no tools are passed, a summary of all tools is printed.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tools",
                  "annotation": "Iterable[type[Tool] | Tool] | None",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 372
            },
            {
              "name": "is_valid_tool_name",
              "module": "serena.tools.tools_base",
              "signature": "def is_valid_tool_name(self, tool_name: str) -> bool:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "tool_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 386
            }
          ],
          "class_variables": [],
          "decorators": [
            "singleton"
          ],
          "line_number": 348,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "T",
        "SUCCESS_RESULT",
        "TOOL_DEFAULT_MAX_ANSWER_LENGTH"
      ],
      "dependencies": "{'typing', 'serena.project', 'solidlsp.ls_exceptions', 'inspect', 'types', 'serena.symbol', 'serena.agent', 'sensai.util', 'serena.util.class_decorators', 'os', 'code_editor', 'sensai.util.string', 'serena.prompt_factory', 'serena.util.inspection', 'dataclasses', 'collections.abc', 'serena.code_editor', 'mcp.server.fastmcp.utilities.func_metadata', 'abc'}"
    },
    "serena.tools": {
      "name": "serena.tools",
      "path": "src/serena/tools/__init__.py",
      "docstring": null,
      "imports": [
        "from tools_base",
        "from file_tools",
        "from symbol_tools",
        "from memory_tools",
        "from cmd_tools",
        "from config_tools",
        "from workflow_tools",
        "from jetbrains_tools"
      ],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "{'tools_base', 'cmd_tools', 'config_tools', 'symbol_tools', 'workflow_tools', 'file_tools', 'memory_tools', 'jetbrains_tools'}"
    },
    "serena.tools.jetbrains_tools": {
      "name": "serena.tools.jetbrains_tools",
      "path": "src/serena/tools/jetbrains_tools.py",
      "docstring": null,
      "imports": [
        "json",
        "from serena.tools",
        "from serena.tools.jetbrains_plugin_client"
      ],
      "classes": [
        {
          "name": "JetBrainsFindSymbolTool",
          "module": "serena.tools.jetbrains_tools",
          "docstring": "Performs a global (or local) search for symbols with/containing a given name/substring (optionally filtered by type).",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.jetbrains_tools",
              "signature": "def apply(self, name_path: str, depth: int=0, relative_path: str | None=None, include_body: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Retrieves information on all symbols/code entities (classes, methods, etc.) based on the given `name_path`,\nwhich represents a pattern for the symbol's path within the symbol tree of a single file.\nThe returned symbol location can be used for edits or further queries.\nSpecify `depth > 0` to retrieve children (e.g., methods of a class).\n\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path).\nNote that the name path is not a path in the file system but rather a path in the symbol tree\n**within a single file**. Thus, file or directory names should never be included in the `name_path`.\nFor restricting the search to a single file or directory, pass the `relative_path` parameter.\nThe retrieved symbols' `name_path` attribute will always be composed of symbol names, never file\nor directory names.\n\nKey aspects of the name path matching behavior:\n- The name of the retrieved symbols will match the last segment of `name_path`, while preceding segments\n  will restrict the search to symbols that have a desired sequence of ancestors.\n- If there is no `/` in `name_path`, there is no restriction on the ancestor symbols.\n  For example, passing `method` will match against all symbols with name paths like `method`,\n  `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains at least one `/`, the matching is restricted to symbols\n  with the respective ancestors. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `other_class/method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, i.e.\n  all ancestors are provided and must match.\n  For example, passing `/class` will match only against top-level symbols named `class` but\n  will not match `nested_class/class`. Passing `/class/method` will match `class/method` but\n  not `outer_class/class/method`.\n\n:param name_path: The name path pattern to search for, see above for details.\n:param depth: Depth to retrieve descendants (e.g., 1 for class methods/attributes).\n:param relative_path: Optional. Restrict search to this file or directory.\n    If None, searches entire codebase.\n    If a directory is passed, the search will be restricted to the files in that directory.\n    If a file is passed, the search will be restricted to that file.\n    If you have some knowledge about the codebase, you should use this parameter, as it will significantly\n    speed up the search as well as reduce the number of results.\n:param include_body: If True, include the symbol's source code. Use judiciously.\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: JSON string: a list of symbols (with locations) matching the name.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "depth",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 12
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 7,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JetBrainsFindReferencingSymbolsTool",
          "module": "serena.tools.jetbrains_tools",
          "docstring": "Finds symbols that reference the given symbol",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.jetbrains_tools",
              "signature": "def apply(self, name_path: str, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Finds symbols that reference the symbol at the given `name_path`.\nThe result will contain metadata about the referencing symbols.\n\n:param name_path: name path of the symbol for which to find references; matching logic as described in find symbol tool.\n:param relative_path: the relative path to the file containing the symbol for which to find references.\n    Note that here you can't pass a directory but must pass a file.\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: a list of JSON objects with the symbols referencing the requested symbol",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 78
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 73,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "JetBrainsGetSymbolsOverviewTool",
          "module": "serena.tools.jetbrains_tools",
          "docstring": "Retrieves an overview of the top-level symbols within a specified file",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.jetbrains_tools",
              "signature": "def apply(self, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Gets an overview of the top-level symbols in the given file.\nCalling this is often a good idea before more targeted reading, searching or editing operations on the code symbols.\nBefore requesting a symbol overview, it is usually a good idea to narrow down the scope of the overview\nby first understanding the basic directory structure of the repository that you can get from memories\nor by using the `list_dir` and `find_file` tools (or similar).\n\n:param relative_path: the relative path to the file to get the overview of\n:param max_answer_chars: max characters for the JSON result. If exceeded, no content is returned.\n:return: a JSON object containing the symbols",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 108
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 103,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'json', 'serena.tools', 'serena.tools.jetbrains_plugin_client'}"
    },
    "serena.tools.symbol_tools": {
      "name": "serena.tools.symbol_tools",
      "path": "src/serena/tools/symbol_tools.py",
      "docstring": "Language server-related tools",
      "imports": [
        "dataclasses",
        "json",
        "os",
        "from collections.abc",
        "from copy",
        "from typing",
        "from serena.tools",
        "from solidlsp.ls_types"
      ],
      "classes": [
        {
          "name": "RestartLanguageServerTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Restarts the language server, may be necessary when edits not through Serena happen.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Use this tool only on explicit user request or after confirmation.\nIt may be necessary to restart the language server if it hangs.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 41
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 38,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GetSymbolsOverviewTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Gets an overview of the top-level symbols defined in a given file or directory.",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, relative_path: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Use this tool to get a high-level understanding of the code symbols in a file.\nThis should be the first tool to call when you want to understand a new file, unless you already know\nwhat you are looking for.\n\n:param relative_path: the relative path to the file or directory to get the overview of\n:param max_answer_chars: if the overview is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task. If the overview is too long, you should use a smaller directory instead,\n    (e.g. a subdirectory).\n:return: a JSON object containing info about top-level symbols in the file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 54
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 49,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FindSymbolTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Performs a global (or local) search for symbols with/containing a given name/substring (optionally filtered by type).",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, name_path: str, depth: int=0, relative_path: str | None=None, include_body: bool=False, include_kinds: list[int] | None=None, exclude_kinds: list[int] | None=None, substring_matching: bool=False, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Retrieves information on all symbols/code entities (classes, methods, etc.) based on the given `name_path`,\nwhich represents a pattern for the symbol's path within the symbol tree of a single file.\nThe returned symbol location can be used for edits or further queries.\nSpecify `depth > 0` to retrieve children (e.g., methods of a class).\n\nThe matching behavior is determined by the structure of `name_path`, which can\neither be a simple name (e.g. \"method\") or a name path like \"class/method\" (relative name path)\nor \"/class/method\" (absolute name path). Note that the name path is not a path in the file system\nbut rather a path in the symbol tree **within a single file**. Thus, file or directory names should never\nbe included in the `name_path`. For restricting the search to a single file or directory,\nthe `within_relative_path` parameter should be used instead. The retrieved symbols' `name_path` attribute\nwill always be composed of symbol names, never file or directory names.\n\nKey aspects of the name path matching behavior:\n- Trailing slashes in `name_path` play no role and are ignored.\n- The name of the retrieved symbols will match (either exactly or as a substring)\n  the last segment of `name_path`, while other segments will restrict the search to symbols that\n  have a desired sequence of ancestors.\n- If there is no starting or intermediate slash in `name_path`, there is no\n  restriction on the ancestor symbols. For example, passing `method` will match\n  against symbols with name paths like `method`, `class/method`, `class/nested_class/method`, etc.\n- If `name_path` contains a `/` but doesn't start with a `/`, the matching is restricted to symbols\n  with the same ancestors as the last segment of `name_path`. For example, passing `class/method` will match against\n  `class/method` as well as `nested_class/class/method` but not `method`.\n- If `name_path` starts with a `/`, it will be treated as an absolute name path pattern, meaning\n  that the first segment of it must match the first segment of the symbol's name path.\n  For example, passing `/class` will match only against top-level symbols like `class` but not against `nested_class/class`.\n  Passing `/class/method` will match against `class/method` but not `nested_class/class/method` or `method`.\n\n\n:param name_path: The name path pattern to search for, see above for details.\n:param depth: Depth to retrieve descendants (e.g., 1 for class methods/attributes).\n:param relative_path: Optional. Restrict search to this file or directory. If None, searches entire codebase.\n    If a directory is passed, the search will be restricted to the files in that directory.\n    If a file is passed, the search will be restricted to that file.\n    If you have some knowledge about the codebase, you should use this parameter, as it will significantly\n    speed up the search as well as reduce the number of results.\n:param include_body: If True, include the symbol's source code. Use judiciously.\n:param include_kinds: Optional. List of LSP symbol kind integers to include. (e.g., 5 for Class, 12 for Function).\n    Valid kinds: 1=file, 2=module, 3=namespace, 4=package, 5=class, 6=method, 7=property, 8=field, 9=constructor, 10=enum,\n    11=interface, 12=function, 13=variable, 14=constant, 15=string, 16=number, 17=boolean, 18=array, 19=object,\n    20=key, 21=null, 22=enum member, 23=struct, 24=event, 25=operator, 26=type parameter\n:param exclude_kinds: Optional. List of LSP symbol kind integers to exclude. Takes precedence over `include_kinds`.\n:param substring_matching: If True, use substring matching for the last segment of `name`.\n:param max_answer_chars: Max characters for the JSON result. If exceeded, no content is returned.\n:return: a list of symbols (with locations) matching the name.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "depth",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "list[int] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "list[int] | None",
                  "default": null
                },
                {
                  "name": "substring_matching",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 86
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 81,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FindReferencingSymbolsTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Finds symbols that reference the symbol at the given location (optionally filtered by type).",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicRead"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, name_path: str, relative_path: str, include_kinds: list[int] | None=None, exclude_kinds: list[int] | None=None, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Finds references to the symbol at the given `name_path`. The result will contain metadata about the referencing symbols\nas well as a short code snippet around the reference.\n\n:param name_path: for finding the symbol to find references for, same logic as in the `find_symbol` tool.\n:param relative_path: the relative path to the file containing the symbol for which to find references.\n    Note that here you can't pass a directory but must pass a file.\n:param include_kinds: same as in the `find_symbol` tool.\n:param exclude_kinds: same as in the `find_symbol` tool.\n:param max_answer_chars: same as in the `find_symbol` tool.\n:return: a list of JSON objects with the symbols referencing the requested symbol",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_kinds",
                  "annotation": "list[int] | None",
                  "default": null
                },
                {
                  "name": "exclude_kinds",
                  "annotation": "list[int] | None",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 166
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 161,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReplaceSymbolBodyTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Replaces the full definition of a symbol.",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
              "docstring": "Replaces the body of the symbol with the given `name_path`.\n\n:param name_path: for finding the symbol to replace, same logic as in the `find_symbol` tool.\n:param relative_path: the relative path to the file containing the symbol\n:param body: the new symbol body. Important: Begin directly with the symbol definition and provide no\n    leading indentation for the first line (but do indent the rest of the body according to the context).",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 218
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 213,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertAfterSymbolTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Inserts content after the end of the definition of a given symbol.",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
              "docstring": "Inserts the given body/content after the end of the definition of the given symbol (via the symbol's location).\nA typical use case is to insert a new class, function, method, field or variable assignment.\n\n:param name_path: name path of the symbol after which to insert content (definitions in the `find_symbol` tool apply)\n:param relative_path: the relative path to the file containing the symbol\n:param body: the body/content to be inserted. The inserted code shall begin with the next line after\n    the symbol.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 246
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 241,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertBeforeSymbolTool",
          "module": "serena.tools.symbol_tools",
          "docstring": "Inserts content before the beginning of the definition of a given symbol.",
          "bases": [
            "Tool",
            "ToolMarkerSymbolicEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.symbol_tools",
              "signature": "def apply(self, name_path: str, relative_path: str, body: str) -> str:",
              "docstring": "Inserts the given content before the beginning of the definition of the given symbol (via the symbol's location).\nA typical use case is to insert a new class, function, method, field or variable assignment; or\na new import statement before the first symbol in the file.\n\n:param name_path: name path of the symbol before which to insert content (definitions in the `find_symbol` tool apply)\n:param relative_path: the relative path to the file containing the symbol\n:param body: the body/content to be inserted before the line in which the referenced symbol is defined",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "name_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "relative_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "body",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 271
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 266,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "_sanitize_symbol_dict",
          "module": "serena.tools.symbol_tools",
          "signature": "def _sanitize_symbol_dict(symbol_dict: dict[str, Any]) -> dict[str, Any]:",
          "docstring": "Sanitize a symbol dictionary inplace by removing unnecessary information.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "symbol_dict",
              "annotation": "dict[str, Any]",
              "default": null
            }
          ],
          "return_annotation": "dict[str, Any]",
          "line_number": 22
        }
      ],
      "constants": [],
      "dependencies": "{'typing', 'dataclasses', 'collections.abc', 'copy', 'os', 'serena.tools', 'solidlsp.ls_types', 'json'}"
    },
    "serena.tools.cmd_tools": {
      "name": "serena.tools.cmd_tools",
      "path": "src/serena/tools/cmd_tools.py",
      "docstring": "Tools supporting the execution of (external) commands",
      "imports": [
        "from serena.tools",
        "from serena.util.shell"
      ],
      "classes": [
        {
          "name": "ExecuteShellCommandTool",
          "module": "serena.tools.cmd_tools",
          "docstring": "Executes a shell command.",
          "bases": [
            "Tool",
            "ToolMarkerCanEdit"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.cmd_tools",
              "signature": "def apply(self, command: str, cwd: str | None=None, capture_stderr: bool=True, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Execute a shell command and return its output. If there is a memory about suggested commands, read that first.\nNever execute unsafe shell commands like `rm -rf /` or similar!\n\n:param command: the shell command to execute\n:param cwd: the working directory to execute the command in. If None, the project root will be used.\n:param capture_stderr: whether to capture and return stderr output\n:param max_answer_chars: if the output is longer than this number of characters,\n    no content will be returned. Don't adjust unless there is really no other way to get the content\n    required for the task.\n:return: a JSON object containing the command's stdout and optionally stderr output",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "command",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "cwd",
                  "annotation": "str | None",
                  "default": null
                },
                {
                  "name": "capture_stderr",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 14
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 9,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'serena.tools', 'serena.util.shell'}"
    },
    "serena.tools.memory_tools": {
      "name": "serena.tools.memory_tools",
      "path": "src/serena/tools/memory_tools.py",
      "docstring": null,
      "imports": [
        "json",
        "from serena.tools"
      ],
      "classes": [
        {
          "name": "WriteMemoryTool",
          "module": "serena.tools.memory_tools",
          "docstring": "Writes a named memory (for future reference) to Serena's project-specific memory store.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.memory_tools",
              "signature": "def apply(self, memory_name: str, content: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Write some information about this project that can be useful for future tasks to a memory in md format.\nThe memory name should be meaningful.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "memory_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "content",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 11
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 6,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReadMemoryTool",
          "module": "serena.tools.memory_tools",
          "docstring": "Reads the memory with the given name from Serena's project-specific memory store.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.memory_tools",
              "signature": "def apply(self, memory_file_name: str, max_answer_chars: int=TOOL_DEFAULT_MAX_ANSWER_LENGTH) -> str:",
              "docstring": "Read the content of a memory file. This tool should only be used if the information\nis relevant to the current task. You can infer whether the information\nis relevant from the memory file name.\nYou should not read the same memory file multiple times in the same conversation.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "memory_file_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "max_answer_chars",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 29
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 24,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ListMemoriesTool",
          "module": "serena.tools.memory_tools",
          "docstring": "Lists memories in Serena's project-specific memory store.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.memory_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "List available memories. Any memory can be read using the `read_memory` tool.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 44
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 39,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeleteMemoryTool",
          "module": "serena.tools.memory_tools",
          "docstring": "Deletes a memory from Serena's project-specific memory store.",
          "bases": [
            "Tool"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.memory_tools",
              "signature": "def apply(self, memory_file_name: str) -> str:",
              "docstring": "Delete a memory file. Should only happen if a user asks for it explicitly,\nfor example by saying that the information retrieved from a memory file is no longer correct\nor no longer relevant for the project.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "memory_file_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 56
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 51,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'json', 'serena.tools'}"
    },
    "serena.tools.config_tools": {
      "name": "serena.tools.config_tools",
      "path": "src/serena/tools/config_tools.py",
      "docstring": null,
      "imports": [
        "json",
        "from serena.config.context_mode",
        "from serena.tools"
      ],
      "classes": [
        {
          "name": "ActivateProjectTool",
          "module": "serena.tools.config_tools",
          "docstring": "Activates a project by name.",
          "bases": [
            "Tool",
            "ToolMarkerDoesNotRequireActiveProject"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.config_tools",
              "signature": "def apply(self, project: str) -> str:",
              "docstring": "Activates the project with the given name.\n\n:param project: the name of a registered project to activate or a path to a project directory",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 12
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 7,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RemoveProjectTool",
          "module": "serena.tools.config_tools",
          "docstring": "Removes a project from the Serena configuration.",
          "bases": [
            "Tool",
            "ToolMarkerDoesNotRequireActiveProject",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.config_tools",
              "signature": "def apply(self, project_name: str) -> str:",
              "docstring": "Removes a project from the Serena configuration.\n\n:param project_name: Name of the project to remove",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "project_name",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 43
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 38,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SwitchModesTool",
          "module": "serena.tools.config_tools",
          "docstring": "Activates modes by providing a list of their names",
          "bases": [
            "Tool",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.config_tools",
              "signature": "def apply(self, modes: list[str]) -> str:",
              "docstring": "Activates the desired modes, like [\"editing\", \"interactive\"] or [\"planning\", \"one-shot\"]\n\n:param modes: the names of the modes to activate",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "modes",
                  "annotation": "list[str]",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 58
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 53,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GetCurrentConfigTool",
          "module": "serena.tools.config_tools",
          "docstring": "Prints the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
          "bases": [
            "Tool",
            "ToolMarkerOptional"
          ],
          "methods": [
            {
              "name": "apply",
              "module": "serena.tools.config_tools",
              "signature": "def apply(self) -> str:",
              "docstring": "Print the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 79
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 74,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'json', 'serena.tools', 'serena.config.context_mode'}"
    },
    "solidlsp.lsp_protocol_handler.server": {
      "name": "solidlsp.lsp_protocol_handler.server",
      "path": "src/solidlsp/lsp_protocol_handler/server.py",
      "docstring": "This file provides the implementation of the JSON-RPC client, that launches and\ncommunicates with the language server.\n\nThe initial implementation of this file was obtained from\nhttps://github.com/predragnikolic/OLSP under the MIT License with the following terms:\n\nMIT License\n\nCopyright (c) 2023 \u041f\u0440\u0435\u0434\u0440\u0430\u0433 \u041d\u0438\u043a\u043e\u043b\u0438\u045b\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "imports": [
        "dataclasses",
        "json",
        "logging",
        "os",
        "from typing",
        "from lsp_types"
      ],
      "classes": [
        {
          "name": "ProcessLaunchInfo",
          "module": "solidlsp.lsp_protocol_handler.server",
          "docstring": "This class is used to store the information required to launch a process.",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclasses.dataclass"
          ],
          "line_number": 47,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LSPError",
          "module": "solidlsp.lsp_protocol_handler.server",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.lsp_protocol_handler.server",
              "signature": "def __init__(self, code: ErrorCodes, message: str) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "code",
                  "annotation": "ErrorCodes",
                  "default": null
                },
                {
                  "name": "message",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 63
            },
            {
              "name": "to_lsp",
              "module": "solidlsp.lsp_protocol_handler.server",
              "signature": "def to_lsp(self) -> StringDict:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "StringDict",
              "line_number": 67
            },
            {
              "name": "from_lsp",
              "module": "solidlsp.lsp_protocol_handler.server",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "d",
                  "annotation": "StringDict",
                  "default": null
                }
              ],
              "return_annotation": "'LSPError'",
              "line_number": 71
            },
            {
              "name": "__str__",
              "module": "solidlsp.lsp_protocol_handler.server",
              "signature": "def __str__(self) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 74
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 62,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "StopLoopException",
          "module": "solidlsp.lsp_protocol_handler.server",
          "docstring": null,
          "bases": [
            "Exception"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 94,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MessageType",
          "module": "solidlsp.lsp_protocol_handler.server",
          "docstring": null,
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 107,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "make_response",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def make_response(request_id: Any, params: PayloadLike) -> StringDict:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "request_id",
              "annotation": "Any",
              "default": null
            },
            {
              "name": "params",
              "annotation": "PayloadLike",
              "default": null
            }
          ],
          "return_annotation": "StringDict",
          "line_number": 78
        },
        {
          "name": "make_error_response",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def make_error_response(request_id: Any, err: LSPError) -> StringDict:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "request_id",
              "annotation": "Any",
              "default": null
            },
            {
              "name": "err",
              "annotation": "LSPError",
              "default": null
            }
          ],
          "return_annotation": "StringDict",
          "line_number": 82
        },
        {
          "name": "make_notification",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def make_notification(method: str, params: PayloadLike) -> StringDict:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "method",
              "annotation": "str",
              "default": null
            },
            {
              "name": "params",
              "annotation": "PayloadLike",
              "default": null
            }
          ],
          "return_annotation": "StringDict",
          "line_number": 86
        },
        {
          "name": "make_request",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def make_request(method: str, request_id: Any, params: PayloadLike) -> StringDict:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "method",
              "annotation": "str",
              "default": null
            },
            {
              "name": "request_id",
              "annotation": "Any",
              "default": null
            },
            {
              "name": "params",
              "annotation": "PayloadLike",
              "default": null
            }
          ],
          "return_annotation": "StringDict",
          "line_number": 90
        },
        {
          "name": "create_message",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def create_message(payload: PayloadLike):",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "payload",
              "annotation": "PayloadLike",
              "default": null
            }
          ],
          "return_annotation": null,
          "line_number": 98
        },
        {
          "name": "content_length",
          "module": "solidlsp.lsp_protocol_handler.server",
          "signature": "def content_length(line: bytes) -> int | None:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "line",
              "annotation": "bytes",
              "default": null
            }
          ],
          "return_annotation": "int | None",
          "line_number": 114
        }
      ],
      "constants": [
        "CONTENT_LENGTH",
        "ENCODING"
      ],
      "dependencies": "{'typing', 'dataclasses', 'os', 'json', 'logging', 'lsp_types'}"
    },
    "solidlsp.lsp_protocol_handler.lsp_types": {
      "name": "solidlsp.lsp_protocol_handler.lsp_types",
      "path": "src/solidlsp/lsp_protocol_handler/lsp_types.py",
      "docstring": "This file provides the Python types corresponding to the Typescript types defined in the language server protocol.\nThis file is obtained from https://github.com/predragnikolic/OLSP under the MIT License with the following terms:\n\nMIT License\n\nCopyright (c) 2023 \u041f\u0440\u0435\u0434\u0440\u0430\u0433 \u041d\u0438\u043a\u043e\u043b\u0438\u045b\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "imports": [
        "from enum",
        "from typing",
        "from typing_extensions"
      ],
      "classes": [
        {
          "name": "SemanticTokenTypes",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A set of predefined token types. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 43,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokenModifiers",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A set of predefined token modifiers. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 79,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentDiagnosticReportKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The document diagnostic report kinds.\n\n@since 3.17.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 99,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ErrorCodes",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Predefined error codes.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 113,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LSPErrorCodes",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 127,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRangeKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A set of predefined range kinds.",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 155,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A symbol kind.",
          "bases": [
            "IntEnum"
          ],
          "methods": [
            {
              "name": "from_int",
              "module": "solidlsp.lsp_protocol_handler.lsp_types",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "value",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "'SymbolKind'",
              "line_number": 200
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 166,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolTag",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 207,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "UniquenessLevel",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Moniker uniqueness level to define scope of the moniker.\n\n@since 3.16.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 217,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MonikerKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The moniker kind.\n\n@since 3.16.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 235,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inlay hint kinds.\n\n@since 3.17.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 250,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MessageType",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The message type",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 262,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentSyncKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Defines how the host (editor) should sync\ndocument changes to the language server.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 275,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentSaveReason",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents reasons why a text document is saved.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 291,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItemKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The kind of a completion entry.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 303,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItemTag",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Completion item tags are extra annotations that tweak the rendering of a completion\nitem.\n\n@since 3.15.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 333,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertTextFormat",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Defines whether the insert text in a completion item should be interpreted as\nplain text or a snippet.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 344,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertTextMode",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "How whitespace and indentation is handled during completion\nitem insertion.\n\n@since 3.16.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 362,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlightKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A document highlight kind.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 385,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A set of predefined code action kinds",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 396,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TraceValues",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 450,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MarkupKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 459,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PositionEncodingKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A set of predefined position encoding kinds.\n\n@since 3.17.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 473,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileChangeType",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The file event type",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 494,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WatchKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "IntFlag"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 505,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticSeverity",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The diagnostic's severity.",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 514,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticTag",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The diagnostic tags.\n\n@since 3.15.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 527,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionTriggerKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "How a completion was triggered",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 544,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpTriggerKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "How a signature help was triggered.\n\n@since 3.15.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 557,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionTriggerKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The reason why code actions were requested.\n\n@since 3.17.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 571,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationPatternKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A pattern kind describing if a glob pattern matches a file a folder or\nboth.\n\n@since 3.16.0",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 586,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookCellKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A notebook cell kind.\n\n@since 3.17.0",
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 599,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ResourceOperationKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 611,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FailureHandlingKind",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 620,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PrepareSupportDefaultBehavior",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "IntEnum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 636,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TokenFormat",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "Enum"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 642,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ImplementationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 802,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Location",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 814,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ImplementationRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 823,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeDefinitionParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 832,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeDefinitionRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 844,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceFolder",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A workspace folder inside a client.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 853,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeWorkspaceFoldersParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a `workspace/didChangeWorkspaceFolders` notification.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 863,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ConfigurationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a configuration request.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 870,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentColorParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link DocumentColorRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 876,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ColorInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a color range from a document.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 888,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentColorRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 897,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ColorPresentationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link ColorPresentationRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 906,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ColorPresentation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 922,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 936,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "General text document registration options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 940,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRangeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link FoldingRangeRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 948,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRange",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a folding range. To be valid, start and end line must be bigger than zero and smaller\nthan the number of lines in the document. Clients are free to ignore invalid ranges.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 960,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRangeRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 987,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeclarationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 996,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeclarationRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1008,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SelectionRangeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A parameter literal used in selection range requests.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1017,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SelectionRange",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A selection range represents a part of a selection hierarchy. A selection range\nmay have a parent selection range that contains it.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1031,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SelectionRangeRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1042,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressCreateParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1051,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressCancelParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1056,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyPrepareParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `textDocument/prepareCallHierarchy` request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1061,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents programming constructs like functions or constructors in the context\nof call hierarchy.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1075,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Call hierarchy options used during static or dynamic registration.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1102,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyIncomingCallsParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `callHierarchy/incomingCalls` request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1116,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyOutgoingCallsParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `callHierarchy/outgoingCalls` request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1145,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyOutgoingCall",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1159,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1173,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokens",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1185,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensPartialResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1197,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1203,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensDeltaParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1221,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensDelta",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1236,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensDeltaPartialResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1244,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensRangeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1250,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Params to show a document.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1264,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowDocumentResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The result of a showDocument request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1288,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinkedEditingRangeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1298,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinkedEditingRanges",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The result of a linked editing range request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1307,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinkedEditingRangeRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1322,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CreateFilesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in notifications/requests for user-initiated creation of\nfiles.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1331,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A workspace edit represents changes to many resources managed in the workspace. The edit\nshould either provide `changes` or `documentChanges`. If documentChanges are present\nthey are preferred over `changes` if the client can handle versioned document edits.\n\nSince version 3.13.0 a workspace edit can contain resource operations as well. If resource\noperations are present clients need to execute the operations in the order in which they\nare provided. So a workspace edit for example can consist of the following two changes:\n(1) a create file a.txt and (2) a text document edit which insert text into file a.txt.\n\nAn invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will\ncause failure of the operation. How the client recovers from the failure is described by\nthe client capability: `workspace.workspaceEdit.failureHandling`",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1342,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The options to register for file operations.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1379,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameFilesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in notifications/requests for user-initiated renames of\nfiles.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1389,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeleteFilesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in notifications/requests for user-initiated deletes of\nfiles.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1401,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MonikerParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1412,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Moniker",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Moniker definition to match LSIF 0.5 moniker definition.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1424,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MonikerRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1441,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchyPrepareParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `textDocument/prepareTypeHierarchy` request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1447,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchyItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1461,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchyRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Type hierarchy options used during static or dynamic registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1488,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchySupertypesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `typeHierarchy/supertypes` request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1502,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchySubtypesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameter of a `typeHierarchy/subtypes` request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1516,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A parameter literal used in inline value requests.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1530,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inline value options used during static or dynamic registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1547,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A parameter literal used in inlay hint requests.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1561,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHint",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inlay hint information.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1575,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inlay hint options used during static or dynamic registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1616,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentDiagnosticParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters of the document diagnostic request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1633,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentDiagnosticReportPartialResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A partial result for a document diagnostic report.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1652,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticServerCancellationData",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Cancellation data returned from a diagnostic request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1664,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Diagnostic registration options.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1673,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceDiagnosticParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters of the workspace diagnostic request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1697,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A workspace diagnostic report.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1715,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceDiagnosticReportPartialResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A partial result for a workspace diagnostic report.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1724,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidOpenNotebookDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The params sent in an open notebook document notification.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1733,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeNotebookDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The params sent in a change notebook document notification.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1746,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidSaveNotebookDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The params sent in a save notebook document notification.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1773,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidCloseNotebookDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The params sent in a close notebook document notification.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1783,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RegistrationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1796,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "UnregistrationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1800,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InitializeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1804,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InitializeResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The result returned from an initialize request.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1851,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InitializeError",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The data type of the ResponseError if the\ninitialize request fails.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1862,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InitializedParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1874,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeConfigurationParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a change configuration notification.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1878,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeConfigurationRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1885,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowMessageParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a notification message.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1889,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowMessageRequestParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1898,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MessageActionItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1907,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LogMessageParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The log message parameters.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1912,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidOpenTextDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in an open text document notification",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1921,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeTextDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The change text document notification's parameters.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1928,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentChangeRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Describe options to be used when registered for text document change events.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1949,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidCloseTextDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in a close text document notification",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1959,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidSaveTextDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in a save text document notification",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1966,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentSaveRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Save registration options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1976,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WillSaveTextDocumentParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters sent in a will save text document notification.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1986,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A text edit applicable to a text document.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 1995,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeWatchedFilesParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The watched files change notification's parameters.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2006,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeWatchedFilesRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Describe options to be used when registered for text document change events.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2013,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PublishDiagnosticsParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The publish diagnostic notification's parameters.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2020,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Completion parameters",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2033,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2050,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionList",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a collection of {@link CompletionItem completion items} to be presented\nin the editor.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2174,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link CompletionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2202,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "HoverParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link HoverRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2236,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Hover",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The result of a hover request.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2247,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "HoverRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link HoverRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2257,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link SignatureHelpRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2265,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelp",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Signature help represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2281,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link SignatureHelpRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2309,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DefinitionParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link DefinitionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2326,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DefinitionRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DefinitionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2340,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link ReferencesRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2348,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link ReferencesRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2363,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlightParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link DocumentHighlightRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2371,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlight",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A document highlight is a range inside a text document which deserves\nspecial attention. Usually a document highlight is visualized by changing\nthe background color of its range.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2385,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlightRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentHighlightRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2397,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentSymbolParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Parameters for a {@link DocumentSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2405,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SymbolInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2417,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentSymbol",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents programming constructs like variables, classes, interfaces etc.\nthat appear in a document. Document symbols can be hierarchical and they\nhave two ranges: one that encloses its definition and one that points to\nits most interesting range, e.g. the range of an identifier.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2451,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentSymbolRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2482,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link CodeActionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2495,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Command",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a reference to a command. Provides a title which\nwill be used to represent a command in the UI and, optionally,\nan array of arguments which will be passed to the command handler\nfunction when invoked.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2511,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeAction",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A code action represents a change that can be performed in code, e.g. to fix a problem or\nto refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2527,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link CodeActionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2579,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceSymbolParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link WorkspaceSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2597,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceSymbol",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A special workspace symbol that supports locations without a range.\n\nSee also SymbolInformation.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2610,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceSymbolRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link WorkspaceSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2642,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLensParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link CodeLensRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2652,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLens",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A code lens represents a {@link Command command} that should be shown along with\nsource text, like the number of references, a way to run tests, etc.\n\nA code lens is _unresolved_ when no command is associated to it. For performance\nreasons the creation of a code lens and resolving should be done in two stages.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2664,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLensRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link CodeLensRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2682,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentLinkParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link DocumentLinkRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2692,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentLink",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A document link is a range in a text document that links to an internal or external resource, like another\ntext document or a web site.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2704,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentLinkRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentLinkRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2726,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentFormattingParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link DocumentFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2736,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentFormattingRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2747,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentRangeFormattingParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link DocumentRangeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2755,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentRangeFormattingRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentRangeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2768,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentOnTypeFormattingParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link DocumentOnTypeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2776,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentOnTypeFormattingRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link DocumentOnTypeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2794,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link RenameRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2806,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link RenameRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2821,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PrepareRenameParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2833,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecuteCommandParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters of a {@link ExecuteCommandRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2842,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecuteCommandRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options for a {@link ExecuteCommandRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2853,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ApplyWorkspaceEditParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The parameters passed via a apply workspace edit request.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2860,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ApplyWorkspaceEditResult",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The result returned from the apply workspace edit request.\n\n@since 3.17 renamed from ApplyWorkspaceEditResponse",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2871,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressBegin",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2889,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2915,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressEnd",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2937,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SetTraceParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2944,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LogTraceParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2948,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CancelParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2953,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ProgressParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2958,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentPositionParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A parameter literal used in requests to pass a text document and a position inside that\ndocument.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2965,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkDoneProgressParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2976,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PartialResultParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2981,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LocationLink",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},\nincluding an origin range.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 2987,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Range",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3008,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ImplementationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3028,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "StaticRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Static registration options to be returned in the initialize\nrequest.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3032,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeDefinitionOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3042,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceFoldersChangeEvent",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The workspace folder change event.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3046,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ConfigurationItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3055,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentIdentifier",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A literal to identify a text document in the client.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3062,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Color",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a color in RGBA space.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3069,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentColorOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3082,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRangeOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3086,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeclarationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3090,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Position",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3094,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SelectionRangeOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3139,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Call hierarchy options used during static registration.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3143,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3152,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3165,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinkedEditingRangeOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3176,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileCreate",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents information on a file/folder create.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3180,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Describes textual changes on a text document. A TextDocumentEdit describes all changes\non a document version Si and after they are applied move the document to version Si+1.\nSo the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any\nkind of ordering. However the edits must be non overlapping.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3190,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CreateFile",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Create file operation.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3206,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameFile",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Rename file operation",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3221,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeleteFile",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Delete file operation",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3238,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ChangeAnnotation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Additional information that describes document changes.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3253,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationFilter",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A filter to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3270,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileRename",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents information on a file/folder rename.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3283,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileDelete",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents information on a file/folder delete.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3295,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MonikerOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3305,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchyOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Type hierarchy options used during static registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3309,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueContext",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3318,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueText",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provide inline value as text.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3328,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueVariableLookup",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provide inline value through a variable lookup.\nIf only a range is specified, the variable name will be extracted from the underlying document.\nAn optional variable name can be used to override the extracted name.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3340,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueEvaluatableExpression",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provide an inline value through an expression evaluation.\nIf only a range is specified, the expression will be extracted from the underlying document.\nAn optional expression can be used to override the extracted expression.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3357,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inline value options used during static registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3372,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintLabelPart",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "An inlay hint label part allows for interactive and composite labels\nof inlay hints.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3381,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MarkupContent",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3413,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inlay hint options used during static registration.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3444,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RelatedFullDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A full diagnostic report with a set of related documents.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3456,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RelatedUnchangedDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "An unchanged diagnostic report with a set of related documents.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3485,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FullDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A diagnostic report with a full set of problems.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3514,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "UnchangedDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A diagnostic report indicating that the last returned\nreport is still accurate.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3530,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Diagnostic options.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3547,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PreviousResultId",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A previous result id in a workspace pull request.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3566,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocument",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A notebook document.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3579,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentItem",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "An item to transfer a text document from the client to the\nserver.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3601,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "VersionedNotebookDocumentIdentifier",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A versioned notebook document identifier.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3617,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentChangeEvent",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A change event for a notebook document.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3629,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentIdentifier",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A literal to identify a notebook document in the client.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3643,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Registration",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "General parameters to to register for an notification or to register a provider.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3653,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Unregistration",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "General parameters to unregister a request or notification.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3665,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceFoldersInitializeParams",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3675,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ServerCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Defines the capabilities provided by a language\nserver.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3686,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "VersionedTextDocumentIdentifier",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A text document identifier to denote a specific version of a text document.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3795,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SaveOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Save options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3804,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileEvent",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "An event describing a file change.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3811,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileSystemWatcher",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3820,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "Diagnostic",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3831,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionContext",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Contains additional information about the context in which a completion request is triggered.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3868,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionItemLabelDetails",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Additional details for a completion item label.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3878,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InsertReplaceEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A special text edit to provide an insert and a replace operation.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3892,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Completion options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3906,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "HoverOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Hover options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3938,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpContext",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Additional information about the context in which a signature help request was triggered.\n\n@since 3.15.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3944,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3968,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Server Capabilities for a {@link SignatureHelpRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 3990,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DefinitionOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Server Capabilities for a {@link DefinitionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4005,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceContext",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Value-object that contains additional information when\nrequesting references.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4011,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Reference options.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4020,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlightOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentHighlightRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4026,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "BaseSymbolInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A base for all symbol information.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4032,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentSymbolOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4050,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionContext",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Contains additional diagnostic information about the context in which\na {@link CodeActionProvider.provideCodeActions code action} is run.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4061,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link CodeActionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4083,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceSymbolOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Server capabilities for a {@link WorkspaceSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4099,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLensOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Code Lens provider options of a {@link CodeLensRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4110,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentLinkOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentLinkRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4118,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FormattingOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Value-object describing what options formatting should use.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4126,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentFormattingOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4147,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentRangeFormattingOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentRangeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4153,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentOnTypeFormattingOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link DocumentOnTypeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4159,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Provider options for a {@link RenameRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4168,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecuteCommandOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The server capabilities of a {@link ExecuteCommandRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4178,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensLegend",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4186,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "OptionalVersionedTextDocumentIdentifier",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A text document identifier to optionally denote a specific version of a text document.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4195,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "AnnotatedTextEdit",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A special text edit with an additional change annotation.\n\n@since 3.16.0.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4208,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ResourceOperation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A generic resource operation.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4224,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CreateFileOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Options to create a file.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4235,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameFileOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Rename file options",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4244,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeleteFileOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Delete file options",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4253,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationPattern",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A pattern to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4262,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceFullDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A full document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4285,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceUnchangedDocumentDiagnosticReport",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "An unchanged document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4306,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookCell",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A notebook cell.\n\nA cell's document URI must be unique across ALL notebook\ncells and can therefore be used to uniquely identify a\nnotebook cell or the cell's text document.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4327,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookCellArrayChange",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A change describing how to move a `NotebookCell`\narray from state S to S'.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4351,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Defines the capabilities provided by the client.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4366,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentSyncOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4387,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentSyncOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Options specific to a notebook plus its cells\nto be synced to the server.\n\nIf a selector provides a notebook document\nfilter but no cell selector all cells of a\nmatching notebook document will be synced.\n\nIf a selector provides no notebook document\nfilter but only a cell selector all notebook\ndocument that contain at least one matching\ncell will be synced.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4405,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentSyncRegistrationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Registration options specific to a notebook.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4433,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceFoldersServerCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4454,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Options for notifications/requests for user operations on files.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4467,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeDescription",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Structure to capture a description for an error code.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4487,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticRelatedInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4497,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ParameterInformation",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4509,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookCellTextDocumentFilter",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A notebook cell text document filter denotes a cell text\ndocument by different properties.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4528,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationPatternOptions",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Matching options for the file operation pattern.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4547,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecutionSummary",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4557,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Workspace specific client capabilities.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4567,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Text document specific client capabilities.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4623,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Capabilities specific to the notebook document support.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4717,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WindowClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4729,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "GeneralClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "General client capabilities.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4750,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RelativePattern",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "A relative pattern is a helper to construct glob patterns that are matched\nrelatively to a base URI. The common value for a `baseUri` is a workspace\nfolder root, but it can be another absolute URI as well.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4792,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceEditClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4807,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeConfigurationClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4835,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DidChangeWatchedFilesClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4840,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "WorkspaceSymbolClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities for a {@link WorkspaceSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4852,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ExecuteCommandClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The client capabilities of a {@link ExecuteCommandRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4872,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensWorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4879,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLensWorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4892,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FileOperationClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Capabilities relating to events from file operations by the user in the client.\n\nThese events do not come from the file system, they come from user operations\nlike renaming a file in the UI.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4905,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueWorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client workspace capabilities specific to inline values.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4930,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintWorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client workspace capabilities specific to inlay hints.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4946,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticWorkspaceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Workspace client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4962,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TextDocumentSyncClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4978,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CompletionClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Completion client capabilities",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 4991,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "HoverClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5016,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SignatureHelpClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client Capabilities for a {@link SignatureHelpRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5024,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DeclarationClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.14.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5041,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DefinitionClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client Capabilities for a {@link DefinitionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5052,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeDefinitionClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Since 3.6.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5063,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ImplementationClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.6.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5076,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ReferenceClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client Capabilities for a {@link ReferencesRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5089,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentHighlightClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client Capabilities for a {@link DocumentHighlightRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5096,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentSymbolClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client Capabilities for a {@link DocumentSymbolRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5103,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeActionClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The Client Capabilities of a {@link CodeActionRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5126,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CodeLensClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The client capabilities  of a {@link CodeLensRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5166,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentLinkClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The client capabilities of a {@link DocumentLinkRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5173,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentColorClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5184,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentFormattingClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities of a {@link DocumentFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5191,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentRangeFormattingClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities of a {@link DocumentRangeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5198,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DocumentOnTypeFormattingClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities of a {@link DocumentOnTypeFormattingRequest}.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5205,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RenameClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5212,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "FoldingRangeClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5237,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SelectionRangeClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5261,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "PublishDiagnosticsClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "The publish diagnostic client capabilities.",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5268,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "CallHierarchyClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5295,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "SemanticTokensClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5304,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LinkedEditingRangeClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities for the linked editing range request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5350,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MonikerClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities specific to the moniker request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5362,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "TypeHierarchyClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5374,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlineValueClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities specific to inline values.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5383,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "InlayHintClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Inlay hint client capabilities.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5393,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "DiagnosticClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5406,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "NotebookDocumentSyncClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Notebook specific client capabilities.\n\n@since 3.17.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5420,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowMessageRequestClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Show message request client capabilities",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5435,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "ShowDocumentClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities for the showDocument request.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5442,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "RegularExpressionsClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities specific to regular expressions.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5453,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "MarkdownClientCapabilities",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": "Client capabilities specific to the used markdown parser.\n\n@since 3.16.0",
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5465,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5482,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_codeActionKind_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5488,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CodeActionClientCapabilities_resolveSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5496,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CodeAction_disabled_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5501,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionItemKind_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5508,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionItem_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5520,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionItem_insertTextModeSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5568,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionItem_resolveSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5572,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionItem_tagSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5577,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionClientCapabilities_completionList_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5582,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionList_itemDefaults_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5594,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionList_itemDefaults_editRange_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5617,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionOptions_completionItem_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5622,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__CompletionOptions_completionItem_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5631,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__DocumentSymbolClientCapabilities_symbolKind_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5640,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__DocumentSymbolClientCapabilities_tagSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5652,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__FoldingRangeClientCapabilities_foldingRangeKind_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5657,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__FoldingRangeClientCapabilities_foldingRange_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5665,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__GeneralClientCapabilities_staleRequestSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5673,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__InitializeResult_serverInfo_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5682,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__InlayHintClientCapabilities_resolveSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5689,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__MarkedString_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5694,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentChangeEvent_cells_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5699,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentChangeEvent_cells_structure_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5710,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentChangeEvent_cells_textContent_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5719,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentFilter_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5724,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentFilter_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5733,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentFilter_Type_3",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5742,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5751,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5760,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_3",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5769,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_4",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5778,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5787,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5791,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_3",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5795,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_4",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5799,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__PrepareRenameResult_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5803,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__PrepareRenameResult_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5808,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__PublishDiagnosticsClientCapabilities_tagSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5812,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SemanticTokensClientCapabilities_requests_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5817,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SemanticTokensClientCapabilities_requests_full_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5826,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SemanticTokensOptions_full_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5832,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SemanticTokensOptions_full_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5837,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__ServerCapabilities_workspace_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5842,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__ShowMessageRequestClientCapabilities_messageActionItem_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5853,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SignatureHelpClientCapabilities_signatureInformation_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5860,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__SignatureHelpClientCapabilities_signatureInformation_parameterInformation_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5873,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__TextDocumentContentChangeEvent_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5881,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__TextDocumentContentChangeEvent_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5892,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__TextDocumentFilter_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5897,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__TextDocumentFilter_Type_2",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5906,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__TextDocumentFilter_Type_3",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5915,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__WorkspaceEditClientCapabilities_changeAnnotationSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5924,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__WorkspaceSymbolClientCapabilities_resolveSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5931,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__WorkspaceSymbolClientCapabilities_symbolKind_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5937,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__WorkspaceSymbolClientCapabilities_tagSupport_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5949,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "__WorkspaceSymbol_location_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5954,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "___InitializeParams_clientInfo_Type_1",
          "module": "solidlsp.lsp_protocol_handler.lsp_types",
          "docstring": null,
          "bases": [
            "TypedDict"
          ],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 5958,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "URI",
        "UTF8",
        "UTF16",
        "UTF32"
      ],
      "dependencies": "{'typing', 'enum', 'typing_extensions'}"
    },
    "solidlsp.lsp_protocol_handler.lsp_constants": {
      "name": "solidlsp.lsp_protocol_handler.lsp_constants",
      "path": "src/solidlsp/lsp_protocol_handler/lsp_constants.py",
      "docstring": "This module contains constants used in the LSP protocol.",
      "imports": [],
      "classes": [
        {
          "name": "LSPConstants",
          "module": "solidlsp.lsp_protocol_handler.lsp_constants",
          "docstring": "This class contains constants used in the LSP protocol.",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [],
          "line_number": 6,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [
        "URI",
        "RANGE",
        "ORIGIN_SELECTION_RANGE",
        "TARGET_URI",
        "TARGET_RANGE",
        "TARGET_SELECTION_RANGE",
        "TEXT_DOCUMENT",
        "LANGUAGE_ID",
        "VERSION",
        "TEXT",
        "POSITION",
        "LINE",
        "CHARACTER",
        "CONTENT_CHANGES",
        "NAME",
        "KIND",
        "CHILDREN",
        "LOCATION",
        "SEVERITY",
        "MESSAGE"
      ],
      "dependencies": "set()"
    },
    "solidlsp.lsp_protocol_handler.lsp_requests": {
      "name": "solidlsp.lsp_protocol_handler.lsp_requests",
      "path": "src/solidlsp/lsp_protocol_handler/lsp_requests.py",
      "docstring": "This file provides the python interface corresponding to the requests and notifications defined in Typescript in the language server protocol.\nThis file is obtained from https://github.com/predragnikolic/OLSP under the MIT License with the following terms:\n\nMIT License\n\nCopyright (c) 2023 \u041f\u0440\u0435\u0434\u0440\u0430\u0433 \u041d\u0438\u043a\u043e\u043b\u0438\u045b\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
      "imports": [
        "from typing",
        "from solidlsp.lsp_protocol_handler"
      ],
      "classes": [
        {
          "name": "LspRequest",
          "module": "solidlsp.lsp_protocol_handler.lsp_requests",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def __init__(self, send_request):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "send_request",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 38
            },
            {
              "name": "implementation",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ImplementationParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 41
            },
            {
              "name": "type_definition",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeDefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 51
            },
            {
              "name": "document_color",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
              "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentColorParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.ColorInformation']",
              "line_number": 61
            },
            {
              "name": "color_presentation",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
              "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ColorPresentationParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.ColorPresentation']",
              "line_number": 69
            },
            {
              "name": "folding_range",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
              "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.FoldingRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.FoldingRange'] | None",
              "line_number": 77
            },
            {
              "name": "declaration",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DeclarationParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
              "line_number": 85
            },
            {
              "name": "selection_range",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
              "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SelectionRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SelectionRange'] | None",
              "line_number": 96
            },
            {
              "name": "prepare_call_hierarchy",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
              "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyPrepareParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
              "line_number": 104
            },
            {
              "name": "incoming_calls",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
              "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
              "line_number": 112
            },
            {
              "name": "outgoing_calls",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
              "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
              "line_number": 121
            },
            {
              "name": "semantic_tokens_full",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', None]",
              "line_number": 130
            },
            {
              "name": "semantic_tokens_delta",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensDeltaParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
              "line_number": 134
            },
            {
              "name": "semantic_tokens_range",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
              "docstring": "@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SemanticTokensRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SemanticTokens', None]",
              "line_number": 140
            },
            {
              "name": "linked_editing_range",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
              "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.LinkedEditingRangeParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
              "line_number": 144
            },
            {
              "name": "will_create_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CreateFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 151
            },
            {
              "name": "will_rename_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.RenameFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 159
            },
            {
              "name": "will_delete_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DeleteFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 167
            },
            {
              "name": "moniker",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
              "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.MonikerParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.Moniker'] | None",
              "line_number": 175
            },
            {
              "name": "prepare_type_hierarchy",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchyPrepareParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 182
            },
            {
              "name": "type_hierarchy_supertypes",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchySupertypesParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 190
            },
            {
              "name": "type_hierarchy_subtypes",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
              "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.TypeHierarchySubtypesParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
              "line_number": 199
            },
            {
              "name": "inline_value",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
              "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlineValueParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.InlineValue'] | None",
              "line_number": 206
            },
            {
              "name": "inlay_hint",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
              "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlayHintParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.InlayHint'] | None",
              "line_number": 215
            },
            {
              "name": "resolve_inlay_hint",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
              "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InlayHint",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.InlayHint'",
              "line_number": 224
            },
            {
              "name": "text_document_diagnostic",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
              "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentDiagnosticParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
              "line_number": 233
            },
            {
              "name": "workspace_diagnostic",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
              "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceDiagnosticParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
              "line_number": 240
            },
            {
              "name": "initialize",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
              "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InitializeParams",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.InitializeResult'",
              "line_number": 247
            },
            {
              "name": "shutdown",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def shutdown(self) -> None:",
              "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 256
            },
            {
              "name": "will_save_wait_until",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WillSaveTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 264
            },
            {
              "name": "completion",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
              "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CompletionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
              "line_number": 274
            },
            {
              "name": "resolve_completion_item",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
              "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CompletionItem",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CompletionItem'",
              "line_number": 289
            },
            {
              "name": "hover",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
              "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.HoverParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Hover', None]",
              "line_number": 296
            },
            {
              "name": "signature_help",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
              "docstring": null,
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SignatureHelpParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.SignatureHelp', None]",
              "line_number": 303
            },
            {
              "name": "definition",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
              "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
              "line_number": 306
            },
            {
              "name": "references",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
              "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ReferenceParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.Location'] | None",
              "line_number": 315
            },
            {
              "name": "document_highlight",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
              "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentHighlightParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
              "line_number": 323
            },
            {
              "name": "document_symbol",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
              "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentSymbolParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
              "line_number": 331
            },
            {
              "name": "code_action",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
              "docstring": "A request to provide commands for the given text document and range.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeActionParams",
                  "default": null
                }
              ],
              "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
              "line_number": 341
            },
            {
              "name": "resolve_code_action",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
              "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeAction",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CodeAction'",
              "line_number": 345
            },
            {
              "name": "workspace_symbol",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
              "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceSymbolParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
              "line_number": 352
            },
            {
              "name": "resolve_workspace_symbol",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
              "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkspaceSymbol",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.WorkspaceSymbol'",
              "line_number": 366
            },
            {
              "name": "code_lens",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
              "docstring": "A request to provide code lens for the given text document.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeLensParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.CodeLens'] | None",
              "line_number": 374
            },
            {
              "name": "resolve_code_lens",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
              "docstring": "A request to resolve a command for a given code lens.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CodeLens",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.CodeLens'",
              "line_number": 378
            },
            {
              "name": "document_link",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
              "docstring": "A request to provide document links",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentLinkParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.DocumentLink'] | None",
              "line_number": 382
            },
            {
              "name": "resolve_document_link",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
              "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentLink",
                  "default": null
                }
              ],
              "return_annotation": "'lsp_types.DocumentLink'",
              "line_number": 386
            },
            {
              "name": "formatting",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to to format a whole document.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 393
            },
            {
              "name": "range_formatting",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to to format a range in a document.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentRangeFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 397
            },
            {
              "name": "on_type_formatting",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
              "docstring": "A request to format a document on type.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                  "default": null
                }
              ],
              "return_annotation": "list['lsp_types.TextEdit'] | None",
              "line_number": 401
            },
            {
              "name": "rename",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
              "docstring": "A request to rename a symbol.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.RenameParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
              "line_number": 405
            },
            {
              "name": "prepare_rename",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
              "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.PrepareRenameParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
              "line_number": 409
            },
            {
              "name": "execute_command",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "async def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
              "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
              "is_method": true,
              "is_async": true,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ExecuteCommandParams",
                  "default": null
                }
              ],
              "return_annotation": "Union['lsp_types.LSPAny', None]",
              "line_number": 416
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 37,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "LspNotification",
          "module": "solidlsp.lsp_protocol_handler.lsp_requests",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def __init__(self, send_notification):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "send_notification",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 424
            },
            {
              "name": "did_change_workspace_folders",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_change_workspace_folders(self, params: lsp_types.DidChangeWorkspaceFoldersParams) -> None:",
              "docstring": "The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace\nfolder configuration changes.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidChangeWorkspaceFoldersParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 427
            },
            {
              "name": "cancel_work_done_progress",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def cancel_work_done_progress(self, params: lsp_types.WorkDoneProgressCancelParams) -> None:",
              "docstring": "The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\ninitiated on the server side.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WorkDoneProgressCancelParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 433
            },
            {
              "name": "did_create_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_create_files(self, params: lsp_types.CreateFilesParams) -> None:",
              "docstring": "The did create files notification is sent from the client to the server when\nfiles were created from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CreateFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 439
            },
            {
              "name": "did_rename_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_rename_files(self, params: lsp_types.RenameFilesParams) -> None:",
              "docstring": "The did rename files notification is sent from the client to the server when\nfiles were renamed from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.RenameFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 447
            },
            {
              "name": "did_delete_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_delete_files(self, params: lsp_types.DeleteFilesParams) -> None:",
              "docstring": "The will delete files request is sent from the client to the server before files are actually\ndeleted as long as the deletion is triggered from within the client.\n\n@since 3.16.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DeleteFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 455
            },
            {
              "name": "did_open_notebook_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_open_notebook_document(self, params: lsp_types.DidOpenNotebookDocumentParams) -> None:",
              "docstring": "A notification sent when a notebook opens.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidOpenNotebookDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 463
            },
            {
              "name": "did_change_notebook_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_change_notebook_document(self, params: lsp_types.DidChangeNotebookDocumentParams) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidChangeNotebookDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 470
            },
            {
              "name": "did_save_notebook_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_save_notebook_document(self, params: lsp_types.DidSaveNotebookDocumentParams) -> None:",
              "docstring": "A notification sent when a notebook document is saved.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidSaveNotebookDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 473
            },
            {
              "name": "did_close_notebook_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_close_notebook_document(self, params: lsp_types.DidCloseNotebookDocumentParams) -> None:",
              "docstring": "A notification sent when a notebook closes.\n\n@since 3.17.0",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidCloseNotebookDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 480
            },
            {
              "name": "initialized",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def initialized(self, params: lsp_types.InitializedParams) -> None:",
              "docstring": "The initialized notification is sent from the client to the\nserver after the client is fully initialized and the server\nis allowed to send requests from the server to the client.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.InitializedParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 487
            },
            {
              "name": "exit",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def exit(self) -> None:",
              "docstring": "The exit event is sent from the client to the server to\nask the server to exit its process.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 494
            },
            {
              "name": "workspace_did_change_configuration",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def workspace_did_change_configuration(self, params: lsp_types.DidChangeConfigurationParams) -> None:",
              "docstring": "The configuration change notification is sent from the client to the server\nwhen the client's configuration has changed. The notification contains\nthe changed configuration as defined by the language client.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidChangeConfigurationParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 500
            },
            {
              "name": "did_open_text_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_open_text_document(self, params: lsp_types.DidOpenTextDocumentParams) -> None:",
              "docstring": "The document open notification is sent from the client to the server to signal\nnewly opened text documents. The document's truth is now managed by the client\nand the server must not try to read the document's truth using the document's\nuri. Open in this sense means it is managed by the client. It doesn't necessarily\nmean that its content is presented in an editor. An open notification must not\nbe sent more than once without a corresponding close notification send before.\nThis means open and close notification must be balanced and the max open count\nis one.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidOpenTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 507
            },
            {
              "name": "did_change_text_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_change_text_document(self, params: lsp_types.DidChangeTextDocumentParams) -> None:",
              "docstring": "The document change notification is sent from the client to the server to signal\nchanges to a text document.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidChangeTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 519
            },
            {
              "name": "did_close_text_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_close_text_document(self, params: lsp_types.DidCloseTextDocumentParams) -> None:",
              "docstring": "The document close notification is sent from the client to the server when\nthe document got closed in the client. The document's truth now exists where\nthe document's uri points to (e.g. if the document's uri is a file uri the\ntruth now exists on disk). As with the open notification the close notification\nis about managing the document's content. Receiving a close notification\ndoesn't mean that the document was open in an editor before. A close\nnotification requires a previous open notification to be sent.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidCloseTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 525
            },
            {
              "name": "did_save_text_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_save_text_document(self, params: lsp_types.DidSaveTextDocumentParams) -> None:",
              "docstring": "The document save notification is sent from the client to the server when\nthe document got saved in the client.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidSaveTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 536
            },
            {
              "name": "will_save_text_document",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def will_save_text_document(self, params: lsp_types.WillSaveTextDocumentParams) -> None:",
              "docstring": "A document will save notification is sent from the client to the server before\nthe document is actually saved.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.WillSaveTextDocumentParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 542
            },
            {
              "name": "did_change_watched_files",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def did_change_watched_files(self, params: lsp_types.DidChangeWatchedFilesParams) -> None:",
              "docstring": "The watched files notification is sent from the client to the server when\nthe client detects changes to file watched by the language client.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.DidChangeWatchedFilesParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 548
            },
            {
              "name": "set_trace",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def set_trace(self, params: lsp_types.SetTraceParams) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.SetTraceParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 554
            },
            {
              "name": "cancel_request",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def cancel_request(self, params: lsp_types.CancelParams) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.CancelParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 557
            },
            {
              "name": "progress",
              "module": "solidlsp.lsp_protocol_handler.lsp_requests",
              "signature": "def progress(self, params: lsp_types.ProgressParams) -> None:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "params",
                  "annotation": "lsp_types.ProgressParams",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 560
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 423,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'solidlsp.lsp_protocol_handler'}"
    },
    "solidlsp.util.zip": {
      "name": "solidlsp.util.zip",
      "path": "src/solidlsp/util/zip.py",
      "docstring": null,
      "imports": [
        "fnmatch",
        "logging",
        "os",
        "sys",
        "zipfile",
        "from pathlib",
        "from typing"
      ],
      "classes": [
        {
          "name": "SafeZipExtractor",
          "module": "solidlsp.util.zip",
          "docstring": "A utility class for extracting ZIP archives safely.\n\nFeatures:\n- Handles long file paths on Windows\n- Skips files that fail to extract, continuing with the rest\n- Creates necessary directories automatically\n- Optional include/exclude pattern filters",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.util.zip",
              "signature": "def __init__(self, archive_path: Path, extract_dir: Path, verbose: bool=True, include_patterns: Optional[list[str]]=None, exclude_patterns: Optional[list[str]]=None) -> None:",
              "docstring": "Initialize the SafeZipExtractor.\n\n:param archive_path: Path to the ZIP archive file\n:param extract_dir: Directory where files will be extracted\n:param verbose: Whether to log status messages\n:param include_patterns: List of glob patterns for files to extract (None = all files)\n:param exclude_patterns: List of glob patterns for files to skip",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "archive_path",
                  "annotation": "Path",
                  "default": null
                },
                {
                  "name": "extract_dir",
                  "annotation": "Path",
                  "default": null
                },
                {
                  "name": "verbose",
                  "annotation": "bool",
                  "default": null
                },
                {
                  "name": "include_patterns",
                  "annotation": "Optional[list[str]]",
                  "default": null
                },
                {
                  "name": "exclude_patterns",
                  "annotation": "Optional[list[str]]",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 23
            },
            {
              "name": "extract_all",
              "module": "solidlsp.util.zip",
              "signature": "def extract_all(self) -> None:",
              "docstring": "Extract all files from the archive, skipping any that fail.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 46
            },
            {
              "name": "_should_extract",
              "module": "solidlsp.util.zip",
              "signature": "def _should_extract(self, filename: str) -> bool:",
              "docstring": "Determine whether a file should be extracted based on include/exclude patterns.\n\n:param filename: The file name from the archive\n:return: True if the file should be extracted",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "filename",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 63
            },
            {
              "name": "_extract_member",
              "module": "solidlsp.util.zip",
              "signature": "def _extract_member(self, zip_ref: zipfile.ZipFile, member: zipfile.ZipInfo) -> None:",
              "docstring": "Extract a single member from the archive with error handling.\n\n:param zip_ref: Open ZipFile object\n:param member: ZipInfo object representing the file",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "zip_ref",
                  "annotation": "zipfile.ZipFile",
                  "default": null
                },
                {
                  "name": "member",
                  "annotation": "zipfile.ZipInfo",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 82
            },
            {
              "name": "_normalize_path",
              "module": "solidlsp.util.zip",
              "signature": "@staticmethod",
              "docstring": "Adjust path to handle long paths on Windows.\n\n:param path: Original path\n:return: Normalized path",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "path",
                  "annotation": "Path",
                  "default": null
                }
              ],
              "return_annotation": "Path",
              "line_number": 109
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 12,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'typing', 'sys', 'os', 'fnmatch', 'zipfile', 'logging', 'pathlib'}"
    },
    "solidlsp.language_servers.pyright_server": {
      "name": "solidlsp.language_servers.pyright_server",
      "path": "src/solidlsp/language_servers/pyright_server.py",
      "docstring": "Provides Python specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Python.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "re",
        "threading",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "PyrightServer",
          "module": "solidlsp.language_servers.pyright_server",
          "docstring": "Provides Python specific instantiation of the LanguageServer class using Pyright.\nContains various configurations and settings specific to Python.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.pyright_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a PyrightServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 27
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.pyright_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 50
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.pyright_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Pyright Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 54
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.pyright_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Pyright Language Server and waits for initial workspace analysis to complete.\n\nThis prevents zombie processes by ensuring Pyright has finished its initial background\ntasks before we consider the server ready.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and workspace analysis is complete\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown cleanly\n```",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 112
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 21,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 're', 'logging', 'threading', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.jedi_server": {
      "name": "solidlsp.language_servers.jedi_server",
      "path": "src/solidlsp/language_servers/jedi_server.py",
      "docstring": "Provides Python specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Python.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "JediServer",
          "module": "solidlsp.language_servers.jedi_server",
          "docstring": "Provides Python specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Python.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.jedi_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a JediServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 24
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.jedi_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 40
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.jedi_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Jedi Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 44
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.jedi_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the JEDI Language Server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 155
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 19,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.solargraph": {
      "name": "solidlsp.language_servers.solargraph",
      "path": "src/solidlsp/language_servers/solargraph.py",
      "docstring": "Provides Ruby specific instantiation of the LanguageServer class using Solargraph.\nContains various configurations and settings specific to Ruby.",
      "imports": [
        "json",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "threading",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "Solargraph",
          "module": "solidlsp.language_servers.solargraph",
          "docstring": "Provides Ruby specific instantiation of the LanguageServer class using Solargraph.\nContains various configurations and settings specific to Ruby.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.solargraph",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a Solargraph instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 30
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.solargraph",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 55
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.solargraph",
              "signature": "@staticmethod",
              "docstring": "Setup runtime dependencies for Solargraph and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 59
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.solargraph",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Solargraph Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 153
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.solargraph",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Solargraph Language Server for Ruby",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 173
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 24,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'json', 'logging', 'subprocess', 'threading', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.clojure_lsp": {
      "name": "solidlsp.language_servers.clojure_lsp",
      "path": "src/solidlsp/language_servers/clojure_lsp.py",
      "docstring": "Provides Clojure specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Clojure.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "shutil",
        "subprocess",
        "threading",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "ClojureLSP",
          "module": "solidlsp.language_servers.clojure_lsp",
          "docstring": "Provides a clojure-lsp specific instantiation of the LanguageServer class. Contains various configurations and settings specific to clojure.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.clojure_lsp",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a ClojureLSP instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 81
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.clojure_lsp",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for clojure-lsp and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 102
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.clojure_lsp",
              "signature": "@staticmethod",
              "docstring": "Returns the init params for clojure-lsp.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 124
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.clojure_lsp",
              "signature": "def _start_server(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 156
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 42,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "run_command",
          "module": "solidlsp.language_servers.clojure_lsp",
          "signature": "def run_command(cmd: list, capture_output: bool=True) -> subprocess.CompletedProcess:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "cmd",
              "annotation": "list",
              "default": null
            },
            {
              "name": "capture_output",
              "annotation": "bool",
              "default": null
            }
          ],
          "return_annotation": "subprocess.CompletedProcess",
          "line_number": 22
        },
        {
          "name": "verify_clojure_cli",
          "module": "solidlsp.language_servers.clojure_lsp",
          "signature": "def verify_clojure_cli():",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [],
          "return_annotation": null,
          "line_number": 28
        }
      ],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'subprocess', 'threading', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.bash_language_server": {
      "name": "solidlsp.language_servers.bash_language_server",
      "path": "src/solidlsp/language_servers/bash_language_server.py",
      "docstring": "Provides Bash specific instantiation of the LanguageServer class using bash-language-server.\nContains various configurations and settings specific to Bash scripting.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "shutil",
        "threading",
        "from solidlsp",
        "from solidlsp.language_servers.common",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "re",
        "from solidlsp"
      ],
      "classes": [
        {
          "name": "BashLanguageServer",
          "module": "solidlsp.language_servers.bash_language_server",
          "docstring": "Provides Bash specific instantiation of the LanguageServer class using bash-language-server.\nContains various configurations and settings specific to Bash scripting.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a BashLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 28
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for Bash Language Server and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 48
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Bash Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 91
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Bash Language Server, waits for the server to be ready and yields the LanguageServer instance.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 131
            },
            {
              "name": "request_document_symbols",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
              "docstring": "Enhanced document symbol request with hybrid LSP + regex-based function detection for bash files.\n\nThis method combines both LSP-based detection and regex-based detection to provide comprehensive\nfunction discovery. This dual approach is necessary because:\n\n1. bash-language-server (v5.6.0) has inconsistent function detection capabilities\n2. Some bash function syntaxes are not reliably detected by the LSP server\n3. Files may contain mixed function notation styles within the same file\n4. Different formatting or indentation can affect LSP detection\n\nThe hybrid approach ensures maximum compatibility and comprehensive function discovery\nfor reliable symbolic editing operations in Serena.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
              "line_number": 197
            },
            {
              "name": "_merge_function_detections",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def _merge_function_detections(self, lsp_all_symbols: list[ls_types.UnifiedSymbolInformation], lsp_root_symbols: list[ls_types.UnifiedSymbolInformation], regex_detected_functions: list[ls_types.UnifiedSymbolInformation]) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
              "docstring": "Merge LSP-detected symbols with regex-detected functions, avoiding duplicates.\n\nThis method:\n1. Keeps all non-function symbols from LSP detection\n2. Keeps all LSP-detected functions (they have more accurate positioning)\n3. Adds regex-detected functions that weren't found by LSP\n4. Uses function names to detect duplicates\n\nArgs:\n    lsp_all_symbols: All symbols detected by LSP\n    lsp_root_symbols: Root-level symbols detected by LSP\n    regex_detected_functions: Functions detected by regex (all are root-level)\n\nReturns:\n    Tuple of (merged_all_symbols, merged_root_symbols)",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lsp_all_symbols",
                  "annotation": "list[ls_types.UnifiedSymbolInformation]",
                  "default": null
                },
                {
                  "name": "lsp_root_symbols",
                  "annotation": "list[ls_types.UnifiedSymbolInformation]",
                  "default": null
                },
                {
                  "name": "regex_detected_functions",
                  "annotation": "list[ls_types.UnifiedSymbolInformation]",
                  "default": null
                }
              ],
              "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
              "line_number": 240
            },
            {
              "name": "_detect_bash_functions",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def _detect_bash_functions(self, relative_file_path: str, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
              "docstring": "Regex-based detection of bash functions as fallback when LSP doesn't provide them.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "include_body",
                  "annotation": "bool",
                  "default": null
                }
              ],
              "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
              "line_number": 291
            },
            {
              "name": "_find_function_end",
              "module": "solidlsp.language_servers.bash_language_server",
              "signature": "def _find_function_end(self, lines: list[str], start_line: int) -> int:",
              "docstring": "Find the end line of a bash function by matching opening and closing braces.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "lines",
                  "annotation": "list[str]",
                  "default": null
                },
                {
                  "name": "start_line",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": "int",
              "line_number": 361
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 22,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'solidlsp', 'pathlib', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 're', 'logging', 'threading', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'solidlsp.language_servers.common'}"
    },
    "solidlsp.language_servers.terraform_ls": {
      "name": "solidlsp.language_servers.terraform_ls",
      "path": "src/solidlsp/language_servers/terraform_ls.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "shutil",
        "threading",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "TerraformLS",
          "module": "solidlsp.language_servers.terraform_ls",
          "docstring": "Provides Terraform specific instantiation of the LanguageServer class using terraform-ls.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 25
            },
            {
              "name": "_ensure_tf_command_available",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 29
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for terraform-ls.\nDownloads and installs terraform-ls if not already present.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 60
            },
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a TerraformLS instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 118
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Terraform Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 138
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.terraform_ls",
              "signature": "def _start_server(self):",
              "docstring": "Start terraform-ls server process",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 169
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 19,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'threading', 'solidlsp.ls_utils', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config'}"
    },
    "solidlsp.language_servers.typescript_language_server": {
      "name": "solidlsp.language_servers.typescript_language_server",
      "path": "src/solidlsp/language_servers/typescript_language_server.py",
      "docstring": "Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "shutil",
        "threading",
        "from time",
        "from overrides",
        "from sensai.util.logging",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common",
        "pwd"
      ],
      "classes": [
        {
          "name": "TypeScriptLanguageServer",
          "module": "solidlsp.language_servers.typescript_language_server",
          "docstring": "Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a TypeScriptLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 46
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 65
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for TypeScript Language Server and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "list[str]",
              "line_number": 74
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the TypeScript Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 137
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the TypeScript Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 177
            },
            {
              "name": "_send_references_request",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 254
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 41,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "pwd",
          "module": "solidlsp.language_servers.typescript_language_server",
          "docstring": null,
          "bases": [],
          "methods": [
            {
              "name": "getpwuid",
              "module": "solidlsp.language_servers.typescript_language_server",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "uid",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 32
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 30,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'sensai.util.logging', 'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'time', 'logging', 'pwd', 'threading', 'solidlsp.ls_utils', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.omnisharp": {
      "name": "solidlsp.language_servers.omnisharp",
      "path": "src/solidlsp/language_servers/omnisharp.py",
      "docstring": "Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.",
      "imports": [
        "json",
        "logging",
        "os",
        "pathlib",
        "threading",
        "from collections.abc",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_exceptions",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "OmniSharp",
          "module": "solidlsp.language_servers.omnisharp",
          "docstring": "Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.omnisharp",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates an OmniSharp instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 62
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.omnisharp",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 116
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.omnisharp",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Omnisharp Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 120
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.omnisharp",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for OmniSharp.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "tuple[str, str]",
              "line_number": 145
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.omnisharp",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Omnisharp Language Server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 207
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 57,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "breadth_first_file_scan",
          "module": "solidlsp.language_servers.omnisharp",
          "signature": "def breadth_first_file_scan(root) -> Iterable[str]:",
          "docstring": "This function was obtained from https://stackoverflow.com/questions/49654234/is-there-a-breadth-first-search-option-available-in-os-walk-or-equivalent-py\nIt traverses the directory tree in breadth first order.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "root",
              "annotation": null,
              "default": null
            }
          ],
          "return_annotation": "Iterable[str]",
          "line_number": 24
        },
        {
          "name": "find_least_depth_sln_file",
          "module": "solidlsp.language_servers.omnisharp",
          "signature": "def find_least_depth_sln_file(root_dir) -> str | None:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "root_dir",
              "annotation": null,
              "default": null
            }
          ],
          "return_annotation": "str | None",
          "line_number": 50
        }
      ],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'collections.abc', 'os', 'overrides', 'solidlsp.ls_exceptions', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'json', 'logging', 'threading', 'solidlsp.ls_utils', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.dart_language_server": {
      "name": "solidlsp.language_servers.dart_language_server",
      "path": "src/solidlsp/language_servers/dart_language_server.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "pathlib",
        "from solidlsp.ls",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "DartLanguageServer",
          "module": "solidlsp.language_servers.dart_language_server",
          "docstring": "Provides Dart specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Dart.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.dart_language_server",
              "signature": "def __init__(self, config, logger, repository_root_path, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a DartServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 18
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.dart_language_server",
              "signature": "@classmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "'LanguageServerLogger'",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 33
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.dart_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Dart Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 91
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.dart_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Start the language server and yield when the server is ready.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 119
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 13,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'common', 'pathlib'}"
    },
    "solidlsp.language_servers.intelephense": {
      "name": "solidlsp.language_servers.intelephense",
      "path": "src/solidlsp/language_servers/intelephense.py",
      "docstring": "Provides PHP specific instantiation of the LanguageServer class using Intelephense.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "shutil",
        "from time",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "Intelephense",
          "module": "solidlsp.language_servers.intelephense",
          "docstring": "Provides PHP specific instantiation of the LanguageServer class using Intelephense.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 30
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for Intelephense and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 38
            },
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 85
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the TypeScript Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 102
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "def _start_server(self):",
              "docstring": "Start Intelephense server process",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 129
            },
            {
              "name": "_send_references_request",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 173
            },
            {
              "name": "_send_definition_request",
              "module": "solidlsp.language_servers.intelephense",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "definition_params",
                  "annotation": "DefinitionParams",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 183
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 24,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'time', 'logging', 'solidlsp.ls_utils', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.common": {
      "name": "solidlsp.language_servers.common",
      "path": "src/solidlsp/language_servers/common.py",
      "docstring": null,
      "imports": [
        "from __future__",
        "logging",
        "os",
        "platform",
        "subprocess",
        "from collections.abc",
        "from dataclasses",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "pwd"
      ],
      "classes": [
        {
          "name": "RuntimeDependency",
          "module": "solidlsp.language_servers.common",
          "docstring": "Represents a runtime dependency for a language server.",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclass"
          ],
          "line_number": 17,
          "is_abstract": false,
          "is_dataclass": true
        },
        {
          "name": "RuntimeDependencyCollection",
          "module": "solidlsp.language_servers.common",
          "docstring": "Utility to handle installation of runtime dependencies.",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.common",
              "signature": "def __init__(self, dependencies: Sequence[RuntimeDependency]):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dependencies",
                  "annotation": "Sequence[RuntimeDependency]",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 35
            },
            {
              "name": "for_platform",
              "module": "solidlsp.language_servers.common",
              "signature": "def for_platform(self, platform_id: str) -> list[RuntimeDependency]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "platform_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "list[RuntimeDependency]",
              "line_number": 38
            },
            {
              "name": "for_current_platform",
              "module": "solidlsp.language_servers.common",
              "signature": "def for_current_platform(self) -> list[RuntimeDependency]:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "list[RuntimeDependency]",
              "line_number": 41
            },
            {
              "name": "single_for_current_platform",
              "module": "solidlsp.language_servers.common",
              "signature": "def single_for_current_platform(self) -> RuntimeDependency:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "RuntimeDependency",
              "line_number": 44
            },
            {
              "name": "binary_path",
              "module": "solidlsp.language_servers.common",
              "signature": "def binary_path(self, target_dir: str) -> str:",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "target_dir",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 50
            },
            {
              "name": "install",
              "module": "solidlsp.language_servers.common",
              "signature": "def install(self, logger: LanguageServerLogger, target_dir: str) -> dict[str, str]:",
              "docstring": "Install all dependencies for the current platform into *target_dir*.\n\nReturns a mapping from dependency id to the resolved binary path.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "target_dir",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "dict[str, str]",
              "line_number": 56
            },
            {
              "name": "_run_command",
              "module": "solidlsp.language_servers.common",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "command",
                  "annotation": "str | list[str]",
                  "default": null
                },
                {
                  "name": "cwd",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 75
            },
            {
              "name": "_install_from_url",
              "module": "solidlsp.language_servers.common",
              "signature": "@staticmethod",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "dep",
                  "annotation": "RuntimeDependency",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "target_dir",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 110
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 32,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'dataclasses', 'collections.abc', '__future__', 'os', 'solidlsp.ls_logger', 'pwd', 'logging', 'subprocess', 'solidlsp.ls_utils', 'platform'}"
    },
    "solidlsp.language_servers.clangd_language_server": {
      "name": "solidlsp.language_servers.clangd_language_server",
      "path": "src/solidlsp/language_servers/clangd_language_server.py",
      "docstring": "Provides C/C++ specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C/C++.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "threading",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "ClangdLanguageServer",
          "module": "solidlsp.language_servers.clangd_language_server",
          "docstring": "Provides C/C++ specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C/C++.\nAs the project gets bigger in size, building index will take time. Try running clangd multiple times to ensure index is built properly.\nAlso make sure compile_commands.json is created at root of the source directory. Check clangd test case for example.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.clangd_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a ClangdLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 27
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.clangd_language_server",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for ClangdLanguageServer and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 48
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.clangd_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the clangd Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 102
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.clangd_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Clangd Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 130
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 20,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'threading', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.rust_analyzer": {
      "name": "solidlsp.language_servers.rust_analyzer",
      "path": "src/solidlsp/language_servers/rust_analyzer.py",
      "docstring": "Provides Rust specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Rust.",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "threading",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "RustAnalyzer",
          "module": "solidlsp.language_servers.rust_analyzer",
          "docstring": "Provides Rust specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Rust.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.rust_analyzer",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a RustAnalyzer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 27
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.rust_analyzer",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 48
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.rust_analyzer",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for rust_analyzer and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 52
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.rust_analyzer",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Rust Analyzer Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 119
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.rust_analyzer",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Rust Analyzer Language Server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 592
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 22,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'threading', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.gopls": {
      "name": "solidlsp.language_servers.gopls",
      "path": "src/solidlsp/language_servers/gopls.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "threading",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "Gopls",
          "module": "solidlsp.language_servers.gopls",
          "docstring": "Provides Go specific instantiation of the LanguageServer class using gopls.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.gopls",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 23
            },
            {
              "name": "_get_go_version",
              "module": "solidlsp.language_servers.gopls",
              "signature": "@staticmethod",
              "docstring": "Get the installed Go version or None if not found.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": null,
              "line_number": 31
            },
            {
              "name": "_get_gopls_version",
              "module": "solidlsp.language_servers.gopls",
              "signature": "@staticmethod",
              "docstring": "Get the installed gopls version or None if not found.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": null,
              "line_number": 42
            },
            {
              "name": "_setup_runtime_dependency",
              "module": "solidlsp.language_servers.gopls",
              "signature": "@staticmethod",
              "docstring": "Check if required Go runtime dependencies are available.\nRaises RuntimeError with helpful message if dependencies are missing.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": null,
              "line_number": 53
            },
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.gopls",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 74
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.gopls",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Go Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 91
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.gopls",
              "signature": "def _start_server(self):",
              "docstring": "Start gopls server process",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 122
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 17,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'subprocess', 'threading', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.vts_language_server": {
      "name": "solidlsp.language_servers.vts_language_server",
      "path": "src/solidlsp/language_servers/vts_language_server.py",
      "docstring": "Language Server implementation for TypeScript/JavaScript using https://github.com/yioneko/vtsls,\nwhich provides TypeScript language server functionality via VSCode's TypeScript extension\n(contrary to typescript-language-server, which uses the TypeScript compiler directly).",
      "imports": [
        "logging",
        "os",
        "pathlib",
        "shutil",
        "threading",
        "from time",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common"
      ],
      "classes": [
        {
          "name": "VtsLanguageServer",
          "module": "solidlsp.language_servers.vts_language_server",
          "docstring": "Provides TypeScript specific instantiation of the LanguageServer class using vtsls.\nContains various configurations and settings specific to TypeScript via vtsls wrapper.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a VtsLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 33
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 52
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for VTS Language Server and return the command to start the server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 61
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the VTS Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 110
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the VTS Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 150
            },
            {
              "name": "_send_references_request",
              "module": "solidlsp.language_servers.vts_language_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 236
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 27,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'time', 'logging', 'threading', 'solidlsp.ls_utils', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.csharp_language_server": {
      "name": "solidlsp.language_servers.csharp_language_server",
      "path": "src/solidlsp/language_servers/csharp_language_server.py",
      "docstring": "CSharp Language Server using Microsoft.CodeAnalysis.LanguageServer (Official Roslyn-based LSP server)",
      "imports": [
        "json",
        "logging",
        "os",
        "platform",
        "shutil",
        "subprocess",
        "tarfile",
        "threading",
        "urllib.request",
        "zipfile",
        "from pathlib",
        "from typing",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_exceptions",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from solidlsp.util.zip",
        "from common"
      ],
      "classes": [
        {
          "name": "CSharpLanguageServer",
          "module": "solidlsp.language_servers.csharp_language_server",
          "docstring": "Provides C# specific instantiation of the LanguageServer class using Microsoft.CodeAnalysis.LanguageServer.\nThis is the official Roslyn-based language server from Microsoft.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a CSharpLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 179
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 218
            },
            {
              "name": "_ensure_server_installed",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@classmethod",
              "docstring": "Ensure .NET runtime and Microsoft.CodeAnalysis.LanguageServer are available.\nReturns a tuple of (dotnet_path, language_server_dll_path).",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "tuple[str, str]",
              "line_number": 222
            },
            {
              "name": "_get_runtime_id",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@staticmethod",
              "docstring": "Determine the runtime ID based on the platform.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [],
              "return_annotation": "str",
              "line_number": 237
            },
            {
              "name": "_get_runtime_dependencies",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@staticmethod",
              "docstring": "Get the language server and .NET runtime dependencies for the platform.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "runtime_id",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "tuple[RuntimeDependency, RuntimeDependency]",
              "line_number": 252
            },
            {
              "name": "_ensure_dotnet_runtime",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@classmethod",
              "docstring": "Ensure .NET runtime is available and return the dotnet executable path.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "runtime_dep",
                  "annotation": "RuntimeDependency",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 271
            },
            {
              "name": "_ensure_language_server",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@classmethod",
              "docstring": "Ensure language server is available and return the DLL path.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "lang_server_dep",
                  "annotation": "RuntimeDependency",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 291
            },
            {
              "name": "_extract_language_server",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@staticmethod",
              "docstring": "Extract language server files from downloaded package.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "lang_server_dep",
                  "annotation": "RuntimeDependency",
                  "default": null
                },
                {
                  "name": "package_path",
                  "annotation": "Path",
                  "default": null
                },
                {
                  "name": "server_dir",
                  "annotation": "Path",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 323
            },
            {
              "name": "_download_nuget_package_direct",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@classmethod",
              "docstring": "Download a NuGet package directly from the Azure NuGet feed.\nReturns the path to the extracted package directory.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "package_name",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "package_version",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "Path",
              "line_number": 346
            },
            {
              "name": "_ensure_dotnet_runtime_from_config",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "@classmethod",
              "docstring": "Ensure .NET 9 runtime is available using runtime dependency configuration.\nReturns the path to the dotnet executable.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "runtime_dep",
                  "annotation": "RuntimeDependency",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 406
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "def _get_initialize_params(self) -> InitializeParams:",
              "docstring": "Returns the initialize params for the Microsoft.CodeAnalysis.LanguageServer.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 468
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "def _start_server(self):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 523
            },
            {
              "name": "_force_pull_diagnostics",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "def _force_pull_diagnostics(self, init_response: dict) -> None:",
              "docstring": "Apply the diagnostic capabilities hack.\nForces the server to support pull diagnostics.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "init_response",
                  "annotation": "dict",
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 687
            },
            {
              "name": "_open_solution_and_projects",
              "module": "solidlsp.language_servers.csharp_language_server",
              "signature": "def _open_solution_and_projects(self) -> None:",
              "docstring": "Open solution and project files using notifications.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": "None",
              "line_number": 706
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 173,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [
        {
          "name": "breadth_first_file_scan",
          "module": "solidlsp.language_servers.csharp_language_server",
          "signature": "def breadth_first_file_scan(root_dir):",
          "docstring": "Perform a breadth-first scan of files in the given directory.\nYields file paths in breadth-first order.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "root_dir",
              "annotation": null,
              "default": null
            }
          ],
          "return_annotation": null,
          "line_number": 129
        },
        {
          "name": "find_solution_or_project_file",
          "module": "solidlsp.language_servers.csharp_language_server",
          "signature": "def find_solution_or_project_file(root_dir) -> str | None:",
          "docstring": "Find the first .sln file in breadth-first order.\nIf no .sln file is found, look for a .csproj file.",
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "root_dir",
              "annotation": null,
              "default": null
            }
          ],
          "return_annotation": "str | None",
          "line_number": 151
        }
      ],
      "constants": [
        "RUNTIME_DEPENDENCIES"
      ],
      "dependencies": "{'typing', 'solidlsp.ls', 'solidlsp.ls_exceptions', 'zipfile', 'solidlsp.ls_utils', 'common', 'solidlsp.ls_config', 'overrides', 'os', 'json', 'subprocess', 'solidlsp.settings', 'tarfile', 'threading', 'platform', 'shutil', 'solidlsp.util.zip', 'urllib.request', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'solidlsp.lsp_protocol_handler.lsp_types', 'pathlib'}"
    },
    "solidlsp.language_servers.eclipse_jdtls": {
      "name": "solidlsp.language_servers.eclipse_jdtls",
      "path": "src/solidlsp/language_servers/eclipse_jdtls.py",
      "docstring": "Provides Java specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Java.",
      "imports": [
        "dataclasses",
        "logging",
        "os",
        "pathlib",
        "shutil",
        "threading",
        "uuid",
        "from pathlib",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "RuntimeDependencyPaths",
          "module": "solidlsp.language_servers.eclipse_jdtls",
          "docstring": "Stores the paths to the runtime dependencies of EclipseJDTLS",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclasses.dataclass"
          ],
          "line_number": 26,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "EclipseJDTLS",
          "module": "solidlsp.language_servers.eclipse_jdtls",
          "docstring": "The EclipseJDTLS class provides a Java specific implementation of the LanguageServer class",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.eclipse_jdtls",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a new EclipseJDTLS instance initializing the language server settings appropriately.\nThis class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 46
            },
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.eclipse_jdtls",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 141
            },
            {
              "name": "_setupRuntimeDependencies",
              "module": "solidlsp.language_servers.eclipse_jdtls",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for EclipseJDTLS and return the paths.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "RuntimeDependencyPaths",
              "line_number": 159
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.eclipse_jdtls",
              "signature": "def _get_initialize_params(self, repository_absolute_path: str) -> InitializeParams:",
              "docstring": "Returns the initialize parameters for the EclipseJDTLS server.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 319
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.eclipse_jdtls",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Eclipse JDTLS Language Server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 644
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 41,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'uuid', 'solidlsp.ls', 'solidlsp.settings', 'dataclasses', 'shutil', 'os', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'threading', 'solidlsp.ls_utils', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.kotlin_language_server": {
      "name": "solidlsp.language_servers.kotlin_language_server",
      "path": "src/solidlsp/language_servers/kotlin_language_server.py",
      "docstring": "Provides Kotlin specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Kotlin.",
      "imports": [
        "dataclasses",
        "logging",
        "os",
        "pathlib",
        "stat",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings"
      ],
      "classes": [
        {
          "name": "KotlinRuntimeDependencyPaths",
          "module": "solidlsp.language_servers.kotlin_language_server",
          "docstring": "Stores the paths to the runtime dependencies of Kotlin Language Server",
          "bases": [],
          "methods": [],
          "class_variables": [],
          "decorators": [
            "dataclasses.dataclass"
          ],
          "line_number": 21,
          "is_abstract": false,
          "is_dataclass": false
        },
        {
          "name": "KotlinLanguageServer",
          "module": "solidlsp.language_servers.kotlin_language_server",
          "docstring": "Provides Kotlin specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Kotlin.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.kotlin_language_server",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": "Creates a Kotlin Language Server instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 36
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.kotlin_language_server",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for Kotlin Language Server and return the paths.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "KotlinRuntimeDependencyPaths",
              "line_number": 61
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.kotlin_language_server",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Kotlin Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 172
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.kotlin_language_server",
              "signature": "def _start_server(self):",
              "docstring": "Starts the Kotlin Language Server",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 425
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 31,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.ls', 'solidlsp.settings', 'dataclasses', 'os', 'stat', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'logging', 'solidlsp.ls_utils', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.elixir_tools.elixir_tools": {
      "name": "solidlsp.language_servers.elixir_tools.elixir_tools",
      "path": "src/solidlsp/language_servers/elixir_tools/elixir_tools.py",
      "docstring": null,
      "imports": [
        "logging",
        "os",
        "pathlib",
        "stat",
        "subprocess",
        "threading",
        "time",
        "from overrides",
        "from solidlsp.ls",
        "from solidlsp.ls_config",
        "from solidlsp.ls_logger",
        "from solidlsp.ls_utils",
        "from solidlsp.lsp_protocol_handler.lsp_types",
        "from solidlsp.lsp_protocol_handler.server",
        "from solidlsp.settings",
        "from common",
        "from solidlsp.ls_utils"
      ],
      "classes": [
        {
          "name": "ElixirTools",
          "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
          "docstring": "Provides Elixir specific instantiation of the LanguageServer class using Next LS from elixir-tools.",
          "bases": [
            "SolidLanguageServer"
          ],
          "methods": [
            {
              "name": "is_ignored_dirname",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "@override",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "dirname",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 28
            },
            {
              "name": "_is_next_ls_internal_file",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "def _is_next_ls_internal_file(self, abs_path: str) -> bool:",
              "docstring": "Check if an absolute path is a Next LS internal file that should be ignored.",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "abs_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "bool",
              "line_number": 37
            },
            {
              "name": "_send_references_request",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "@override",
              "docstring": "Override to filter out Next LS internal files from references.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "override"
              ],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "relative_file_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "line",
                  "annotation": "int",
                  "default": null
                },
                {
                  "name": "column",
                  "annotation": "int",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 50
            },
            {
              "name": "_get_elixir_version",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "@classmethod",
              "docstring": "Get the installed Elixir version or None if not found.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 73
            },
            {
              "name": "_setup_runtime_dependencies",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "@classmethod",
              "docstring": "Setup runtime dependencies for Next LS.\nDownloads the Next LS binary for the current platform and returns the path to the executable.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "classmethod"
              ],
              "parameters": [
                {
                  "name": "cls",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": "str",
              "line_number": 84
            },
            {
              "name": "__init__",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
              "docstring": null,
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                },
                {
                  "name": "config",
                  "annotation": "LanguageServerConfig",
                  "default": null
                },
                {
                  "name": "logger",
                  "annotation": "LanguageServerLogger",
                  "default": null
                },
                {
                  "name": "repository_root_path",
                  "annotation": "str",
                  "default": null
                },
                {
                  "name": "solidlsp_settings",
                  "annotation": "SolidLSPSettings",
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 168
            },
            {
              "name": "_get_initialize_params",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "@staticmethod",
              "docstring": "Returns the initialize params for the Next LS Language Server.",
              "is_method": true,
              "is_async": false,
              "decorators": [
                "staticmethod"
              ],
              "parameters": [
                {
                  "name": "repository_absolute_path",
                  "annotation": "str",
                  "default": null
                }
              ],
              "return_annotation": "InitializeParams",
              "line_number": 188
            },
            {
              "name": "_start_server",
              "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
              "signature": "def _start_server(self):",
              "docstring": "Start Next LS server process",
              "is_method": true,
              "is_async": false,
              "decorators": [],
              "parameters": [
                {
                  "name": "self",
                  "annotation": null,
                  "default": null
                }
              ],
              "return_annotation": null,
              "line_number": 248
            }
          ],
          "class_variables": [],
          "decorators": [],
          "line_number": 22,
          "is_abstract": false,
          "is_dataclass": false
        }
      ],
      "functions": [],
      "constants": [],
      "dependencies": "{'solidlsp.settings', 'solidlsp.ls', 'os', 'stat', 'overrides', 'solidlsp.lsp_protocol_handler.server', 'solidlsp.ls_logger', 'time', 'logging', 'subprocess', 'threading', 'solidlsp.ls_utils', 'common', 'solidlsp.lsp_protocol_handler.lsp_types', 'solidlsp.ls_config', 'pathlib'}"
    },
    "solidlsp.language_servers.elixir_tools": {
      "name": "solidlsp.language_servers.elixir_tools",
      "path": "src/solidlsp/language_servers/elixir_tools/__init__.py",
      "docstring": null,
      "imports": [],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "set()"
    },
    "interprompt.util": {
      "name": "interprompt.util",
      "path": "src/interprompt/util/__init__.py",
      "docstring": null,
      "imports": [],
      "classes": [],
      "functions": [],
      "constants": [],
      "dependencies": "set()"
    },
    "interprompt.util.class_decorators": {
      "name": "interprompt.util.class_decorators",
      "path": "src/interprompt/util/class_decorators.py",
      "docstring": null,
      "imports": [
        "from typing"
      ],
      "classes": [],
      "functions": [
        {
          "name": "singleton",
          "module": "interprompt.util.class_decorators",
          "signature": "def singleton(cls: type[Any]) -> Any:",
          "docstring": null,
          "is_method": false,
          "is_async": false,
          "decorators": [],
          "parameters": [
            {
              "name": "cls",
              "annotation": "type[Any]",
              "default": null
            }
          ],
          "return_annotation": "Any",
          "line_number": 4
        }
      ],
      "constants": [],
      "dependencies": "{'typing'}"
    }
  },
  "dependency_graph": {
    "interprompt.jinja_template": [
      "interprompt.util.class_decorators"
    ],
    "solidlsp.ls_utils": [
      "solidlsp.ls_logger",
      "solidlsp.ls_types",
      "solidlsp.ls_exceptions"
    ],
    "solidlsp.ls": [
      "serena.util.file_system",
      "solidlsp",
      "solidlsp.lsp_protocol_handler.lsp_constants",
      "solidlsp.ls_exceptions",
      "solidlsp.language_servers.typescript_language_server",
      "solidlsp.ls_utils",
      "solidlsp.ls_config",
      "solidlsp.language_servers.dart_language_server",
      "solidlsp.language_servers.csharp_language_server",
      "solidlsp.language_servers.jedi_server",
      "solidlsp.language_servers.eclipse_jdtls",
      "solidlsp.language_servers.elixir_tools.elixir_tools",
      "solidlsp.ls_handler",
      "serena.text_utils",
      "solidlsp.language_servers.pyright_server",
      "solidlsp.language_servers.bash_language_server",
      "solidlsp.lsp_protocol_handler",
      "solidlsp.settings",
      "solidlsp.language_servers.terraform_ls",
      "solidlsp.language_servers.solargraph",
      "solidlsp.language_servers.gopls",
      "solidlsp.language_servers.clojure_lsp",
      "solidlsp.language_servers.kotlin_language_server",
      "solidlsp.language_servers.clangd_language_server",
      "solidlsp.language_servers.omnisharp",
      "solidlsp.language_servers.intelephense",
      "solidlsp.language_servers.vts_language_server",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.language_servers.rust_analyzer",
      "solidlsp.lsp_protocol_handler.lsp_types"
    ],
    "solidlsp.ls_handler": [
      "solidlsp.lsp_protocol_handler.lsp_requests",
      "solidlsp.ls_exceptions",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_request"
    ],
    "solidlsp.ls_request": [
      "solidlsp.lsp_protocol_handler"
    ],
    "serena.agno": [
      "serena.constants",
      "serena.config.context_mode",
      "serena.util.exception",
      "serena.agent"
    ],
    "serena.project": [
      "serena.constants",
      "serena.util.file_system",
      "solidlsp.settings",
      "solidlsp",
      "solidlsp.ls_logger",
      "serena.config.serena_config",
      "serena.text_utils",
      "solidlsp.ls_config"
    ],
    "serena.agent": [
      "serena.project",
      "serena.util.logging",
      "serena.dashboard",
      "solidlsp",
      "serena",
      "serena.tools",
      "serena.analytics",
      "serena.config.context_mode",
      "serena.config.serena_config",
      "serena.prompt_factory",
      "serena.gui_log_viewer",
      "interprompt.jinja_template",
      "serena.util.inspection"
    ],
    "serena.cli": [
      "serena.constants",
      "serena.project",
      "serena.util.logging",
      "serena.agent",
      "serena.mcp",
      "serena.tools.workflow_tools",
      "serena.tools",
      "serena.config.context_mode",
      "serena.config.serena_config",
      "solidlsp.ls_config"
    ],
    "serena.symbol": [
      "solidlsp.ls_types",
      "solidlsp",
      "solidlsp.ls"
    ],
    "serena.mcp": [
      "serena.constants",
      "serena.util.logging",
      "serena.tools",
      "serena.config.context_mode",
      "serena.util.exception",
      "serena.agent"
    ],
    "serena.prompt_factory": [
      "serena.generated.generated_prompt_factory",
      "serena.constants"
    ],
    "serena.dashboard": [
      "serena.constants",
      "serena.util.logging",
      "serena.analytics"
    ],
    "serena.code_editor": [
      "solidlsp",
      "solidlsp.ls_utils",
      "solidlsp.ls",
      "serena.symbol"
    ],
    "serena.gui_log_viewer": [
      "serena",
      "serena.util.logging"
    ],
    "serena": [
      "serena.util.git"
    ],
    "serena.util.exception": [
      "serena.gui_log_viewer",
      "serena.agent"
    ],
    "serena.util.logging": [
      "serena.constants"
    ],
    "serena.util.inspection": [
      "serena.util.file_system",
      "solidlsp.ls_config"
    ],
    "serena.config.serena_config": [
      "serena.constants",
      "serena.tools",
      "serena.util.general",
      "solidlsp.ls_config",
      "serena.util.inspection"
    ],
    "serena.config.context_mode": [
      "serena.constants",
      "serena.config.serena_config"
    ],
    "serena.generated.generated_prompt_factory": [
      "interprompt.multilang_prompt",
      "interprompt.prompt_factory"
    ],
    "serena.tools.file_tools": [
      "serena.util.file_system",
      "serena.tools",
      "serena.text_utils"
    ],
    "serena.tools.jetbrains_plugin_client": [
      "serena.project"
    ],
    "serena.tools.workflow_tools": [
      "serena.tools"
    ],
    "serena.tools.tools_base": [
      "serena.project",
      "serena.util.class_decorators",
      "solidlsp.ls_exceptions",
      "serena.code_editor",
      "serena.symbol",
      "serena.agent",
      "serena.prompt_factory",
      "serena.util.inspection"
    ],
    "serena.tools.jetbrains_tools": [
      "serena.tools",
      "serena.tools.jetbrains_plugin_client"
    ],
    "serena.tools.symbol_tools": [
      "solidlsp.ls_types",
      "serena.tools"
    ],
    "serena.tools.cmd_tools": [
      "serena.tools",
      "serena.util.shell"
    ],
    "serena.tools.memory_tools": [
      "serena.tools"
    ],
    "serena.tools.config_tools": [
      "serena.tools",
      "serena.config.context_mode"
    ],
    "solidlsp.lsp_protocol_handler.lsp_requests": [
      "solidlsp.lsp_protocol_handler"
    ],
    "solidlsp.language_servers.pyright_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.jedi_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.solargraph": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.clojure_lsp": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.bash_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config",
      "solidlsp.language_servers.common"
    ],
    "solidlsp.language_servers.terraform_ls": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.typescript_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.omnisharp": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.ls_exceptions",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.dart_language_server": [
      "solidlsp.ls_logger",
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server"
    ],
    "solidlsp.language_servers.intelephense": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.common": [
      "solidlsp.ls_logger",
      "solidlsp.ls_utils"
    ],
    "solidlsp.language_servers.clangd_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.rust_analyzer": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.gopls": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.vts_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.csharp_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.util.zip",
      "solidlsp.ls_exceptions",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_utils",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.eclipse_jdtls": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.kotlin_language_server": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ],
    "solidlsp.language_servers.elixir_tools.elixir_tools": [
      "solidlsp.settings",
      "solidlsp.ls",
      "solidlsp.lsp_protocol_handler.server",
      "solidlsp.ls_logger",
      "solidlsp.ls_utils",
      "solidlsp.lsp_protocol_handler.lsp_types",
      "solidlsp.ls_config"
    ]
  },
  "lsp_api_surface": {
    "classes": [
      {
        "name": "SolidLSPException",
        "module": "solidlsp.ls_exceptions",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_exceptions",
            "signature": "def __init__(self, message: str, cause: Exception | None=None):",
            "docstring": "Initializes the exception with the given message.\n\n:param message: the message describing the exception\n:param cause: the original exception that caused this exception, if any.\n    For exceptions raised during request handling, this is typically\n        * an LSPError for errors returned by the LSP server\n        * LanguageServerTerminatedException for errors due to the language server having terminated.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cause",
                "annotation": "Exception | None",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 7
          },
          {
            "name": "is_language_server_terminated",
            "module": "solidlsp.ls_exceptions",
            "signature": "def is_language_server_terminated(self):",
            "docstring": ":return: True if the exception is caused by the language server having terminated as indicated\n    by the causing exception being an instance of LanguageServerTerminatedException.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 20
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_exceptions",
            "signature": "def __str__(self) -> str:",
            "docstring": "Returns a string representation of the exception.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 29
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 6,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InvalidTextLocationError",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utilities for text operations.",
        "bases": [],
        "methods": [
          {
            "name": "get_line_col_from_index",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the zero-indexed line and column number of the given index in the given text",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "index",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "tuple[int, int]",
            "line_number": 32
          },
          {
            "name": "get_index_from_line_col",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the index of the given zero-indexed line and column number in the given text",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "col",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 50
          },
          {
            "name": "_get_updated_position_from_line_and_column_and_edit",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Utility function to get the position of the cursor after inserting text at a given line and column.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "l",
                "annotation": "int",
                "default": null
              },
              {
                "name": "c",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[int, int]",
            "line_number": 65
          },
          {
            "name": "delete_text_between_positions",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Deletes the text between the given start and end positions.\nReturns the modified text and the deleted text.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "start_col",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "end_col",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 78
          },
          {
            "name": "insert_text_at_position",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Inserts the given text at the given line and column.\nReturns the modified text and the new line and column.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "text",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "col",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, int, int]",
            "line_number": 91
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PathUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utilities for platform-agnostic path operations.",
        "bases": [],
        "methods": [
          {
            "name": "uri_to_path",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Converts a URI to a file path. Works on both Linux and Windows.\n\nThis method was obtained from https://stackoverflow.com/a/61922504",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "uri",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 118
          },
          {
            "name": "path_to_uri",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Converts a file path to a file URI (file:///...).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 138
          },
          {
            "name": "is_glob_pattern",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Check if a pattern contains glob-specific characters.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "pattern",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 145
          },
          {
            "name": "get_relative_path",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Gets relative path if it's possible (paths should be on the same drive),\nreturns `None` otherwise.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "base_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str | None",
            "line_number": 150
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 112,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "Utility functions for file operations.",
        "bases": [],
        "methods": [
          {
            "name": "read_file",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Reads the file at the given path and returns the contents as a string.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 167
          },
          {
            "name": "download_file",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Downloads the file from the given URL to the given {target_path}",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "url",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 182
          },
          {
            "name": "download_and_extract_archive",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Downloads the archive from the given URL having format {archive_type} and extracts it to the given {target_path}",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "url",
                "annotation": "str",
                "default": null
              },
              {
                "name": "target_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "archive_type",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 199
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 161,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PlatformId",
        "module": "solidlsp.ls_utils",
        "docstring": "multilspy supported platforms",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [
          {
            "name": "is_windows",
            "module": "solidlsp.ls_utils",
            "signature": "def is_windows(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 251
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 234,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DotnetVersion",
        "module": "solidlsp.ls_utils",
        "docstring": "multilspy supported dotnet versions",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 255,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PlatformUtils",
        "module": "solidlsp.ls_utils",
        "docstring": "This class provides utilities for platform detection and identification.",
        "bases": [],
        "methods": [
          {
            "name": "get_platform_id",
            "module": "solidlsp.ls_utils",
            "signature": "@classmethod",
            "docstring": "Returns the platform id for the current system",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "PlatformId",
            "line_number": 274
          },
          {
            "name": "_determine_windows_machine_type",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 296
          },
          {
            "name": "get_dotnet_version",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": "Returns the dotnet version for the current system",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": "DotnetVersion",
            "line_number": 336
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 268,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolUtils",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "symbol_tree_contains_name",
            "module": "solidlsp.ls_utils",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "roots",
                "annotation": "list[UnifiedSymbolInformation]",
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 378
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 376,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SYSTEM_INFO",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Structure"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 300,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "_U",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Union"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 301,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "_S",
        "module": "solidlsp.ls_utils",
        "docstring": null,
        "bases": [
          "ctypes.Structure"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 302,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceInSymbol",
        "module": "solidlsp.ls",
        "docstring": "A symbol retrieved when requesting reference to a symbol, together with the location of the reference",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclasses.dataclass"
        ],
        "line_number": 44,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LSPFileBuffer",
        "module": "solidlsp.ls",
        "docstring": "This class is used to store the contents of an open LSP file in memory.",
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "solidlsp.ls",
            "signature": "def __post_init__(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 75
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclasses.dataclass"
        ],
        "line_number": 53,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SolidLanguageServer",
        "module": "solidlsp.ls",
        "docstring": "The LanguageServer class provides a language agnostic interface to the Language Server Protocol.\nIt is used to communicate with Language Servers of different programming languages.",
        "bases": [
          "ABC"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.ls",
            "signature": "def is_ignored_dirname(self, dirname: str) -> bool:",
            "docstring": "A language-specific condition for directories that should always be ignored. For example, venv\nin Python and node_modules in JS/TS should be ignored always.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 86
          },
          {
            "name": "ls_resources_dir",
            "module": "solidlsp.ls",
            "signature": "@classmethod",
            "docstring": "Returns the directory where the language server resources are downloaded.\nThis is used to store language server binaries, configuration files, etc.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              },
              {
                "name": "mkdir",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 94
          },
          {
            "name": "create",
            "module": "solidlsp.ls",
            "signature": "@classmethod",
            "docstring": "Creates a language specific LanguageServer instance based on the given configuration, and appropriate settings for the programming language.\n\nIf language is Java, then ensure that jdk-17.0.6 or higher is installed, `java` is in PATH, and JAVA_HOME is set to the installation directory.\nIf language is JS/TS, then ensure that node (v18.16.0 or higher) is installed and in PATH.\n\n:param repository_root_path: The root path of the repository.\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param timeout: the timeout for requests to the language server. If None, no timeout will be used.\n:return LanguageServer: A language specific LanguageServer instance.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings | None",
                "default": null
              }
            ],
            "return_annotation": "'SolidLanguageServer'",
            "line_number": 115
          },
          {
            "name": "__init__",
            "module": "solidlsp.ls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, process_launch_info: ProcessLaunchInfo, language_id: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Initializes a LanguageServer instance.\n\nDo not instantiate this class directly. Use `LanguageServer.create` method instead.\n\n:param config: The Multilspy configuration.\n:param logger: The logger to use.\n:param repository_root_path: The root path of the repository.\n:param process_launch_info: Each language server has a specific command used to start the server.\n            This parameter is the command to launch the language server process.\n            The command must pass appropriate flags to the binary, so that it runs in the stdio mode,\n            as opposed to HTTP, TCP modes supported by some language servers.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "process_launch_info",
                "annotation": "ProcessLaunchInfo",
                "default": null
              },
              {
                "name": "language_id",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 241
          },
          {
            "name": "set_request_timeout",
            "module": "solidlsp.ls",
            "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
            "docstring": ":param timeout: the timeout, in seconds, for requests to the language server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 320
          },
          {
            "name": "get_ignore_spec",
            "module": "solidlsp.ls",
            "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
            "docstring": "Returns the pathspec matcher for the paths that were configured to be ignored through\nthe multilspy config.\n\nThis is is a subset of the full language-specific ignore spec that determines\nwhich files are relevant for the language server.\n\nThis matcher is useful for operations outside of the language server,\nsuch as when searching for relevant non-language files in the project.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "pathspec.PathSpec",
            "line_number": 326
          },
          {
            "name": "is_ignored_path",
            "module": "solidlsp.ls",
            "signature": "def is_ignored_path(self, relative_path: str, ignore_unsupported_files: bool=True) -> bool:",
            "docstring": "Determine if a path should be ignored based on file type\nand ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_unsupported_files: whether files that are not supported source files should be ignored\n\n:return: True if the path should be ignored, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "ignore_unsupported_files",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 338
          },
          {
            "name": "_shutdown",
            "module": "solidlsp.ls",
            "signature": "def _shutdown(self, timeout: float=5.0):",
            "docstring": "A robust shutdown process designed to terminate cleanly on all platforms, including Windows,\nby explicitly closing all I/O pipes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 374
          },
          {
            "name": "start_server",
            "module": "solidlsp.ls",
            "signature": "@contextmanager",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Iterator['SolidLanguageServer']",
            "line_number": 431
          },
          {
            "name": "_start_server_process",
            "module": "solidlsp.ls",
            "signature": "def _start_server_process(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 436
          },
          {
            "name": "_start_server",
            "module": "solidlsp.ls",
            "signature": "@abstractmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "abstractmethod"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 441
          },
          {
            "name": "open_file",
            "module": "solidlsp.ls",
            "signature": "@contextmanager",
            "docstring": "Open a file in the Language Server. This is required before making any requests to the Language Server.\n\n:param relative_file_path: The relative path of the file to open.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "contextmanager"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Iterator[LSPFileBuffer]",
            "line_number": 445
          },
          {
            "name": "insert_text_at_position",
            "module": "solidlsp.ls",
            "signature": "def insert_text_at_position(self, relative_file_path: str, line: int, column: int, text_to_be_inserted: str) -> ls_types.Position:",
            "docstring": "Insert text at the given line and column in the given file and return\nthe updated cursor position after inserting the text.\n\n:param relative_file_path: The relative path of the file to open.\n:param line: The line number at which text should be inserted.\n:param column: The column number at which text should be inserted.\n:param text_to_be_inserted: The text to insert.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "text_to_be_inserted",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Position",
            "line_number": 497
          },
          {
            "name": "delete_text_between_positions",
            "module": "solidlsp.ls",
            "signature": "def delete_text_between_positions(self, relative_file_path: str, start: ls_types.Position, end: ls_types.Position) -> str:",
            "docstring": "Delete text between the given start and end positions in the given file and return the deleted text.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "start",
                "annotation": "ls_types.Position",
                "default": null
              },
              {
                "name": "end",
                "annotation": "ls_types.Position",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 544
          },
          {
            "name": "_send_definition_request",
            "module": "solidlsp.ls",
            "signature": "def _send_definition_request(self, definition_params: DefinitionParams) -> Definition | list[LocationLink] | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "definition_params",
                "annotation": "DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Definition | list[LocationLink] | None",
            "line_number": 583
          },
          {
            "name": "request_definition",
            "module": "solidlsp.ls",
            "signature": "def request_definition(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
            "docstring": "Raise a [textDocument/definition](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_definition) request to the Language Server\nfor the symbol at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which definition should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.Location]: A list of locations where the symbol is defined",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Location]",
            "line_number": 586
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.ls",
            "signature": "def _send_references_request(self, relative_file_path: str, line: int, column: int) -> list[lsp_types.Location] | None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[lsp_types.Location] | None",
            "line_number": 668
          },
          {
            "name": "request_references",
            "module": "solidlsp.ls",
            "signature": "def request_references(self, relative_file_path: str, line: int, column: int) -> list[ls_types.Location]:",
            "docstring": "Raise a [textDocument/references](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_references) request to the Language Server\nto find references to the symbol at the given line and column in the given file. Wait for the response and return the result.\nFilters out references located in ignored directories.\n\n:param relative_file_path: The relative path of the file that has the symbol for which references should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return: A list of locations where the symbol is referenced (excluding ignored directories)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Location]",
            "line_number": 677
          },
          {
            "name": "request_text_document_diagnostics",
            "module": "solidlsp.ls",
            "signature": "def request_text_document_diagnostics(self, relative_file_path: str) -> list[ls_types.Diagnostic]:",
            "docstring": "Raise a [textDocument/diagnostic](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_diagnostic) request to the Language Server\nto find diagnostics for the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file to retrieve diagnostics for\n\n:return: A list of diagnostics for the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.Diagnostic]",
            "line_number": 739
          },
          {
            "name": "retrieve_full_file_content",
            "module": "solidlsp.ls",
            "signature": "def retrieve_full_file_content(self, file_path: str) -> str:",
            "docstring": "Retrieve the full content of the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 781
          },
          {
            "name": "retrieve_content_around_line",
            "module": "solidlsp.ls",
            "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
            "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "MatchedConsecutiveLines",
            "line_number": 790
          },
          {
            "name": "request_completions",
            "module": "solidlsp.ls",
            "signature": "def request_completions(self, relative_file_path: str, line: int, column: int, allow_incomplete: bool=False) -> list[ls_types.CompletionItem]:",
            "docstring": "Raise a [textDocument/completion](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_completion) request to the Language Server\nto find completions at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbol for which completions should be looked up\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return List[multilspy_types.CompletionItem]: A list of completions",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "allow_incomplete",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.CompletionItem]",
            "line_number": 813
          },
          {
            "name": "request_document_symbols",
            "module": "solidlsp.ls",
            "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Raise a [textDocument/documentSymbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentSymbol) request to the Language Server\nto find symbols in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the symbols\n:param include_body: whether to include the body of the symbols in the result.\n:return: A list of symbols in the file, and a list of root symbols that represent the tree structure of the symbols.\n    All symbols will have a location, a children, and a parent attribute,\n    where the parent attribute is None for root symbols.\n    Note that this is slightly different from the call to request_full_symbol_tree,\n    where the parent attribute will be the file symbol which in turn may have a package symbol as parent.\n    If you need a symbol tree that contains file symbols as well, you should use `request_full_symbol_tree` instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 899
          },
          {
            "name": "request_full_symbol_tree",
            "module": "solidlsp.ls",
            "signature": "def request_full_symbol_tree(self, within_relative_path: str | None=None, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
            "docstring": "Will go through all files in the project or within a relative path and build a tree of symbols.\nNote: this may be slow the first time it is called, especially if `within_relative_path` is not used to restrict the search.\n\nFor each file, a symbol of kind File (2) will be created. For directories, a symbol of kind Package (4) will be created.\nAll symbols will have a children attribute, thereby representing the tree structure of all symbols in the project\nthat are within the repository.\nAll symbols except the root packages will have a parent attribute.\nWill ignore directories starting with '.', language-specific defaults\nand user-configured directories (e.g. from .gitignore).\n\n:param within_relative_path: pass a relative path to only consider symbols within this path.\n    If a file is passed, only the symbols within this file will be considered.\n    If a directory is passed, all files within this directory will be considered.\n:param include_body: whether to include the body of the symbols in the result.\n\n:return: A list of root symbols representing the top-level packages/modules in the project.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "within_relative_path",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
            "line_number": 1026
          },
          {
            "name": "_get_range_from_file_content",
            "module": "solidlsp.ls",
            "signature": "@staticmethod",
            "docstring": "Get the range for the given file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "file_content",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Range",
            "line_number": 1154
          },
          {
            "name": "request_dir_overview",
            "module": "solidlsp.ls",
            "signature": "def request_dir_overview(self, relative_dir_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
            "docstring": "An overview of the given directory.\n\nMaps relative paths of all contained files to info about top-level symbols in the file\n(name, kind, line, column).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_dir_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
            "line_number": 1163
          },
          {
            "name": "request_document_overview",
            "module": "solidlsp.ls",
            "signature": "def request_document_overview(self, relative_file_path: str) -> list[tuple[str, ls_types.SymbolKind, int, int]]:",
            "docstring": "An overview of the given file.\nReturns the list of tuples (name, kind, line, column) of all top-level symbols in the file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[tuple[str, ls_types.SymbolKind, int, int]]",
            "line_number": 1199
          },
          {
            "name": "request_overview",
            "module": "solidlsp.ls",
            "signature": "def request_overview(self, within_relative_path: str) -> dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]:",
            "docstring": "An overview of all symbols in the given file or directory.\n\n:param within_relative_path: the relative path to the file or directory to get the overview of.\n:return: A mapping of all relative paths analyzed to lists of tuples (name, kind, line, column) of all top-level symbols in the corresponding file.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "within_relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, list[tuple[str, ls_types.SymbolKind, int, int]]]",
            "line_number": 1215
          },
          {
            "name": "request_hover",
            "module": "solidlsp.ls",
            "signature": "def request_hover(self, relative_file_path: str, line: int, column: int) -> ls_types.Hover | None:",
            "docstring": "Raise a [textDocument/hover](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_hover) request to the Language Server\nto find the hover information at the given line and column in the given file. Wait for the response and return the result.\n\n:param relative_file_path: The relative path of the file that has the hover information\n:param line: The line number of the symbol\n:param column: The column number of the symbol\n\n:return None",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "ls_types.Hover | None",
            "line_number": 1232
          },
          {
            "name": "retrieve_symbol_body",
            "module": "solidlsp.ls",
            "signature": "def retrieve_symbol_body(self, symbol: ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation) -> str:",
            "docstring": "Load the body of the given symbol. If the body is already contained in the symbol, just return it.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol",
                "annotation": "ls_types.UnifiedSymbolInformation | LSPTypes.DocumentSymbol | LSPTypes.SymbolInformation",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 1261
          },
          {
            "name": "request_referencing_symbols",
            "module": "solidlsp.ls",
            "signature": "def request_referencing_symbols(self, relative_file_path: str, line: int, column: int, include_imports: bool=True, include_self: bool=False, include_body: bool=False, include_file_symbols: bool=False) -> list[ReferenceInSymbol]:",
            "docstring": "Finds all symbols that reference the symbol at the given location.\nThis is similar to request_references but filters to only include symbols\n(functions, methods, classes, etc.) that reference the target symbol.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_imports: whether to also include imports as references.\n    Unfortunately, the LSP does not have an import type, so the references corresponding to imports\n    will not be easily distinguishable from definitions.\n:param include_self: whether to include the references that is the \"input symbol\" itself.\n    Only has an effect if the relative_file_path, line and column point to a symbol, for example a definition.\n:param include_body: whether to include the body of the symbols in the result.\n:param include_file_symbols: whether to include references that are file symbols. This\n    is often a fallback mechanism for when the reference cannot be resolved to a symbol.\n:return: List of objects containing the symbol and the location of the reference.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_imports",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_self",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_file_symbols",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ReferenceInSymbol]",
            "line_number": 1282
          },
          {
            "name": "request_containing_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_containing_symbol(self, relative_file_path: str, line: int, column: int | None=None, strict: bool=False, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the first symbol containing the position for the given file.\nFor Python, container symbols are considered to be those with kinds corresponding to\nfunctions, methods, or classes (typically: Function (12), Method (6), Class (5)).\n\nThe method operates as follows:\n  - Request the document symbols for the file.\n  - Filter symbols to those that start at or before the given line.\n  - From these, first look for symbols whose range contains the (line, column).\n  - If one or more symbols contain the position, return the one with the greatest starting position\n    (i.e. the innermost container).\n  - If none (strictly) contain the position, return the symbol with the greatest starting position\n    among those above the given line.\n  - If no container candidates are found, return None.\n\n:param relative_file_path: The relative path to the Python file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column (also called character). If not passed, the lookup will be based\n    only on the line.\n:param strict: If True, the position must be strictly within the range of the symbol.\n    Setting to True is useful for example for finding the parent of a symbol, as with strict=False,\n    and the line pointing to a symbol itself, the containing symbol will be the symbol itself\n    (and not the parent).\n:param include_body: Whether to include the body of the symbol in the result.\n:return: The container symbol (if found) or None.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int | None",
                "default": null
              },
              {
                "name": "strict",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1427
          },
          {
            "name": "request_container_of_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_container_of_symbol(self, symbol: ls_types.UnifiedSymbolInformation, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the container of the given symbol if there is one. If the parent attribute is present, the parent is returned\nwithout further searching.\n\n:param symbol: The symbol to find the container of.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The container of the given symbol or None if no container is found.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "symbol",
                "annotation": "ls_types.UnifiedSymbolInformation",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1541
          },
          {
            "name": "request_defining_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_defining_symbol(self, relative_file_path: str, line: int, column: int, include_body: bool=False) -> ls_types.UnifiedSymbolInformation | None:",
            "docstring": "Finds the symbol that defines the symbol at the given location.\n\nThis method first finds the definition of the symbol at the given position,\nthen retrieves the full symbol information for that definition.\n\n:param relative_file_path: The relative path to the file.\n:param line: The 0-indexed line number.\n:param column: The 0-indexed column number.\n:param include_body: whether to include the body of the symbol in the result.\n:return: The symbol information for the definition, or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "ls_types.UnifiedSymbolInformation | None",
            "line_number": 1563
          },
          {
            "name": "cache_path",
            "module": "solidlsp.ls",
            "signature": "@property",
            "docstring": "The path to the cache file for the document symbols.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 1606
          },
          {
            "name": "save_cache",
            "module": "solidlsp.ls",
            "signature": "def save_cache(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 1612
          },
          {
            "name": "load_cache",
            "module": "solidlsp.ls",
            "signature": "def load_cache(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 1631
          },
          {
            "name": "request_workspace_symbol",
            "module": "solidlsp.ls",
            "signature": "def request_workspace_symbol(self, query: str) -> list[ls_types.UnifiedSymbolInformation] | None:",
            "docstring": "Raise a [workspace/symbol](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_symbol) request to the Language Server\nto find symbols across the whole workspace. Wait for the response and return the result.\n\n:param query: The query string to filter symbols by\n\n:return: A list of matching symbols",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "query",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation] | None",
            "line_number": 1649
          },
          {
            "name": "start",
            "module": "solidlsp.ls",
            "signature": "def start(self) -> 'SolidLanguageServer':",
            "docstring": "Starts the language server process and connects to it. Call shutdown when ready.\n\n:return: self for method chaining",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'SolidLanguageServer'",
            "line_number": 1676
          },
          {
            "name": "stop",
            "module": "solidlsp.ls",
            "signature": "def stop(self, shutdown_timeout: float=2.0) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "shutdown_timeout",
                "annotation": "float",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 1689
          },
          {
            "name": "language_server",
            "module": "solidlsp.ls",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 1693
          },
          {
            "name": "is_running",
            "module": "solidlsp.ls",
            "signature": "def is_running(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 1696
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 79,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LogLine",
        "module": "solidlsp.ls_logger",
        "docstring": "Represents a line in the Multilspy log",
        "bases": [
          "BaseModel"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LanguageServerLogger",
        "module": "solidlsp.ls_logger",
        "docstring": "Logger class",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_logger",
            "signature": "def __init__(self, json_format: bool=False, log_level: int=logging.INFO) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "json_format",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 30
          },
          {
            "name": "log",
            "module": "solidlsp.ls_logger",
            "signature": "def log(self, debug_message: str, level: int, sanitized_error_message: str='', stacklevel: int=2) -> None:",
            "docstring": "Log the debug and sanitized messages using the logger",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "debug_message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "level",
                "annotation": "int",
                "default": null
              },
              {
                "name": "sanitized_error_message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "stacklevel",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 35
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 25,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SolidLSPSettings",
        "module": "solidlsp.settings",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__post_init__",
            "module": "solidlsp.settings",
            "signature": "def __post_init__(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 14
          },
          {
            "name": "ls_resources_dir",
            "module": "solidlsp.settings",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 19
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 11,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "LanguageServerTerminatedException",
        "module": "solidlsp.ls_handler",
        "docstring": "Exception raised when the language server process has terminated unexpectedly.",
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, message: str, cause: Exception | None=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cause",
                "annotation": "Exception | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 44
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_handler",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 49
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 39,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Request",
        "module": "solidlsp.ls_handler",
        "docstring": null,
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, request_id: int, method: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "int",
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 63
          },
          {
            "name": "_tostring_includes",
            "module": "solidlsp.ls_handler",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 69
          },
          {
            "name": "on_result",
            "module": "solidlsp.ls_handler",
            "signature": "def on_result(self, params: PayloadLike) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "PayloadLike",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 72
          },
          {
            "name": "on_error",
            "module": "solidlsp.ls_handler",
            "signature": "def on_error(self, err: Exception) -> None:",
            "docstring": ":param err: the error that occurred while processing the request (typically an LSPError\n    for errors returned by the LS or LanguageServerTerminatedException if the error\n    is due to the language server process terminating unexpectedly).",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "err",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 76
          },
          {
            "name": "get_result",
            "module": "solidlsp.ls_handler",
            "signature": "def get_result(self, timeout: float | None=None) -> Result:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "Result",
            "line_number": 85
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 53,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SolidLanguageServerHandler",
        "module": "solidlsp.ls_handler",
        "docstring": "This class provides the implementation of Python client for the Language Server Protocol.\nA class that launches the language server and communicates with it\nusing the Language Server Protocol (LSP).\n\nIt provides methods for sending requests, responses, and notifications to the server\nand for registering handlers for requests and notifications from the server.\n\nUses JSON-RPC 2.0 for communication with the server over stdin/stdout.\n\nAttributes:\n    send: A LspRequest object that can be used to send requests to the server and\n        await for the responses.\n    notify: A LspNotification object that can be used to send notifications to the server.\n    cmd: A string that represents the command to launch the language server process.\n    process: A subprocess.Popen object that represents the language server process.\n    request_id: An integer that represents the next available request id for the client.\n    _pending_requests: A dictionary that maps request ids to Request objects that\n        store the results or errors of the requests.\n    on_request_handlers: A dictionary that maps method names to callback functions\n        that handle requests from the server.\n    on_notification_handlers: A dictionary that maps method names to callback functions\n        that handle notifications from the server.\n    logger: An optional function that takes two strings (source and destination) and\n        a payload dictionary, and logs the communication between the client and the server.\n    tasks: A dictionary that maps task ids to asyncio.Task objects that represent\n        the asynchronous tasks created by the handler.\n    task_counter: An integer that represents the next available task id for the handler.\n    loop: An asyncio.AbstractEventLoop object that represents the event loop used by the handler.\n    start_independent_lsp_process: An optional boolean flag that indicates whether to start the\n    language server process in an independent process group. Default is `True`. Setting it to\n    `False` means that the language server process will be in the same process group as the\n    the current process, and any SIGINT and SIGTERM signals will be sent to both processes.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_handler",
            "signature": "def __init__(self, process_launch_info: ProcessLaunchInfo, logger: Callable[[str, str, StringDict | str], None] | None=None, start_independent_lsp_process=True, request_timeout: float | None=None) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process_launch_info",
                "annotation": "ProcessLaunchInfo",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "Callable[[str, str, StringDict | str], None] | None",
                "default": null
              },
              {
                "name": "start_independent_lsp_process",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 126
          },
          {
            "name": "set_request_timeout",
            "module": "solidlsp.ls_handler",
            "signature": "def set_request_timeout(self, timeout: float | None) -> None:",
            "docstring": ":param timeout: the timeout, in seconds, for all requests sent to the language server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "timeout",
                "annotation": "float | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 157
          },
          {
            "name": "is_running",
            "module": "solidlsp.ls_handler",
            "signature": "def is_running(self) -> bool:",
            "docstring": "Checks if the language server process is currently running.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 163
          },
          {
            "name": "start",
            "module": "solidlsp.ls_handler",
            "signature": "def start(self) -> None:",
            "docstring": "Starts the language server process and creates a task to continuously read from its stdout to handle communications\nfrom the server to the client",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 169
          },
          {
            "name": "stop",
            "module": "solidlsp.ls_handler",
            "signature": "def stop(self) -> None:",
            "docstring": "Sends the terminate signal to the language server process and waits for it to exit, with a timeout, killing it if necessary",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 215
          },
          {
            "name": "_cleanup_process",
            "module": "solidlsp.ls_handler",
            "signature": "def _cleanup_process(self, process):",
            "docstring": "Clean up a process: close stdin, terminate/kill process, close stdout/stderr.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 224
          },
          {
            "name": "_safely_close_pipe",
            "module": "solidlsp.ls_handler",
            "signature": "def _safely_close_pipe(self, pipe):",
            "docstring": "Safely close a pipe, ignoring any exceptions.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "pipe",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 241
          },
          {
            "name": "_terminate_or_kill_process",
            "module": "solidlsp.ls_handler",
            "signature": "def _terminate_or_kill_process(self, process):",
            "docstring": "Try to terminate the process gracefully, then forcefully if necessary.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 249
          },
          {
            "name": "_signal_process_tree",
            "module": "solidlsp.ls_handler",
            "signature": "def _signal_process_tree(self, process, terminate=True):",
            "docstring": "Send signal (terminate or kill) to the process and all its children.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "process",
                "annotation": null,
                "default": null
              },
              {
                "name": "terminate",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 254
          },
          {
            "name": "shutdown",
            "module": "solidlsp.ls_handler",
            "signature": "def shutdown(self) -> None:",
            "docstring": "Perform the shutdown sequence for the client, including sending the shutdown request to the server and notifying it of exit",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 286
          },
          {
            "name": "_log",
            "module": "solidlsp.ls_handler",
            "signature": "def _log(self, message: str | StringDict) -> None:",
            "docstring": "Create a log message",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "message",
                "annotation": "str | StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 298
          },
          {
            "name": "_read_bytes_from_process",
            "module": "solidlsp.ls_handler",
            "signature": "@staticmethod",
            "docstring": "Read exactly num_bytes from process stdout",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "process",
                "annotation": null,
                "default": null
              },
              {
                "name": "stream",
                "annotation": null,
                "default": null
              },
              {
                "name": "num_bytes",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 306
          },
          {
            "name": "_read_ls_process_stdout",
            "module": "solidlsp.ls_handler",
            "signature": "def _read_ls_process_stdout(self) -> None:",
            "docstring": "Continuously read from the language server process stdout and handle the messages\ninvoking the registered response and notification handlers",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 322
          },
          {
            "name": "_read_ls_process_stderr",
            "module": "solidlsp.ls_handler",
            "signature": "def _read_ls_process_stderr(self) -> None:",
            "docstring": "Continuously read from the language server process stderr and log the messages",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 361
          },
          {
            "name": "_handle_body",
            "module": "solidlsp.ls_handler",
            "signature": "def _handle_body(self, body: bytes) -> None:",
            "docstring": "Parse the body text received from the language server process and invoke the appropriate handler",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "body",
                "annotation": "bytes",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 387
          },
          {
            "name": "_receive_payload",
            "module": "solidlsp.ls_handler",
            "signature": "def _receive_payload(self, payload: StringDict) -> None:",
            "docstring": "Determine if the payload received from server is for a request, response, or notification and invoke the appropriate handler",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 400
          },
          {
            "name": "send_notification",
            "module": "solidlsp.ls_handler",
            "signature": "def send_notification(self, method: str, params: dict | None=None) -> None:",
            "docstring": "Send notification pertaining to the given method to the server with the given parameters",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict | None",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 419
          },
          {
            "name": "send_response",
            "module": "solidlsp.ls_handler",
            "signature": "def send_response(self, request_id: Any, params: PayloadLike) -> None:",
            "docstring": "Send response to the given request id to the server with the given parameters",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "params",
                "annotation": "PayloadLike",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 425
          },
          {
            "name": "send_error_response",
            "module": "solidlsp.ls_handler",
            "signature": "def send_error_response(self, request_id: Any, err: LSPError) -> None:",
            "docstring": "Send error response to the given request id to the server with the given error",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "request_id",
                "annotation": "Any",
                "default": null
              },
              {
                "name": "err",
                "annotation": "LSPError",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 431
          },
          {
            "name": "_cancel_pending_requests",
            "module": "solidlsp.ls_handler",
            "signature": "def _cancel_pending_requests(self, exception: Exception) -> None:",
            "docstring": "Cancel all pending requests by setting their results to an error",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "exception",
                "annotation": "Exception",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 438
          },
          {
            "name": "send_request",
            "module": "solidlsp.ls_handler",
            "signature": "def send_request(self, method: str, params: dict | None=None) -> PayloadLike:",
            "docstring": "Send request to the server, register the request id, and wait for the response",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "dict | None",
                "default": null
              }
            ],
            "return_annotation": "PayloadLike",
            "line_number": 449
          },
          {
            "name": "_send_payload",
            "module": "solidlsp.ls_handler",
            "signature": "def _send_payload(self, payload: StringDict) -> None:",
            "docstring": "Send the payload to the server by writing to its stdin asynchronously.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "payload",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 476
          },
          {
            "name": "on_request",
            "module": "solidlsp.ls_handler",
            "signature": "def on_request(self, method: str, cb) -> None:",
            "docstring": "Register the callback function to handle requests from the server to the client for the given method",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cb",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 496
          },
          {
            "name": "on_notification",
            "module": "solidlsp.ls_handler",
            "signature": "def on_notification(self, method: str, cb) -> None:",
            "docstring": "Register the callback function to handle notifications from the server to the client for the given method",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "cb",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 502
          },
          {
            "name": "_response_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _response_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the response received from the server for a request, using the id to determine the request",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 508
          },
          {
            "name": "_request_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _request_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the request received from the server: call the appropriate callback function and return the result",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 522
          },
          {
            "name": "_notification_handler",
            "module": "solidlsp.ls_handler",
            "signature": "def _notification_handler(self, response: StringDict) -> None:",
            "docstring": "Handle the notification received from the server: call the appropriate callback function",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "response",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 546
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 89,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Result",
        "module": "solidlsp.ls_handler",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "is_error",
            "module": "solidlsp.ls_handler",
            "signature": "def is_error(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 60
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 56,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "LanguageServerRequest",
        "module": "solidlsp.ls_request",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_request",
            "signature": "def __init__(self, handler: 'SolidLanguageServerHandler'):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "handler",
                "annotation": "'SolidLanguageServerHandler'",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 10
          },
          {
            "name": "_send_request",
            "module": "solidlsp.ls_request",
            "signature": "def _send_request(self, method: str, params: Any | None=None) -> Any:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "method",
                "annotation": "str",
                "default": null
              },
              {
                "name": "params",
                "annotation": "Any | None",
                "default": null
              }
            ],
            "return_annotation": "Any",
            "line_number": 13
          },
          {
            "name": "implementation",
            "module": "solidlsp.ls_request",
            "signature": "def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ImplementationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 16
          },
          {
            "name": "type_definition",
            "module": "solidlsp.ls_request",
            "signature": "def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeDefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 24
          },
          {
            "name": "document_color",
            "module": "solidlsp.ls_request",
            "signature": "def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
            "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentColorParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorInformation']",
            "line_number": 34
          },
          {
            "name": "color_presentation",
            "module": "solidlsp.ls_request",
            "signature": "def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
            "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ColorPresentationParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorPresentation']",
            "line_number": 42
          },
          {
            "name": "folding_range",
            "module": "solidlsp.ls_request",
            "signature": "def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
            "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.FoldingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.FoldingRange'] | None",
            "line_number": 50
          },
          {
            "name": "declaration",
            "module": "solidlsp.ls_request",
            "signature": "def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeclarationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
            "line_number": 58
          },
          {
            "name": "selection_range",
            "module": "solidlsp.ls_request",
            "signature": "def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
            "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SelectionRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SelectionRange'] | None",
            "line_number": 67
          },
          {
            "name": "prepare_call_hierarchy",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
            "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
            "line_number": 75
          },
          {
            "name": "incoming_calls",
            "module": "solidlsp.ls_request",
            "signature": "def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
            "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
            "line_number": 83
          },
          {
            "name": "outgoing_calls",
            "module": "solidlsp.ls_request",
            "signature": "def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
            "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
            "line_number": 90
          },
          {
            "name": "semantic_tokens_full",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 97
          },
          {
            "name": "semantic_tokens_delta",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensDeltaParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
            "line_number": 101
          },
          {
            "name": "semantic_tokens_range",
            "module": "solidlsp.ls_request",
            "signature": "def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 107
          },
          {
            "name": "linked_editing_range",
            "module": "solidlsp.ls_request",
            "signature": "def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
            "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.LinkedEditingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
            "line_number": 111
          },
          {
            "name": "will_create_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 118
          },
          {
            "name": "will_rename_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 126
          },
          {
            "name": "will_delete_files",
            "module": "solidlsp.ls_request",
            "signature": "def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 134
          },
          {
            "name": "moniker",
            "module": "solidlsp.ls_request",
            "signature": "def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
            "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.MonikerParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Moniker'] | None",
            "line_number": 142
          },
          {
            "name": "prepare_type_hierarchy",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 149
          },
          {
            "name": "type_hierarchy_supertypes",
            "module": "solidlsp.ls_request",
            "signature": "def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySupertypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 157
          },
          {
            "name": "type_hierarchy_subtypes",
            "module": "solidlsp.ls_request",
            "signature": "def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySubtypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 164
          },
          {
            "name": "inline_value",
            "module": "solidlsp.ls_request",
            "signature": "def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
            "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlineValueParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlineValue'] | None",
            "line_number": 171
          },
          {
            "name": "inlay_hint",
            "module": "solidlsp.ls_request",
            "signature": "def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
            "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHintParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlayHint'] | None",
            "line_number": 180
          },
          {
            "name": "resolve_inlay_hint",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
            "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHint",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InlayHint'",
            "line_number": 189
          },
          {
            "name": "text_document_diagnostic",
            "module": "solidlsp.ls_request",
            "signature": "def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
            "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
            "line_number": 198
          },
          {
            "name": "workspace_diagnostic",
            "module": "solidlsp.ls_request",
            "signature": "def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
            "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
            "line_number": 205
          },
          {
            "name": "initialize",
            "module": "solidlsp.ls_request",
            "signature": "def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
            "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializeParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InitializeResult'",
            "line_number": 212
          },
          {
            "name": "shutdown",
            "module": "solidlsp.ls_request",
            "signature": "def shutdown(self) -> None:",
            "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 221
          },
          {
            "name": "will_save_wait_until",
            "module": "solidlsp.ls_request",
            "signature": "def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 229
          },
          {
            "name": "completion",
            "module": "solidlsp.ls_request",
            "signature": "def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
            "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionParams",
                "default": null
              }
            ],
            "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
            "line_number": 239
          },
          {
            "name": "resolve_completion_item",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
            "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionItem",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CompletionItem'",
            "line_number": 252
          },
          {
            "name": "hover",
            "module": "solidlsp.ls_request",
            "signature": "def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
            "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.HoverParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Hover', None]",
            "line_number": 259
          },
          {
            "name": "signature_help",
            "module": "solidlsp.ls_request",
            "signature": "def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SignatureHelpParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SignatureHelp', None]",
            "line_number": 266
          },
          {
            "name": "definition",
            "module": "solidlsp.ls_request",
            "signature": "def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 269
          },
          {
            "name": "references",
            "module": "solidlsp.ls_request",
            "signature": "def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
            "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ReferenceParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Location'] | None",
            "line_number": 278
          },
          {
            "name": "document_highlight",
            "module": "solidlsp.ls_request",
            "signature": "def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
            "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentHighlightParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
            "line_number": 286
          },
          {
            "name": "document_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
            "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
            "line_number": 294
          },
          {
            "name": "code_action",
            "module": "solidlsp.ls_request",
            "signature": "def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
            "docstring": "A request to provide commands for the given text document and range.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeActionParams",
                "default": null
              }
            ],
            "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
            "line_number": 304
          },
          {
            "name": "resolve_code_action",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
            "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeAction",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeAction'",
            "line_number": 308
          },
          {
            "name": "workspace_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
            "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
            "line_number": 315
          },
          {
            "name": "resolve_workspace_symbol",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
            "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbol",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceSymbol'",
            "line_number": 329
          },
          {
            "name": "code_lens",
            "module": "solidlsp.ls_request",
            "signature": "def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
            "docstring": "A request to provide code lens for the given text document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLensParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CodeLens'] | None",
            "line_number": 337
          },
          {
            "name": "resolve_code_lens",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
            "docstring": "A request to resolve a command for a given code lens.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLens",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeLens'",
            "line_number": 341
          },
          {
            "name": "document_link",
            "module": "solidlsp.ls_request",
            "signature": "def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
            "docstring": "A request to provide document links",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLinkParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentLink'] | None",
            "line_number": 345
          },
          {
            "name": "resolve_document_link",
            "module": "solidlsp.ls_request",
            "signature": "def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
            "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLink",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentLink'",
            "line_number": 349
          },
          {
            "name": "formatting",
            "module": "solidlsp.ls_request",
            "signature": "def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a whole document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 356
          },
          {
            "name": "range_formatting",
            "module": "solidlsp.ls_request",
            "signature": "def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a range in a document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentRangeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 360
          },
          {
            "name": "on_type_formatting",
            "module": "solidlsp.ls_request",
            "signature": "def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to format a document on type.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 364
          },
          {
            "name": "rename",
            "module": "solidlsp.ls_request",
            "signature": "def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "A request to rename a symbol.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 368
          },
          {
            "name": "prepare_rename",
            "module": "solidlsp.ls_request",
            "signature": "def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
            "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.PrepareRenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
            "line_number": 372
          },
          {
            "name": "execute_command",
            "module": "solidlsp.ls_request",
            "signature": "def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
            "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ExecuteCommandParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LSPAny', None]",
            "line_number": 379
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 9,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FilenameMatcher",
        "module": "solidlsp.ls_config",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.ls_config",
            "signature": "def __init__(self, *patterns: str) -> None:",
            "docstring": ":param patterns: fnmatch-compatible patterns",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 13
          },
          {
            "name": "is_relevant_filename",
            "module": "solidlsp.ls_config",
            "signature": "def is_relevant_filename(self, fn: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "fn",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 19
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Language",
        "module": "solidlsp.ls_config",
        "docstring": "Possible languages with Multilspy.",
        "bases": [
          "str",
          "Enum"
        ],
        "methods": [
          {
            "name": "iter_all",
            "module": "solidlsp.ls_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_experimental",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Iterable[Self]",
            "line_number": 57
          },
          {
            "name": "is_experimental",
            "module": "solidlsp.ls_config",
            "signature": "def is_experimental(self) -> bool:",
            "docstring": "Check if the language server is experimental or deprecated.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 62
          },
          {
            "name": "__str__",
            "module": "solidlsp.ls_config",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 68
          },
          {
            "name": "get_source_fn_matcher",
            "module": "solidlsp.ls_config",
            "signature": "def get_source_fn_matcher(self) -> FilenameMatcher:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "FilenameMatcher",
            "line_number": 71
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LanguageServerConfig",
        "module": "solidlsp.ls_config",
        "docstring": "Configuration parameters",
        "bases": [],
        "methods": [
          {
            "name": "from_dict",
            "module": "solidlsp.ls_config",
            "signature": "@classmethod",
            "docstring": "Create a MultilspyConfig instance from a dictionary",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "env",
                "annotation": "dict",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 126
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 114,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "Position",
        "module": "solidlsp.ls_types",
        "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 18,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Range",
        "module": "solidlsp.ls_types",
        "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 63,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Location",
        "module": "solidlsp.ls_types",
        "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 83,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItemKind",
        "module": "solidlsp.ls_types",
        "docstring": "The kind of a completion entry.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 94,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItem",
        "module": "solidlsp.ls_types",
        "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 124,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolKind",
        "module": "solidlsp.ls_types",
        "docstring": "A symbol kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 144,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolTag",
        "module": "solidlsp.ls_types",
        "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 175,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "UnifiedSymbolInformation",
        "module": "solidlsp.ls_types",
        "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 185,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MarkupKind",
        "module": "solidlsp.ls_types",
        "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 247,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__MarkedString_Type_1",
        "module": "solidlsp.ls_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 261,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MarkupContent",
        "module": "solidlsp.ls_types",
        "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 281,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Hover",
        "module": "solidlsp.ls_types",
        "docstring": "The result of a hover request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 312,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticsSeverity",
        "module": "solidlsp.ls_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 322,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Diagnostic",
        "module": "solidlsp.ls_types",
        "docstring": "Diagnostic information for a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 329,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ProcessLaunchInfo",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": "This class is used to store the information required to launch a process.",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclasses.dataclass"
        ],
        "line_number": 47,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LSPError",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def __init__(self, code: ErrorCodes, message: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "code",
                "annotation": "ErrorCodes",
                "default": null
              },
              {
                "name": "message",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 63
          },
          {
            "name": "to_lsp",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def to_lsp(self) -> StringDict:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "StringDict",
            "line_number": 67
          },
          {
            "name": "from_lsp",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "d",
                "annotation": "StringDict",
                "default": null
              }
            ],
            "return_annotation": "'LSPError'",
            "line_number": 71
          },
          {
            "name": "__str__",
            "module": "solidlsp.lsp_protocol_handler.server",
            "signature": "def __str__(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 74
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 62,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "StopLoopException",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 94,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MessageType",
        "module": "solidlsp.lsp_protocol_handler.server",
        "docstring": null,
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 107,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokenTypes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined token types. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 43,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokenModifiers",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined token modifiers. This set is not fixed\nan clients can specify additional token types via the\ncorresponding client capabilities.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 79,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentDiagnosticReportKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The document diagnostic report kinds.\n\n@since 3.17.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 99,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ErrorCodes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Predefined error codes.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 113,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LSPErrorCodes",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 127,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRangeKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined range kinds.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 155,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A symbol kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [
          {
            "name": "from_int",
            "module": "solidlsp.lsp_protocol_handler.lsp_types",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "value",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "'SymbolKind'",
            "line_number": 200
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 166,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Symbol tags are extra annotations that tweak the rendering of a symbol.\n\n@since 3.16",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 207,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "UniquenessLevel",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Moniker uniqueness level to define scope of the moniker.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 217,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MonikerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The moniker kind.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 235,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint kinds.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 250,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MessageType",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The message type",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 262,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentSyncKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines how the host (editor) should sync\ndocument changes to the language server.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 275,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentSaveReason",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents reasons why a text document is saved.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 291,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItemKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The kind of a completion entry.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 303,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItemTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion item tags are extra annotations that tweak the rendering of a completion\nitem.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 333,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InsertTextFormat",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines whether the insert text in a completion item should be interpreted as\nplain text or a snippet.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 344,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InsertTextMode",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How whitespace and indentation is handled during completion\nitem insertion.\n\n@since 3.16.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 362,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlightKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document highlight kind.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 385,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined code action kinds",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 396,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TraceValues",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 450,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MarkupKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describes the content type that a client supports in various\nresult literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds\nare reserved for internal usage.",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 459,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PositionEncodingKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A set of predefined position encoding kinds.\n\n@since 3.17.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 473,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileChangeType",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The file event type",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 494,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WatchKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntFlag"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 505,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticSeverity",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The diagnostic's severity.",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 514,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticTag",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The diagnostic tags.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 527,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How a completion was triggered",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 544,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "How a signature help was triggered.\n\n@since 3.15.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 557,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionTriggerKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The reason why code actions were requested.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 571,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationPatternKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A pattern kind describing if a glob pattern matches a file a folder or\nboth.\n\n@since 3.16.0",
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 586,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookCellKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell kind.\n\n@since 3.17.0",
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 599,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ResourceOperationKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 611,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FailureHandlingKind",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 620,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PrepareSupportDefaultBehavior",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "IntEnum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 636,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TokenFormat",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "Enum"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 642,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ImplementationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 802,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Location",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a location inside a resource, such as a line\ninside a text file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 814,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ImplementationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 823,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeDefinitionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 832,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeDefinitionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 844,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceFolder",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace folder inside a client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 853,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeWorkspaceFoldersParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a `workspace/didChangeWorkspaceFolders` notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 863,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ConfigurationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a configuration request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 870,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentColorParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentColorRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 876,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ColorInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a color range from a document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 888,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentColorRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 897,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ColorPresentationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link ColorPresentationRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 906,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ColorPresentation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 922,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 936,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General text document registration options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 940,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link FoldingRangeRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 948,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a folding range. To be valid, start and end line must be bigger than zero and smaller\nthan the number of lines in the document. Clients are free to ignore invalid ranges.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 960,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 987,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeclarationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 996,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeclarationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1008,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SelectionRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in selection range requests.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1017,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SelectionRange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A selection range represents a part of a selection hierarchy. A selection range\nmay have a parent selection range that contains it.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1031,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SelectionRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1042,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressCreateParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1051,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressCancelParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1056,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyPrepareParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `textDocument/prepareCallHierarchy` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1061,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents programming constructs like functions or constructors in the context\nof call hierarchy.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1075,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Call hierarchy options used during static or dynamic registration.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1102,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyIncomingCallsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `callHierarchy/incomingCalls` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1116,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyOutgoingCallsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `callHierarchy/outgoingCalls` request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1145,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyOutgoingCall",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1159,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1173,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokens",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1185,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1197,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1203,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensDeltaParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1221,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensDelta",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1236,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensDeltaPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1244,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1250,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Params to show a document.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1264,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowDocumentResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a showDocument request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1288,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LinkedEditingRangeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1298,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LinkedEditingRanges",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a linked editing range request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1307,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LinkedEditingRangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1322,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CreateFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated creation of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1331,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace edit represents changes to many resources managed in the workspace. The edit\nshould either provide `changes` or `documentChanges`. If documentChanges are present\nthey are preferred over `changes` if the client can handle versioned document edits.\n\nSince version 3.13.0 a workspace edit can contain resource operations as well. If resource\noperations are present clients need to execute the operations in the order in which they\nare provided. So a workspace edit for example can consist of the following two changes:\n(1) a create file a.txt and (2) a text document edit which insert text into file a.txt.\n\nAn invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will\ncause failure of the operation. How the client recovers from the failure is described by\nthe client capability: `workspace.workspaceEdit.failureHandling`",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1342,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The options to register for file operations.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1379,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated renames of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1389,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeleteFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in notifications/requests for user-initiated deletes of\nfiles.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1401,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MonikerParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1412,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Moniker",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Moniker definition to match LSIF 0.5 moniker definition.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1424,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MonikerRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1441,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchyPrepareParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `textDocument/prepareTypeHierarchy` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1447,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchyItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1461,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchyRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Type hierarchy options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1488,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchySupertypesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `typeHierarchy/supertypes` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1502,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchySubtypesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameter of a `typeHierarchy/subtypes` request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1516,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in inline value requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1530,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inline value options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1547,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in inlay hint requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1561,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHint",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint information.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1575,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint options used during static or dynamic registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1616,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentDiagnosticParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters of the document diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1633,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentDiagnosticReportPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A partial result for a document diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1652,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticServerCancellationData",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Cancellation data returned from a diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1664,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Diagnostic registration options.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1673,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceDiagnosticParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters of the workspace diagnostic request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1697,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A workspace diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1715,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceDiagnosticReportPartialResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A partial result for a workspace diagnostic report.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1724,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidOpenNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in an open notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1733,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a change notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1746,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidSaveNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a save notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1773,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidCloseNotebookDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The params sent in a close notebook document notification.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1783,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RegistrationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1796,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "UnregistrationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1800,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InitializeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1804,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InitializeResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result returned from an initialize request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1851,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InitializeError",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The data type of the ResponseError if the\ninitialize request fails.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1862,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InitializedParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1874,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeConfigurationParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a change configuration notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1878,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeConfigurationRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1885,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowMessageParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a notification message.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1889,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowMessageRequestParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1898,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MessageActionItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1907,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LogMessageParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The log message parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1912,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidOpenTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in an open text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1921,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The change text document notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1928,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentChangeRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describe options to be used when registered for text document change events.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1949,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidCloseTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a close text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1959,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidSaveTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a save text document notification",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1966,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentSaveRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Save registration options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1976,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WillSaveTextDocumentParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters sent in a will save text document notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1986,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text edit applicable to a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 1995,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeWatchedFilesParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The watched files change notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2006,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeWatchedFilesRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describe options to be used when registered for text document change events.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2013,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PublishDiagnosticsParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The publish diagnostic notification's parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2020,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion parameters",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2033,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A completion item represents a text snippet that is\nproposed to complete text that is being typed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2050,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionList",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a collection of {@link CompletionItem completion items} to be presented\nin the editor.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2174,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CompletionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2202,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "HoverParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link HoverRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2236,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Hover",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result of a hover request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2247,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "HoverRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link HoverRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2257,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2265,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelp",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Signature help represents the signature of something\ncallable. There can be multiple signature but only one\nactive and only one active parameter.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2281,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2309,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DefinitionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2326,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DefinitionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2340,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2348,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2363,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlightParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2371,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlight",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document highlight is a range inside a text document which deserves\nspecial attention. Usually a document highlight is visualized by changing\nthe background color of its range.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2385,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlightRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2397,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentSymbolParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Parameters for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2405,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SymbolInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information about programming constructs like variables, classes,\ninterfaces etc.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2417,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentSymbol",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents programming constructs like variables, classes, interfaces etc.\nthat appear in a document. Document symbols can be hierarchical and they\nhave two ranges: one that encloses its definition and one that points to\nits most interesting range, e.g. the range of an identifier.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2451,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentSymbolRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2482,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2495,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Command",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a reference to a command. Provides a title which\nwill be used to represent a command in the UI and, optionally,\nan array of arguments which will be passed to the command handler\nfunction when invoked.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2511,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeAction",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A code action represents a change that can be performed in code, e.g. to fix a problem or\nto refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2527,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2579,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceSymbolParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2597,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceSymbol",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special workspace symbol that supports locations without a range.\n\nSee also SymbolInformation.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2610,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceSymbolRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2642,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLensParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2652,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLens",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A code lens represents a {@link Command command} that should be shown along with\nsource text, like the number of references, a way to run tests, etc.\n\nA code lens is _unresolved_ when no command is associated to it. For performance\nreasons the creation of a code lens and resolving should be done in two stages.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2664,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLensRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2682,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentLinkParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2692,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentLink",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A document link is a range in a text document that links to an internal or external resource, like another\ntext document or a web site.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2704,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentLinkRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2726,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2736,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2747,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentRangeFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2755,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentRangeFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2768,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentOnTypeFormattingParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2776,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentOnTypeFormattingRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2794,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2806,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2821,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PrepareRenameParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2833,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ExecuteCommandParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2842,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ExecuteCommandRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options for a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2853,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ApplyWorkspaceEditParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The parameters passed via a apply workspace edit request.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2860,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ApplyWorkspaceEditResult",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The result returned from the apply workspace edit request.\n\n@since 3.17 renamed from ApplyWorkspaceEditResponse",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2871,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressBegin",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2889,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2915,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressEnd",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2937,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SetTraceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2944,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LogTraceParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2948,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CancelParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2953,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ProgressParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2958,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentPositionParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A parameter literal used in requests to pass a text document and a position inside that\ndocument.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2965,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkDoneProgressParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2976,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PartialResultParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2981,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LocationLink",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},\nincluding an origin range.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 2987,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Range",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A range in a text document expressed as (zero-based) start and end positions.\n\nIf you want to specify a range that contains a line including the line ending\ncharacter(s) then use an end position denoting the start of the next line.\nFor example:\n```ts\n{\n    start: { line: 5, character: 23 }\n    end : { line 6, character : 0 }\n}\n```",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3008,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ImplementationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3028,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "StaticRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Static registration options to be returned in the initialize\nrequest.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3032,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeDefinitionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3042,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceFoldersChangeEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The workspace folder change event.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3046,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ConfigurationItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3055,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A literal to identify a text document in the client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3062,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Color",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a color in RGBA space.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3069,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentColorOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3082,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3086,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeclarationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3090,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Position",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Position in a text document expressed as zero-based line and character\noffset. Prior to 3.17 the offsets were always based on a UTF-16 string\nrepresentation. So a string of the form `a\ud801\udc00b` the character offset of the\ncharacter `a` is 0, the character offset of `\ud801\udc00` is 1 and the character\noffset of b is 3 since `\ud801\udc00` is represented using two code units in UTF-16.\nSince 3.17 clients and servers can agree on a different string encoding\nrepresentation (e.g. UTF-8). The client announces it's supported encoding\nvia the client capability [`general.positionEncodings`](#clientCapabilities).\nThe value is an array of position encodings the client supports, with\ndecreasing preference (e.g. the encoding at index `0` is the most preferred\none). To stay backwards compatible the only mandatory encoding is UTF-16\nrepresented via the string `utf-16`. The server can pick one of the\nencodings offered by the client and signals that encoding back to the\nclient via the initialize result's property\n[`capabilities.positionEncoding`](#serverCapabilities). If the string value\n`utf-16` is missing from the client's capability `general.positionEncodings`\nservers can safely assume that the client supports UTF-16. If the server\nomits the position encoding in its initialize result the encoding defaults\nto the string value `utf-16`. Implementation considerations: since the\nconversion from one encoding into another requires the content of the\nfile / line the conversion is best done where the file is read which is\nusually on the server side.\n\nPositions are line end character agnostic. So you can not specify a position\nthat denotes `\\r|\\n` or `\\n|` where `|` represents the character offset.\n\n@since 3.17.0 - support for negotiated position encoding.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3094,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SelectionRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3139,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Call hierarchy options used during static registration.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3143,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3152,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3165,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LinkedEditingRangeOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3176,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileCreate",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder create.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3180,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Describes textual changes on a text document. A TextDocumentEdit describes all changes\non a document version Si and after they are applied move the document to version Si+1.\nSo the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any\nkind of ordering. However the edits must be non overlapping.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3190,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CreateFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Create file operation.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3206,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Rename file operation",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3221,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeleteFile",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Delete file operation",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3238,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ChangeAnnotation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional information that describes document changes.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3253,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationFilter",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A filter to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3270,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileRename",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder rename.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3283,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileDelete",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents information on a file/folder delete.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3295,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MonikerOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3305,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchyOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Type hierarchy options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3309,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3318,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueText",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide inline value as text.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3328,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueVariableLookup",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide inline value through a variable lookup.\nIf only a range is specified, the variable name will be extracted from the underlying document.\nAn optional variable name can be used to override the extracted name.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3340,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueEvaluatableExpression",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provide an inline value through an expression evaluation.\nIf only a range is specified, the expression will be extracted from the underlying document.\nAn optional expression can be used to override the extracted expression.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3357,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inline value options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3372,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintLabelPart",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An inlay hint label part allows for interactive and composite labels\nof inlay hints.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3381,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MarkupContent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A `MarkupContent` literal represents a string value which content is interpreted base on its\nkind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\nSee https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript:\n```ts\nlet markdown: MarkdownContent = {\n kind: MarkupKind.Markdown,\n value: [\n   '# Header',\n   'Some text',\n   '```typescript',\n   'someCode();',\n   '```'\n ].join('\\n')\n};\n```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to\nremove HTML from the markdown to avoid script execution.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3413,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint options used during static registration.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3444,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RelatedFullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A full diagnostic report with a set of related documents.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3456,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RelatedUnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An unchanged diagnostic report with a set of related documents.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3485,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A diagnostic report with a full set of problems.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3514,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "UnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A diagnostic report indicating that the last returned\nreport is still accurate.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3530,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Diagnostic options.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3547,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PreviousResultId",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A previous result id in a workspace pull request.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3566,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocument",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3579,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentItem",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An item to transfer a text document from the client to the\nserver.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3601,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "VersionedNotebookDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A versioned notebook document identifier.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3617,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentChangeEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A change event for a notebook document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3629,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A literal to identify a notebook document in the client.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3643,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Registration",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General parameters to to register for an notification or to register a provider.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3653,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Unregistration",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General parameters to unregister a request or notification.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3665,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceFoldersInitializeParams",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3675,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ServerCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines the capabilities provided by a language\nserver.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3686,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "VersionedTextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text document identifier to denote a specific version of a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3795,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SaveOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Save options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3804,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileEvent",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An event describing a file change.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3811,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileSystemWatcher",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3820,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Diagnostic",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\nare only valid in the scope of a resource.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3831,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Contains additional information about the context in which a completion request is triggered.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3868,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionItemLabelDetails",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional details for a completion item label.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3878,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InsertReplaceEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special text edit to provide an insert and a replace operation.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3892,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3906,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "HoverOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Hover options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3938,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Additional information about the context in which a signature help request was triggered.\n\n@since 3.15.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3944,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents the signature of something callable. A signature\ncan have a label, like a function-name, a doc-comment, and\na set of parameters.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3968,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server Capabilities for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 3990,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DefinitionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server Capabilities for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4005,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Value-object that contains additional information when\nrequesting references.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4011,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Reference options.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4020,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlightOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4026,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "BaseSymbolInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A base for all symbol information.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4032,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentSymbolOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4050,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionContext",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Contains additional diagnostic information about the context in which\na {@link CodeActionProvider.provideCodeActions code action} is run.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4061,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4083,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceSymbolOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Server capabilities for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4099,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLensOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Code Lens provider options of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4110,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentLinkOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4118,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Value-object describing what options formatting should use.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4126,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4147,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentRangeFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4153,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentOnTypeFormattingOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4159,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Provider options for a {@link RenameRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4168,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ExecuteCommandOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The server capabilities of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4178,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensLegend",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4186,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "OptionalVersionedTextDocumentIdentifier",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A text document identifier to optionally denote a specific version of a text document.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4195,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "AnnotatedTextEdit",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A special text edit with an additional change annotation.\n\n@since 3.16.0.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4208,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ResourceOperation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A generic resource operation.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4224,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CreateFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options to create a file.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4235,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Rename file options",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4244,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeleteFileOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Delete file options",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4253,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationPattern",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A pattern to describe in which file operation requests or notifications\nthe server is interested in receiving.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4262,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceFullDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A full document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4285,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceUnchangedDocumentDiagnosticReport",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "An unchanged document diagnostic report for a workspace diagnostic result.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4306,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookCell",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell.\n\nA cell's document URI must be unique across ALL notebook\ncells and can therefore be used to uniquely identify a\nnotebook cell or the cell's text document.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4327,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookCellArrayChange",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A change describing how to move a `NotebookCell`\narray from state S to S'.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4351,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Defines the capabilities provided by the client.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4366,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentSyncOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4387,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentSyncOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options specific to a notebook plus its cells\nto be synced to the server.\n\nIf a selector provides a notebook document\nfilter but no cell selector all cells of a\nmatching notebook document will be synced.\n\nIf a selector provides no notebook document\nfilter but only a cell selector all notebook\ndocument that contain at least one matching\ncell will be synced.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4405,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentSyncRegistrationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Registration options specific to a notebook.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4433,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceFoldersServerCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4454,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Options for notifications/requests for user operations on files.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4467,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeDescription",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Structure to capture a description for an error code.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4487,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticRelatedInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a related message and source code location for a diagnostic. This should be\nused to point to code locations that cause or related to a diagnostics, e.g when duplicating\na symbol in a scope.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4497,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ParameterInformation",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Represents a parameter of a callable-signature. A parameter can\nhave a label and a doc-comment.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4509,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookCellTextDocumentFilter",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A notebook cell text document filter denotes a cell text\ndocument by different properties.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4528,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationPatternOptions",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Matching options for the file operation pattern.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4547,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ExecutionSummary",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4557,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Workspace specific client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4567,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Text document specific client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4623,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Capabilities specific to the notebook document support.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4717,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WindowClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4729,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "GeneralClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "General client capabilities.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4750,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RelativePattern",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "A relative pattern is a helper to construct glob patterns that are matched\nrelatively to a base URI. The common value for a `baseUri` is a workspace\nfolder root, but it can be another absolute URI as well.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4792,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceEditClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4807,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeConfigurationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4835,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DidChangeWatchedFilesClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4840,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "WorkspaceSymbolClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for a {@link WorkspaceSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4852,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ExecuteCommandClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities of a {@link ExecuteCommandRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4872,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4879,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLensWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4892,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FileOperationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Capabilities relating to events from file operations by the user in the client.\n\nThese events do not come from the file system, they come from user operations\nlike renaming a file in the UI.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4905,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client workspace capabilities specific to inline values.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4930,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client workspace capabilities specific to inlay hints.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4946,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticWorkspaceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Workspace client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4962,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TextDocumentSyncClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4978,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CompletionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Completion client capabilities",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 4991,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "HoverClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5016,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SignatureHelpClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link SignatureHelpRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5024,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DeclarationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.14.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5041,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DefinitionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DefinitionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5052,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeDefinitionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Since 3.6.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5063,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ImplementationClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.6.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5076,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ReferenceClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link ReferencesRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5089,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentHighlightClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DocumentHighlightRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5096,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentSymbolClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client Capabilities for a {@link DocumentSymbolRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5103,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeActionClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The Client Capabilities of a {@link CodeActionRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5126,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CodeLensClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities  of a {@link CodeLensRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5166,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentLinkClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The client capabilities of a {@link DocumentLinkRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5173,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentColorClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5184,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5191,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentRangeFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentRangeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5198,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DocumentOnTypeFormattingClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities of a {@link DocumentOnTypeFormattingRequest}.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5205,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RenameClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5212,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "FoldingRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5237,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SelectionRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5261,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PublishDiagnosticsClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "The publish diagnostic client capabilities.",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5268,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CallHierarchyClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5295,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SemanticTokensClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5304,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LinkedEditingRangeClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for the linked editing range request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5350,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MonikerClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to the moniker request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5362,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeHierarchyClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5374,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlineValueClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to inline values.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5383,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "InlayHintClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Inlay hint client capabilities.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5393,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DiagnosticClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to diagnostic pull requests.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5406,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "NotebookDocumentSyncClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Notebook specific client capabilities.\n\n@since 3.17.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5420,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowMessageRequestClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Show message request client capabilities",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5435,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ShowDocumentClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities for the showDocument request.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5442,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RegularExpressionsClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to regular expressions.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5453,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "MarkdownClientCapabilities",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": "Client capabilities specific to the used markdown parser.\n\n@since 3.16.0",
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5465,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5482,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CodeActionClientCapabilities_codeActionLiteralSupport_codeActionKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5488,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CodeActionClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5496,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CodeAction_disabled_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5501,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionItemKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5508,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5520,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionItem_insertTextModeSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5568,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionItem_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5572,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionItem_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5577,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionClientCapabilities_completionList_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5582,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionList_itemDefaults_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5594,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionList_itemDefaults_editRange_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5617,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionOptions_completionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5622,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__CompletionOptions_completionItem_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5631,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__DocumentSymbolClientCapabilities_symbolKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5640,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__DocumentSymbolClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5652,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__FoldingRangeClientCapabilities_foldingRangeKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5657,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__FoldingRangeClientCapabilities_foldingRange_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5665,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__GeneralClientCapabilities_staleRequestSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5673,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__InitializeResult_serverInfo_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5682,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__InlayHintClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5689,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__MarkedString_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5694,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentChangeEvent_cells_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5699,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentChangeEvent_cells_structure_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5710,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentChangeEvent_cells_textContent_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5719,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentFilter_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5724,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentFilter_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5733,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentFilter_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5742,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5751,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5760,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5769,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_Type_4",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5778,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5787,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5791,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5795,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__NotebookDocumentSyncOptions_notebookSelector_cells_Type_4",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5799,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__PrepareRenameResult_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5803,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__PrepareRenameResult_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5808,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__PublishDiagnosticsClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5812,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SemanticTokensClientCapabilities_requests_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5817,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SemanticTokensClientCapabilities_requests_full_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5826,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SemanticTokensOptions_full_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5832,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SemanticTokensOptions_full_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5837,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__ServerCapabilities_workspace_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5842,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__ShowMessageRequestClientCapabilities_messageActionItem_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5853,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SignatureHelpClientCapabilities_signatureInformation_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5860,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__SignatureHelpClientCapabilities_signatureInformation_parameterInformation_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5873,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__TextDocumentContentChangeEvent_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5881,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__TextDocumentContentChangeEvent_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5892,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__TextDocumentFilter_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5897,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__TextDocumentFilter_Type_2",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5906,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__TextDocumentFilter_Type_3",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5915,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__WorkspaceEditClientCapabilities_changeAnnotationSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5924,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__WorkspaceSymbolClientCapabilities_resolveSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5931,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__WorkspaceSymbolClientCapabilities_symbolKind_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5937,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__WorkspaceSymbolClientCapabilities_tagSupport_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5949,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "__WorkspaceSymbol_location_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5954,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "___InitializeParams_clientInfo_Type_1",
        "module": "solidlsp.lsp_protocol_handler.lsp_types",
        "docstring": null,
        "bases": [
          "TypedDict"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 5958,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LSPConstants",
        "module": "solidlsp.lsp_protocol_handler.lsp_constants",
        "docstring": "This class contains constants used in the LSP protocol.",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 6,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LspRequest",
        "module": "solidlsp.lsp_protocol_handler.lsp_requests",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def __init__(self, send_request):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "send_request",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 38
          },
          {
            "name": "implementation",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def implementation(self, params: lsp_types.ImplementationParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the implementation locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ImplementationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 41
          },
          {
            "name": "type_definition",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_definition(self, params: lsp_types.TypeDefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Definition} or a\nThenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeDefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 51
          },
          {
            "name": "document_color",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_color(self, params: lsp_types.DocumentColorParams) -> list['lsp_types.ColorInformation']:",
            "docstring": "A request to list all color symbols found in a given text document. The request's\nparameter is of type {@link DocumentColorParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentColorParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorInformation']",
            "line_number": 61
          },
          {
            "name": "color_presentation",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def color_presentation(self, params: lsp_types.ColorPresentationParams) -> list['lsp_types.ColorPresentation']:",
            "docstring": "A request to list all presentation for a color. The request's\nparameter is of type {@link ColorPresentationParams} the\nresponse is of type {@link ColorInformation ColorInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ColorPresentationParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.ColorPresentation']",
            "line_number": 69
          },
          {
            "name": "folding_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def folding_range(self, params: lsp_types.FoldingRangeParams) -> list['lsp_types.FoldingRange'] | None:",
            "docstring": "A request to provide folding ranges in a document. The request's\nparameter is of type {@link FoldingRangeParams}, the\nresponse is of type {@link FoldingRangeList} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.FoldingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.FoldingRange'] | None",
            "line_number": 77
          },
          {
            "name": "declaration",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def declaration(self, params: lsp_types.DeclarationParams) -> Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the type definition locations of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPositionParams]\n(#TextDocumentPositionParams) the response is of type {@link Declaration}\nor a typed array of {@link DeclarationLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeclarationParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Declaration', list['lsp_types.LocationLink'], None]",
            "line_number": 85
          },
          {
            "name": "selection_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def selection_range(self, params: lsp_types.SelectionRangeParams) -> list['lsp_types.SelectionRange'] | None:",
            "docstring": "A request to provide selection ranges in a document. The request's\nparameter is of type {@link SelectionRangeParams}, the\nresponse is of type {@link SelectionRange SelectionRange[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SelectionRangeParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SelectionRange'] | None",
            "line_number": 96
          },
          {
            "name": "prepare_call_hierarchy",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_call_hierarchy(self, params: lsp_types.CallHierarchyPrepareParams) -> list['lsp_types.CallHierarchyItem'] | None:",
            "docstring": "A request to result a `CallHierarchyItem` in a document at a given position.\nCan be used as an input to an incoming or outgoing call hierarchy.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyItem'] | None",
            "line_number": 104
          },
          {
            "name": "incoming_calls",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def incoming_calls(self, params: lsp_types.CallHierarchyIncomingCallsParams) -> list['lsp_types.CallHierarchyIncomingCall'] | None:",
            "docstring": "A request to resolve the incoming calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyIncomingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyIncomingCall'] | None",
            "line_number": 112
          },
          {
            "name": "outgoing_calls",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def outgoing_calls(self, params: lsp_types.CallHierarchyOutgoingCallsParams) -> list['lsp_types.CallHierarchyOutgoingCall'] | None:",
            "docstring": "A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CallHierarchyOutgoingCallsParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CallHierarchyOutgoingCall'] | None",
            "line_number": 121
          },
          {
            "name": "semantic_tokens_full",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_full(self, params: lsp_types.SemanticTokensParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 130
          },
          {
            "name": "semantic_tokens_delta",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_delta(self, params: lsp_types.SemanticTokensDeltaParams) -> Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensDeltaParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', 'lsp_types.SemanticTokensDelta', None]",
            "line_number": 134
          },
          {
            "name": "semantic_tokens_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def semantic_tokens_range(self, params: lsp_types.SemanticTokensRangeParams) -> Union['lsp_types.SemanticTokens', None]:",
            "docstring": "@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SemanticTokensRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SemanticTokens', None]",
            "line_number": 140
          },
          {
            "name": "linked_editing_range",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def linked_editing_range(self, params: lsp_types.LinkedEditingRangeParams) -> Union['lsp_types.LinkedEditingRanges', None]:",
            "docstring": "A request to provide ranges that can be edited together.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.LinkedEditingRangeParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LinkedEditingRanges', None]",
            "line_number": 144
          },
          {
            "name": "will_create_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_create_files(self, params: lsp_types.CreateFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will create files request is sent from the client to the server before files are actually\ncreated as long as the creation is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 151
          },
          {
            "name": "will_rename_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_rename_files(self, params: lsp_types.RenameFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The will rename files request is sent from the client to the server before files are actually\nrenamed as long as the rename is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 159
          },
          {
            "name": "will_delete_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_delete_files(self, params: lsp_types.DeleteFilesParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "The did delete files notification is sent from the client to the server when\nfiles were deleted from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 167
          },
          {
            "name": "moniker",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def moniker(self, params: lsp_types.MonikerParams) -> list['lsp_types.Moniker'] | None:",
            "docstring": "A request to get the moniker of a symbol at a given text document position.\nThe request parameter is of type {@link TextDocumentPositionParams}.\nThe response is of type {@link Moniker Moniker[]} or `null`.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.MonikerParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Moniker'] | None",
            "line_number": 175
          },
          {
            "name": "prepare_type_hierarchy",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_type_hierarchy(self, params: lsp_types.TypeHierarchyPrepareParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to result a `TypeHierarchyItem` in a document at a given position.\nCan be used as an input to a subtypes or supertypes type hierarchy.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchyPrepareParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 182
          },
          {
            "name": "type_hierarchy_supertypes",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_hierarchy_supertypes(self, params: lsp_types.TypeHierarchySupertypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the supertypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySupertypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 190
          },
          {
            "name": "type_hierarchy_subtypes",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def type_hierarchy_subtypes(self, params: lsp_types.TypeHierarchySubtypesParams) -> list['lsp_types.TypeHierarchyItem'] | None:",
            "docstring": "A request to resolve the subtypes for a given `TypeHierarchyItem`.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.TypeHierarchySubtypesParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TypeHierarchyItem'] | None",
            "line_number": 199
          },
          {
            "name": "inline_value",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def inline_value(self, params: lsp_types.InlineValueParams) -> list['lsp_types.InlineValue'] | None:",
            "docstring": "A request to provide inline values in a document. The request's parameter is of\ntype {@link InlineValueParams}, the response is of type\n{@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlineValueParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlineValue'] | None",
            "line_number": 206
          },
          {
            "name": "inlay_hint",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def inlay_hint(self, params: lsp_types.InlayHintParams) -> list['lsp_types.InlayHint'] | None:",
            "docstring": "A request to provide inlay hints in a document. The request's parameter is of\ntype {@link InlayHintsParams}, the response is of type\n{@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHintParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.InlayHint'] | None",
            "line_number": 215
          },
          {
            "name": "resolve_inlay_hint",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_inlay_hint(self, params: lsp_types.InlayHint) -> 'lsp_types.InlayHint':",
            "docstring": "A request to resolve additional properties for an inlay hint.\nThe request's parameter is of type {@link InlayHint}, the response is\nof type {@link InlayHint} or a Thenable that resolves to such.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InlayHint",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InlayHint'",
            "line_number": 224
          },
          {
            "name": "text_document_diagnostic",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def text_document_diagnostic(self, params: lsp_types.DocumentDiagnosticParams) -> 'lsp_types.DocumentDiagnosticReport':",
            "docstring": "The document diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentDiagnosticReport'",
            "line_number": 233
          },
          {
            "name": "workspace_diagnostic",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def workspace_diagnostic(self, params: lsp_types.WorkspaceDiagnosticParams) -> 'lsp_types.WorkspaceDiagnosticReport':",
            "docstring": "The workspace diagnostic request definition.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceDiagnosticParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceDiagnosticReport'",
            "line_number": 240
          },
          {
            "name": "initialize",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def initialize(self, params: lsp_types.InitializeParams) -> 'lsp_types.InitializeResult':",
            "docstring": "The initialize request is sent from the client to the server.\nIt is sent once as the request after starting up the server.\nThe requests parameter is of type {@link InitializeParams}\nthe response if of type {@link InitializeResult} of a Thenable that\nresolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializeParams",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.InitializeResult'",
            "line_number": 247
          },
          {
            "name": "shutdown",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def shutdown(self) -> None:",
            "docstring": "A shutdown request is sent from the client to the server.\nIt is sent once when the client decides to shutdown the\nserver. The only notification that is sent after a shutdown request\nis the exit event.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 256
          },
          {
            "name": "will_save_wait_until",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def will_save_wait_until(self, params: lsp_types.WillSaveTextDocumentParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A document will save request is sent from the client to the server before\nthe document is actually saved. The request can return an array of TextEdits\nwhich will be applied to the text document before it is saved. Please note that\nclients might drop results if computing the text edits took too long or if a\nserver constantly fails on this request. This is done to keep the save fast and\nreliable.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 264
          },
          {
            "name": "completion",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def completion(self, params: lsp_types.CompletionParams) -> Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]:",
            "docstring": "Request to request completion at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response\nis of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\nor a Thenable that resolves to such.\n\nThe request can delay the computation of the {@link CompletionItem.detail `detail`}\nand {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\nrequest. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n`filterText`, `insertText`, and `textEdit`, must not be changed during resolve.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionParams",
                "default": null
              }
            ],
            "return_annotation": "Union[list['lsp_types.CompletionItem'], 'lsp_types.CompletionList', None]",
            "line_number": 274
          },
          {
            "name": "resolve_completion_item",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_completion_item(self, params: lsp_types.CompletionItem) -> 'lsp_types.CompletionItem':",
            "docstring": "Request to resolve additional information for a given completion item.The request's\nparameter is of type {@link CompletionItem} the response\nis of type {@link CompletionItem} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CompletionItem",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CompletionItem'",
            "line_number": 289
          },
          {
            "name": "hover",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def hover(self, params: lsp_types.HoverParams) -> Union['lsp_types.Hover', None]:",
            "docstring": "Request to request hover information at a given text document position. The request's\nparameter is of type {@link TextDocumentPosition} the response is of\ntype {@link Hover} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.HoverParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Hover', None]",
            "line_number": 296
          },
          {
            "name": "signature_help",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def signature_help(self, params: lsp_types.SignatureHelpParams) -> Union['lsp_types.SignatureHelp', None]:",
            "docstring": null,
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SignatureHelpParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.SignatureHelp', None]",
            "line_number": 303
          },
          {
            "name": "definition",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def definition(self, params: lsp_types.DefinitionParams) -> Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]:",
            "docstring": "A request to resolve the definition location of a symbol at a given text\ndocument position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the response is of either type {@link Definition}\nor a typed array of {@link DefinitionLink} or a Thenable that resolves\nto such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.Definition', list['lsp_types.LocationLink'], None]",
            "line_number": 306
          },
          {
            "name": "references",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def references(self, params: lsp_types.ReferenceParams) -> list['lsp_types.Location'] | None:",
            "docstring": "A request to resolve project-wide references for the symbol denoted\nby the given text document position. The request's parameter is of\ntype {@link ReferenceParams} the response is of type\n{@link Location Location[]} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ReferenceParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.Location'] | None",
            "line_number": 315
          },
          {
            "name": "document_highlight",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_highlight(self, params: lsp_types.DocumentHighlightParams) -> list['lsp_types.DocumentHighlight'] | None:",
            "docstring": "Request to resolve a {@link DocumentHighlight} for a given\ntext document position. The request's parameter is of type [TextDocumentPosition]\n(#TextDocumentPosition) the request response is of type [DocumentHighlight[]]\n(#DocumentHighlight) or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentHighlightParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentHighlight'] | None",
            "line_number": 323
          },
          {
            "name": "document_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_symbol(self, params: lsp_types.DocumentSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None:",
            "docstring": "A request to list all symbols found in a given text document. The request's\nparameter is of type {@link TextDocumentIdentifier} the\nresponse is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\nthat resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.DocumentSymbol'] | None",
            "line_number": 331
          },
          {
            "name": "code_action",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def code_action(self, params: lsp_types.CodeActionParams) -> list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None:",
            "docstring": "A request to provide commands for the given text document and range.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeActionParams",
                "default": null
              }
            ],
            "return_annotation": "list[Union['lsp_types.Command', 'lsp_types.CodeAction']] | None",
            "line_number": 341
          },
          {
            "name": "resolve_code_action",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_code_action(self, params: lsp_types.CodeAction) -> 'lsp_types.CodeAction':",
            "docstring": "Request to resolve additional information for a given code action.The request's\nparameter is of type {@link CodeAction} the response\nis of type {@link CodeAction} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeAction",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeAction'",
            "line_number": 345
          },
          {
            "name": "workspace_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def workspace_symbol(self, params: lsp_types.WorkspaceSymbolParams) -> list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None:",
            "docstring": "A request to list project-wide symbols matching the query string given\nby the {@link WorkspaceSymbolParams}. The response is\nof type {@link SymbolInformation SymbolInformation[]} or a Thenable that\nresolves to such.\n\n@since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n need to advertise support for WorkspaceSymbols via the client capability\n `workspace.symbol.resolveSupport`.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbolParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.SymbolInformation'] | list['lsp_types.WorkspaceSymbol'] | None",
            "line_number": 352
          },
          {
            "name": "resolve_workspace_symbol",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_workspace_symbol(self, params: lsp_types.WorkspaceSymbol) -> 'lsp_types.WorkspaceSymbol':",
            "docstring": "A request to resolve the range inside the workspace\nsymbol's location.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkspaceSymbol",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.WorkspaceSymbol'",
            "line_number": 366
          },
          {
            "name": "code_lens",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def code_lens(self, params: lsp_types.CodeLensParams) -> list['lsp_types.CodeLens'] | None:",
            "docstring": "A request to provide code lens for the given text document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLensParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.CodeLens'] | None",
            "line_number": 374
          },
          {
            "name": "resolve_code_lens",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_code_lens(self, params: lsp_types.CodeLens) -> 'lsp_types.CodeLens':",
            "docstring": "A request to resolve a command for a given code lens.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CodeLens",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.CodeLens'",
            "line_number": 378
          },
          {
            "name": "document_link",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def document_link(self, params: lsp_types.DocumentLinkParams) -> list['lsp_types.DocumentLink'] | None:",
            "docstring": "A request to provide document links",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLinkParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.DocumentLink'] | None",
            "line_number": 382
          },
          {
            "name": "resolve_document_link",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def resolve_document_link(self, params: lsp_types.DocumentLink) -> 'lsp_types.DocumentLink':",
            "docstring": "Request to resolve additional information for a given document link. The request's\nparameter is of type {@link DocumentLink} the response\nis of type {@link DocumentLink} or a Thenable that resolves to such.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentLink",
                "default": null
              }
            ],
            "return_annotation": "'lsp_types.DocumentLink'",
            "line_number": 386
          },
          {
            "name": "formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def formatting(self, params: lsp_types.DocumentFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a whole document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 393
          },
          {
            "name": "range_formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def range_formatting(self, params: lsp_types.DocumentRangeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to to format a range in a document.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentRangeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 397
          },
          {
            "name": "on_type_formatting",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def on_type_formatting(self, params: lsp_types.DocumentOnTypeFormattingParams) -> list['lsp_types.TextEdit'] | None:",
            "docstring": "A request to format a document on type.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DocumentOnTypeFormattingParams",
                "default": null
              }
            ],
            "return_annotation": "list['lsp_types.TextEdit'] | None",
            "line_number": 401
          },
          {
            "name": "rename",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def rename(self, params: lsp_types.RenameParams) -> Union['lsp_types.WorkspaceEdit', None]:",
            "docstring": "A request to rename a symbol.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.WorkspaceEdit', None]",
            "line_number": 405
          },
          {
            "name": "prepare_rename",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def prepare_rename(self, params: lsp_types.PrepareRenameParams) -> Union['lsp_types.PrepareRenameResult', None]:",
            "docstring": "A request to test and perform the setup necessary for a rename.\n\n@since 3.16 - support for default behavior",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.PrepareRenameParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.PrepareRenameResult', None]",
            "line_number": 409
          },
          {
            "name": "execute_command",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "async def execute_command(self, params: lsp_types.ExecuteCommandParams) -> Union['lsp_types.LSPAny', None]:",
            "docstring": "A request send from the client to the server to execute a command. The request might return\na workspace edit which the client will apply to the workspace.",
            "is_method": true,
            "is_async": true,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ExecuteCommandParams",
                "default": null
              }
            ],
            "return_annotation": "Union['lsp_types.LSPAny', None]",
            "line_number": 416
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 37,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "LspNotification",
        "module": "solidlsp.lsp_protocol_handler.lsp_requests",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def __init__(self, send_notification):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "send_notification",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 424
          },
          {
            "name": "did_change_workspace_folders",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_workspace_folders(self, params: lsp_types.DidChangeWorkspaceFoldersParams) -> None:",
            "docstring": "The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace\nfolder configuration changes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeWorkspaceFoldersParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 427
          },
          {
            "name": "cancel_work_done_progress",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def cancel_work_done_progress(self, params: lsp_types.WorkDoneProgressCancelParams) -> None:",
            "docstring": "The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\ninitiated on the server side.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WorkDoneProgressCancelParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 433
          },
          {
            "name": "did_create_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_create_files(self, params: lsp_types.CreateFilesParams) -> None:",
            "docstring": "The did create files notification is sent from the client to the server when\nfiles were created from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CreateFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 439
          },
          {
            "name": "did_rename_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_rename_files(self, params: lsp_types.RenameFilesParams) -> None:",
            "docstring": "The did rename files notification is sent from the client to the server when\nfiles were renamed from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.RenameFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 447
          },
          {
            "name": "did_delete_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_delete_files(self, params: lsp_types.DeleteFilesParams) -> None:",
            "docstring": "The will delete files request is sent from the client to the server before files are actually\ndeleted as long as the deletion is triggered from within the client.\n\n@since 3.16.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DeleteFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 455
          },
          {
            "name": "did_open_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_open_notebook_document(self, params: lsp_types.DidOpenNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook opens.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidOpenNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 463
          },
          {
            "name": "did_change_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_notebook_document(self, params: lsp_types.DidChangeNotebookDocumentParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 470
          },
          {
            "name": "did_save_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_save_notebook_document(self, params: lsp_types.DidSaveNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook document is saved.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidSaveNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 473
          },
          {
            "name": "did_close_notebook_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_close_notebook_document(self, params: lsp_types.DidCloseNotebookDocumentParams) -> None:",
            "docstring": "A notification sent when a notebook closes.\n\n@since 3.17.0",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidCloseNotebookDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 480
          },
          {
            "name": "initialized",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def initialized(self, params: lsp_types.InitializedParams) -> None:",
            "docstring": "The initialized notification is sent from the client to the\nserver after the client is fully initialized and the server\nis allowed to send requests from the server to the client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.InitializedParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 487
          },
          {
            "name": "exit",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def exit(self) -> None:",
            "docstring": "The exit event is sent from the client to the server to\nask the server to exit its process.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 494
          },
          {
            "name": "workspace_did_change_configuration",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def workspace_did_change_configuration(self, params: lsp_types.DidChangeConfigurationParams) -> None:",
            "docstring": "The configuration change notification is sent from the client to the server\nwhen the client's configuration has changed. The notification contains\nthe changed configuration as defined by the language client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeConfigurationParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 500
          },
          {
            "name": "did_open_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_open_text_document(self, params: lsp_types.DidOpenTextDocumentParams) -> None:",
            "docstring": "The document open notification is sent from the client to the server to signal\nnewly opened text documents. The document's truth is now managed by the client\nand the server must not try to read the document's truth using the document's\nuri. Open in this sense means it is managed by the client. It doesn't necessarily\nmean that its content is presented in an editor. An open notification must not\nbe sent more than once without a corresponding close notification send before.\nThis means open and close notification must be balanced and the max open count\nis one.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidOpenTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 507
          },
          {
            "name": "did_change_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_text_document(self, params: lsp_types.DidChangeTextDocumentParams) -> None:",
            "docstring": "The document change notification is sent from the client to the server to signal\nchanges to a text document.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 519
          },
          {
            "name": "did_close_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_close_text_document(self, params: lsp_types.DidCloseTextDocumentParams) -> None:",
            "docstring": "The document close notification is sent from the client to the server when\nthe document got closed in the client. The document's truth now exists where\nthe document's uri points to (e.g. if the document's uri is a file uri the\ntruth now exists on disk). As with the open notification the close notification\nis about managing the document's content. Receiving a close notification\ndoesn't mean that the document was open in an editor before. A close\nnotification requires a previous open notification to be sent.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidCloseTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 525
          },
          {
            "name": "did_save_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_save_text_document(self, params: lsp_types.DidSaveTextDocumentParams) -> None:",
            "docstring": "The document save notification is sent from the client to the server when\nthe document got saved in the client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 536
          },
          {
            "name": "will_save_text_document",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def will_save_text_document(self, params: lsp_types.WillSaveTextDocumentParams) -> None:",
            "docstring": "A document will save notification is sent from the client to the server before\nthe document is actually saved.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.WillSaveTextDocumentParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 542
          },
          {
            "name": "did_change_watched_files",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def did_change_watched_files(self, params: lsp_types.DidChangeWatchedFilesParams) -> None:",
            "docstring": "The watched files notification is sent from the client to the server when\nthe client detects changes to file watched by the language client.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.DidChangeWatchedFilesParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 548
          },
          {
            "name": "set_trace",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def set_trace(self, params: lsp_types.SetTraceParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.SetTraceParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 554
          },
          {
            "name": "cancel_request",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def cancel_request(self, params: lsp_types.CancelParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.CancelParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 557
          },
          {
            "name": "progress",
            "module": "solidlsp.lsp_protocol_handler.lsp_requests",
            "signature": "def progress(self, params: lsp_types.ProgressParams) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "params",
                "annotation": "lsp_types.ProgressParams",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 560
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 423,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SafeZipExtractor",
        "module": "solidlsp.util.zip",
        "docstring": "A utility class for extracting ZIP archives safely.\n\nFeatures:\n- Handles long file paths on Windows\n- Skips files that fail to extract, continuing with the rest\n- Creates necessary directories automatically\n- Optional include/exclude pattern filters",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.util.zip",
            "signature": "def __init__(self, archive_path: Path, extract_dir: Path, verbose: bool=True, include_patterns: Optional[list[str]]=None, exclude_patterns: Optional[list[str]]=None) -> None:",
            "docstring": "Initialize the SafeZipExtractor.\n\n:param archive_path: Path to the ZIP archive file\n:param extract_dir: Directory where files will be extracted\n:param verbose: Whether to log status messages\n:param include_patterns: List of glob patterns for files to extract (None = all files)\n:param exclude_patterns: List of glob patterns for files to skip",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "archive_path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "extract_dir",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "verbose",
                "annotation": "bool",
                "default": null
              },
              {
                "name": "include_patterns",
                "annotation": "Optional[list[str]]",
                "default": null
              },
              {
                "name": "exclude_patterns",
                "annotation": "Optional[list[str]]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 23
          },
          {
            "name": "extract_all",
            "module": "solidlsp.util.zip",
            "signature": "def extract_all(self) -> None:",
            "docstring": "Extract all files from the archive, skipping any that fail.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 46
          },
          {
            "name": "_should_extract",
            "module": "solidlsp.util.zip",
            "signature": "def _should_extract(self, filename: str) -> bool:",
            "docstring": "Determine whether a file should be extracted based on include/exclude patterns.\n\n:param filename: The file name from the archive\n:return: True if the file should be extracted",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "filename",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 63
          },
          {
            "name": "_extract_member",
            "module": "solidlsp.util.zip",
            "signature": "def _extract_member(self, zip_ref: zipfile.ZipFile, member: zipfile.ZipInfo) -> None:",
            "docstring": "Extract a single member from the archive with error handling.\n\n:param zip_ref: Open ZipFile object\n:param member: ZipInfo object representing the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "zip_ref",
                "annotation": "zipfile.ZipFile",
                "default": null
              },
              {
                "name": "member",
                "annotation": "zipfile.ZipInfo",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 82
          },
          {
            "name": "_normalize_path",
            "module": "solidlsp.util.zip",
            "signature": "@staticmethod",
            "docstring": "Adjust path to handle long paths on Windows.\n\n:param path: Original path\n:return: Normalized path",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 109
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 12,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "PyrightServer",
        "module": "solidlsp.language_servers.pyright_server",
        "docstring": "Provides Python specific instantiation of the LanguageServer class using Pyright.\nContains various configurations and settings specific to Python.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a PyrightServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 50
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Pyright Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 54
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.pyright_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Pyright Language Server and waits for initial workspace analysis to complete.\n\nThis prevents zombie processes by ensuring Pyright has finished its initial background\ntasks before we consider the server ready.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and workspace analysis is complete\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown cleanly\n```",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 112
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 21,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "JediServer",
        "module": "solidlsp.language_servers.jedi_server",
        "docstring": "Provides Python specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Python.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a JediServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 24
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 40
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Jedi Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 44
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.jedi_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the JEDI Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 155
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Solargraph",
        "module": "solidlsp.language_servers.solargraph",
        "docstring": "Provides Ruby specific instantiation of the LanguageServer class using Solargraph.\nContains various configurations and settings specific to Ruby.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a Solargraph instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 30
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 55
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@staticmethod",
            "docstring": "Setup runtime dependencies for Solargraph and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 59
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Solargraph Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 153
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.solargraph",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Solargraph Language Server for Ruby",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 173
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ClojureLSP",
        "module": "solidlsp.language_servers.clojure_lsp",
        "docstring": "Provides a clojure-lsp specific instantiation of the LanguageServer class. Contains various configurations and settings specific to clojure.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a ClojureLSP instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 81
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for clojure-lsp and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 102
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "@staticmethod",
            "docstring": "Returns the init params for clojure-lsp.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 124
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.clojure_lsp",
            "signature": "def _start_server(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 156
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 42,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "BashLanguageServer",
        "module": "solidlsp.language_servers.bash_language_server",
        "docstring": "Provides Bash specific instantiation of the LanguageServer class using bash-language-server.\nContains various configurations and settings specific to Bash scripting.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a BashLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 28
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Bash Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 48
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Bash Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Bash Language Server, waits for the server to be ready and yields the LanguageServer instance.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 131
          },
          {
            "name": "request_document_symbols",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def request_document_symbols(self, relative_file_path: str, include_body: bool=False) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Enhanced document symbol request with hybrid LSP + regex-based function detection for bash files.\n\nThis method combines both LSP-based detection and regex-based detection to provide comprehensive\nfunction discovery. This dual approach is necessary because:\n\n1. bash-language-server (v5.6.0) has inconsistent function detection capabilities\n2. Some bash function syntaxes are not reliably detected by the LSP server\n3. Files may contain mixed function notation styles within the same file\n4. Different formatting or indentation can affect LSP detection\n\nThe hybrid approach ensures maximum compatibility and comprehensive function discovery\nfor reliable symbolic editing operations in Serena.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 197
          },
          {
            "name": "_merge_function_detections",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _merge_function_detections(self, lsp_all_symbols: list[ls_types.UnifiedSymbolInformation], lsp_root_symbols: list[ls_types.UnifiedSymbolInformation], regex_detected_functions: list[ls_types.UnifiedSymbolInformation]) -> tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]:",
            "docstring": "Merge LSP-detected symbols with regex-detected functions, avoiding duplicates.\n\nThis method:\n1. Keeps all non-function symbols from LSP detection\n2. Keeps all LSP-detected functions (they have more accurate positioning)\n3. Adds regex-detected functions that weren't found by LSP\n4. Uses function names to detect duplicates\n\nArgs:\n    lsp_all_symbols: All symbols detected by LSP\n    lsp_root_symbols: Root-level symbols detected by LSP\n    regex_detected_functions: Functions detected by regex (all are root-level)\n\nReturns:\n    Tuple of (merged_all_symbols, merged_root_symbols)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lsp_all_symbols",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              },
              {
                "name": "lsp_root_symbols",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              },
              {
                "name": "regex_detected_functions",
                "annotation": "list[ls_types.UnifiedSymbolInformation]",
                "default": null
              }
            ],
            "return_annotation": "tuple[list[ls_types.UnifiedSymbolInformation], list[ls_types.UnifiedSymbolInformation]]",
            "line_number": 240
          },
          {
            "name": "_detect_bash_functions",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _detect_bash_functions(self, relative_file_path: str, include_body: bool=False) -> list[ls_types.UnifiedSymbolInformation]:",
            "docstring": "Regex-based detection of bash functions as fallback when LSP doesn't provide them.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "include_body",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[ls_types.UnifiedSymbolInformation]",
            "line_number": 291
          },
          {
            "name": "_find_function_end",
            "module": "solidlsp.language_servers.bash_language_server",
            "signature": "def _find_function_end(self, lines: list[str], start_line: int) -> int:",
            "docstring": "Find the end line of a bash function by matching opening and closing braces.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "lines",
                "annotation": "list[str]",
                "default": null
              },
              {
                "name": "start_line",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "int",
            "line_number": 361
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TerraformLS",
        "module": "solidlsp.language_servers.terraform_ls",
        "docstring": "Provides Terraform specific instantiation of the LanguageServer class using terraform-ls.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 25
          },
          {
            "name": "_ensure_tf_command_available",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 29
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for terraform-ls.\nDownloads and installs terraform-ls if not already present.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 60
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a TerraformLS instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 118
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Terraform Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 138
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.terraform_ls",
            "signature": "def _start_server(self):",
            "docstring": "Start terraform-ls server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 169
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "TypeScriptLanguageServer",
        "module": "solidlsp.language_servers.typescript_language_server",
        "docstring": "Provides TypeScript specific instantiation of the LanguageServer class. Contains various configurations and settings specific to TypeScript.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a TypeScriptLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 46
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 65
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for TypeScript Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 74
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the TypeScript Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 137
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the TypeScript Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 177
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 254
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 41,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "pwd",
        "module": "solidlsp.language_servers.typescript_language_server",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "getpwuid",
            "module": "solidlsp.language_servers.typescript_language_server",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "uid",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 32
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 30,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "OmniSharp",
        "module": "solidlsp.language_servers.omnisharp",
        "docstring": "Provides C# specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C#.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates an OmniSharp instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 62
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 116
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Omnisharp Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 120
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for OmniSharp.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 145
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.omnisharp",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Omnisharp Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 207
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 57,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "DartLanguageServer",
        "module": "solidlsp.language_servers.dart_language_server",
        "docstring": "Provides Dart specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Dart.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "def __init__(self, config, logger, repository_root_path, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a DartServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": null,
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": null,
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 18
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "'LanguageServerLogger'",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 33
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Dart Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.dart_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Start the language server and yield when the server is ready.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 119
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 13,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Intelephense",
        "module": "solidlsp.language_servers.intelephense",
        "docstring": "Provides PHP specific instantiation of the LanguageServer class using Intelephense.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 30
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Intelephense and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 38
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 85
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the TypeScript Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 102
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "def _start_server(self):",
            "docstring": "Start Intelephense server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 129
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 173
          },
          {
            "name": "_send_definition_request",
            "module": "solidlsp.language_servers.intelephense",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "definition_params",
                "annotation": "DefinitionParams",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 183
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 24,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RuntimeDependency",
        "module": "solidlsp.language_servers.common",
        "docstring": "Represents a runtime dependency for a language server.",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 17,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "RuntimeDependencyCollection",
        "module": "solidlsp.language_servers.common",
        "docstring": "Utility to handle installation of runtime dependencies.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.common",
            "signature": "def __init__(self, dependencies: Sequence[RuntimeDependency]):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dependencies",
                "annotation": "Sequence[RuntimeDependency]",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 35
          },
          {
            "name": "for_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def for_platform(self, platform_id: str) -> list[RuntimeDependency]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "platform_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[RuntimeDependency]",
            "line_number": 38
          },
          {
            "name": "for_current_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def for_current_platform(self) -> list[RuntimeDependency]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[RuntimeDependency]",
            "line_number": 41
          },
          {
            "name": "single_for_current_platform",
            "module": "solidlsp.language_servers.common",
            "signature": "def single_for_current_platform(self) -> RuntimeDependency:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "RuntimeDependency",
            "line_number": 44
          },
          {
            "name": "binary_path",
            "module": "solidlsp.language_servers.common",
            "signature": "def binary_path(self, target_dir: str) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 50
          },
          {
            "name": "install",
            "module": "solidlsp.language_servers.common",
            "signature": "def install(self, logger: LanguageServerLogger, target_dir: str) -> dict[str, str]:",
            "docstring": "Install all dependencies for the current platform into *target_dir*.\n\nReturns a mapping from dependency id to the resolved binary path.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "dict[str, str]",
            "line_number": 56
          },
          {
            "name": "_run_command",
            "module": "solidlsp.language_servers.common",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "command",
                "annotation": "str | list[str]",
                "default": null
              },
              {
                "name": "cwd",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 75
          },
          {
            "name": "_install_from_url",
            "module": "solidlsp.language_servers.common",
            "signature": "@staticmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "target_dir",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 110
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 32,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ClangdLanguageServer",
        "module": "solidlsp.language_servers.clangd_language_server",
        "docstring": "Provides C/C++ specific instantiation of the LanguageServer class. Contains various configurations and settings specific to C/C++.\nAs the project gets bigger in size, building index will take time. Try running clangd multiple times to ensure index is built properly.\nAlso make sure compile_commands.json is created at root of the source directory. Check clangd test case for example.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a ClangdLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for ClangdLanguageServer and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 48
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the clangd Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 102
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.clangd_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Clangd Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 130
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 20,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RustAnalyzer",
        "module": "solidlsp.language_servers.rust_analyzer",
        "docstring": "Provides Rust specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Rust.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a RustAnalyzer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 27
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 48
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for rust_analyzer and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 52
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Rust Analyzer Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 119
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.rust_analyzer",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Rust Analyzer Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 592
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "Gopls",
        "module": "solidlsp.language_servers.gopls",
        "docstring": "Provides Go specific instantiation of the LanguageServer class using gopls.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 23
          },
          {
            "name": "_get_go_version",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Get the installed Go version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 31
          },
          {
            "name": "_get_gopls_version",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Get the installed gopls version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 42
          },
          {
            "name": "_setup_runtime_dependency",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Check if required Go runtime dependencies are available.\nRaises RuntimeError with helpful message if dependencies are missing.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": null,
            "line_number": 53
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.gopls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 74
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.gopls",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Go Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 91
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.gopls",
            "signature": "def _start_server(self):",
            "docstring": "Start gopls server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 122
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 17,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "VtsLanguageServer",
        "module": "solidlsp.language_servers.vts_language_server",
        "docstring": "Provides TypeScript specific instantiation of the LanguageServer class using vtsls.\nContains various configurations and settings specific to TypeScript via vtsls wrapper.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a VtsLanguageServer instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 33
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 52
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for VTS Language Server and return the command to start the server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 61
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the VTS Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 110
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the VTS Language Server, waits for the server to be ready and yields the LanguageServer instance.\n\nUsage:\n```\nasync with lsp.start_server():\n    # LanguageServer has been initialized and ready to serve requests\n    await lsp.request_definition(...)\n    await lsp.request_references(...)\n    # Shutdown the LanguageServer on exit from scope\n# LanguageServer has been shutdown",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 150
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.vts_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 236
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 27,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "CSharpLanguageServer",
        "module": "solidlsp.language_servers.csharp_language_server",
        "docstring": "Provides C# specific instantiation of the LanguageServer class using Microsoft.CodeAnalysis.LanguageServer.\nThis is the official Roslyn-based language server from Microsoft.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a CSharpLanguageServer instance. This class is not meant to be instantiated directly.\nUse LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 179
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 218
          },
          {
            "name": "_ensure_server_installed",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET runtime and Microsoft.CodeAnalysis.LanguageServer are available.\nReturns a tuple of (dotnet_path, language_server_dll_path).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "tuple[str, str]",
            "line_number": 222
          },
          {
            "name": "_get_runtime_id",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Determine the runtime ID based on the platform.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [],
            "return_annotation": "str",
            "line_number": 237
          },
          {
            "name": "_get_runtime_dependencies",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Get the language server and .NET runtime dependencies for the platform.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "runtime_id",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "tuple[RuntimeDependency, RuntimeDependency]",
            "line_number": 252
          },
          {
            "name": "_ensure_dotnet_runtime",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET runtime is available and return the dotnet executable path.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "runtime_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 271
          },
          {
            "name": "_ensure_language_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure language server is available and return the DLL path.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "lang_server_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 291
          },
          {
            "name": "_extract_language_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@staticmethod",
            "docstring": "Extract language server files from downloaded package.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "lang_server_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "package_path",
                "annotation": "Path",
                "default": null
              },
              {
                "name": "server_dir",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 323
          },
          {
            "name": "_download_nuget_package_direct",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Download a NuGet package directly from the Azure NuGet feed.\nReturns the path to the extracted package directory.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "package_name",
                "annotation": "str",
                "default": null
              },
              {
                "name": "package_version",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "Path",
            "line_number": 346
          },
          {
            "name": "_ensure_dotnet_runtime_from_config",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "@classmethod",
            "docstring": "Ensure .NET 9 runtime is available using runtime dependency configuration.\nReturns the path to the dotnet executable.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "runtime_dep",
                "annotation": "RuntimeDependency",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 406
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _get_initialize_params(self) -> InitializeParams:",
            "docstring": "Returns the initialize params for the Microsoft.CodeAnalysis.LanguageServer.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 468
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _start_server(self):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 523
          },
          {
            "name": "_force_pull_diagnostics",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _force_pull_diagnostics(self, init_response: dict) -> None:",
            "docstring": "Apply the diagnostic capabilities hack.\nForces the server to support pull diagnostics.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "init_response",
                "annotation": "dict",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 687
          },
          {
            "name": "_open_solution_and_projects",
            "module": "solidlsp.language_servers.csharp_language_server",
            "signature": "def _open_solution_and_projects(self) -> None:",
            "docstring": "Open solution and project files using notifications.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 706
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 173,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RuntimeDependencyPaths",
        "module": "solidlsp.language_servers.eclipse_jdtls",
        "docstring": "Stores the paths to the runtime dependencies of EclipseJDTLS",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclasses.dataclass"
        ],
        "line_number": 26,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "EclipseJDTLS",
        "module": "solidlsp.language_servers.eclipse_jdtls",
        "docstring": "The EclipseJDTLS class provides a Java specific implementation of the LanguageServer class",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a new EclipseJDTLS instance initializing the language server settings appropriately.\nThis class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 46
          },
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 141
          },
          {
            "name": "_setupRuntimeDependencies",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for EclipseJDTLS and return the paths.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "RuntimeDependencyPaths",
            "line_number": 159
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def _get_initialize_params(self, repository_absolute_path: str) -> InitializeParams:",
            "docstring": "Returns the initialize parameters for the EclipseJDTLS server.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 319
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.eclipse_jdtls",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Eclipse JDTLS Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 644
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 41,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "KotlinRuntimeDependencyPaths",
        "module": "solidlsp.language_servers.kotlin_language_server",
        "docstring": "Stores the paths to the runtime dependencies of Kotlin Language Server",
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclasses.dataclass"
        ],
        "line_number": 21,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "KotlinLanguageServer",
        "module": "solidlsp.language_servers.kotlin_language_server",
        "docstring": "Provides Kotlin specific instantiation of the LanguageServer class. Contains various configurations and settings specific to Kotlin.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": "Creates a Kotlin Language Server instance. This class is not meant to be instantiated directly. Use LanguageServer.create() instead.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 36
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Kotlin Language Server and return the paths.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "KotlinRuntimeDependencyPaths",
            "line_number": 61
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Kotlin Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 172
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.kotlin_language_server",
            "signature": "def _start_server(self):",
            "docstring": "Starts the Kotlin Language Server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 425
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 31,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ElixirTools",
        "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
        "docstring": "Provides Elixir specific instantiation of the LanguageServer class using Next LS from elixir-tools.",
        "bases": [
          "SolidLanguageServer"
        ],
        "methods": [
          {
            "name": "is_ignored_dirname",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@override",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 28
          },
          {
            "name": "_is_next_ls_internal_file",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def _is_next_ls_internal_file(self, abs_path: str) -> bool:",
            "docstring": "Check if an absolute path is a Next LS internal file that should be ignored.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "abs_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 37
          },
          {
            "name": "_send_references_request",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@override",
            "docstring": "Override to filter out Next LS internal files from references.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "override"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "column",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 50
          },
          {
            "name": "_get_elixir_version",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@classmethod",
            "docstring": "Get the installed Elixir version or None if not found.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 73
          },
          {
            "name": "_setup_runtime_dependencies",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@classmethod",
            "docstring": "Setup runtime dependencies for Next LS.\nDownloads the Next LS binary for the current platform and returns the path to the executable.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 84
          },
          {
            "name": "__init__",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def __init__(self, config: LanguageServerConfig, logger: LanguageServerLogger, repository_root_path: str, solidlsp_settings: SolidLSPSettings):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "config",
                "annotation": "LanguageServerConfig",
                "default": null
              },
              {
                "name": "logger",
                "annotation": "LanguageServerLogger",
                "default": null
              },
              {
                "name": "repository_root_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "solidlsp_settings",
                "annotation": "SolidLSPSettings",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 168
          },
          {
            "name": "_get_initialize_params",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "@staticmethod",
            "docstring": "Returns the initialize params for the Next LS Language Server.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "staticmethod"
            ],
            "parameters": [
              {
                "name": "repository_absolute_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "InitializeParams",
            "line_number": 188
          },
          {
            "name": "_start_server",
            "module": "solidlsp.language_servers.elixir_tools.elixir_tools",
            "signature": "def _start_server(self):",
            "docstring": "Start Next LS server process",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 248
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 22,
        "is_abstract": false,
        "is_dataclass": false
      }
    ],
    "functions": [
      {
        "name": "make_response",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def make_response(request_id: Any, params: PayloadLike) -> StringDict:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "request_id",
            "annotation": "Any",
            "default": null
          },
          {
            "name": "params",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": "StringDict",
        "line_number": 78
      },
      {
        "name": "make_error_response",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def make_error_response(request_id: Any, err: LSPError) -> StringDict:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "request_id",
            "annotation": "Any",
            "default": null
          },
          {
            "name": "err",
            "annotation": "LSPError",
            "default": null
          }
        ],
        "return_annotation": "StringDict",
        "line_number": 82
      },
      {
        "name": "make_notification",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def make_notification(method: str, params: PayloadLike) -> StringDict:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "method",
            "annotation": "str",
            "default": null
          },
          {
            "name": "params",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": "StringDict",
        "line_number": 86
      },
      {
        "name": "make_request",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def make_request(method: str, request_id: Any, params: PayloadLike) -> StringDict:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "method",
            "annotation": "str",
            "default": null
          },
          {
            "name": "request_id",
            "annotation": "Any",
            "default": null
          },
          {
            "name": "params",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": "StringDict",
        "line_number": 90
      },
      {
        "name": "create_message",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def create_message(payload: PayloadLike):",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "payload",
            "annotation": "PayloadLike",
            "default": null
          }
        ],
        "return_annotation": null,
        "line_number": 98
      },
      {
        "name": "content_length",
        "module": "solidlsp.lsp_protocol_handler.server",
        "signature": "def content_length(line: bytes) -> int | None:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "line",
            "annotation": "bytes",
            "default": null
          }
        ],
        "return_annotation": "int | None",
        "line_number": 114
      },
      {
        "name": "run_command",
        "module": "solidlsp.language_servers.clojure_lsp",
        "signature": "def run_command(cmd: list, capture_output: bool=True) -> subprocess.CompletedProcess:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "cmd",
            "annotation": "list",
            "default": null
          },
          {
            "name": "capture_output",
            "annotation": "bool",
            "default": null
          }
        ],
        "return_annotation": "subprocess.CompletedProcess",
        "line_number": 22
      },
      {
        "name": "verify_clojure_cli",
        "module": "solidlsp.language_servers.clojure_lsp",
        "signature": "def verify_clojure_cli():",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": null,
        "line_number": 28
      },
      {
        "name": "breadth_first_file_scan",
        "module": "solidlsp.language_servers.omnisharp",
        "signature": "def breadth_first_file_scan(root) -> Iterable[str]:",
        "docstring": "This function was obtained from https://stackoverflow.com/questions/49654234/is-there-a-breadth-first-search-option-available-in-os-walk-or-equivalent-py\nIt traverses the directory tree in breadth first order.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "Iterable[str]",
        "line_number": 24
      },
      {
        "name": "find_least_depth_sln_file",
        "module": "solidlsp.language_servers.omnisharp",
        "signature": "def find_least_depth_sln_file(root_dir) -> str | None:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "str | None",
        "line_number": 50
      },
      {
        "name": "breadth_first_file_scan",
        "module": "solidlsp.language_servers.csharp_language_server",
        "signature": "def breadth_first_file_scan(root_dir):",
        "docstring": "Perform a breadth-first scan of files in the given directory.\nYields file paths in breadth-first order.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": null,
        "line_number": 129
      },
      {
        "name": "find_solution_or_project_file",
        "module": "solidlsp.language_servers.csharp_language_server",
        "signature": "def find_solution_or_project_file(root_dir) -> str | None:",
        "docstring": "Find the first .sln file in breadth-first order.\nIf no .sln file is found, look for a .csproj file.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "root_dir",
            "annotation": null,
            "default": null
          }
        ],
        "return_annotation": "str | None",
        "line_number": 151
      }
    ],
    "constants": [
      "OSX",
      "V4",
      "V6",
      "V7",
      "V8",
      "V9",
      "VMONO",
      "CSHARP",
      "PYTHON",
      "RUST",
      "JAVA",
      "KOTLIN",
      "TYPESCRIPT",
      "GO",
      "RUBY",
      "DART",
      "CPP",
      "PHP",
      "CLOJURE",
      "ELIXIR",
      "TERRAFORM",
      "BASH",
      "TYPESCRIPT_VTS",
      "PYTHON_JEDI",
      "CSHARP_OMNISHARP",
      "URI",
      "ERROR",
      "WARNING",
      "INFORMATION",
      "HINT",
      "CONTENT_LENGTH",
      "ENCODING",
      "URI",
      "UTF8",
      "UTF16",
      "UTF32",
      "URI",
      "RANGE",
      "ORIGIN_SELECTION_RANGE",
      "TARGET_URI",
      "TARGET_RANGE",
      "TARGET_SELECTION_RANGE",
      "TEXT_DOCUMENT",
      "LANGUAGE_ID",
      "VERSION",
      "TEXT",
      "POSITION",
      "LINE",
      "CHARACTER",
      "CONTENT_CHANGES",
      "NAME",
      "KIND",
      "CHILDREN",
      "LOCATION",
      "SEVERITY",
      "MESSAGE",
      "RUNTIME_DEPENDENCIES"
    ]
  },
  "project_api_surface": {
    "classes": [
      {
        "name": "Project",
        "module": "serena.project",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.project",
            "signature": "def __init__(self, project_root: str, project_config: ProjectConfig, is_newly_created: bool=False):",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project_config",
                "annotation": "ProjectConfig",
                "default": null
              },
              {
                "name": "is_newly_created",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": null,
            "line_number": 20
          },
          {
            "name": "project_name",
            "module": "serena.project",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 50
          },
          {
            "name": "language",
            "module": "serena.project",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Language",
            "line_number": 54
          },
          {
            "name": "load",
            "module": "serena.project",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str | Path",
                "default": null
              },
              {
                "name": "autogenerate",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 58
          },
          {
            "name": "path_to_project_yml",
            "module": "serena.project",
            "signature": "def path_to_project_yml(self) -> str:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 65
          },
          {
            "name": "read_file",
            "module": "serena.project",
            "signature": "def read_file(self, relative_path: str) -> str:",
            "docstring": "Reads a file relative to the project root.\n\n:param relative_path: the path to the file relative to the project root\n:return: the content of the file",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 68
          },
          {
            "name": "get_ignore_spec",
            "module": "serena.project",
            "signature": "def get_ignore_spec(self) -> pathspec.PathSpec:",
            "docstring": ":return: the pathspec matcher for the paths that were configured to be ignored,\n    either explicitly or implicitly through .gitignore files.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "pathspec.PathSpec",
            "line_number": 80
          },
          {
            "name": "_is_ignored_dirname",
            "module": "serena.project",
            "signature": "def _is_ignored_dirname(self, dirname: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "dirname",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 87
          },
          {
            "name": "_is_ignored_relative_path",
            "module": "serena.project",
            "signature": "def _is_ignored_relative_path(self, relative_path: str, ignore_non_source_files: bool=True) -> bool:",
            "docstring": "Determine whether a path should be ignored based on file type and ignore patterns.\n\n:param relative_path: Relative path to check\n:param ignore_non_source_files: whether files that are not source files (according to the file masks\n    determined by the project's programming language) shall be ignored\n\n:return: whether the path should be ignored",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "ignore_non_source_files",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 90
          },
          {
            "name": "is_ignored_path",
            "module": "serena.project",
            "signature": "def is_ignored_path(self, path: str | Path) -> bool:",
            "docstring": "Checks whether the given path is ignored\n\n:param path: the path to check, can be absolute or relative",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 126
          },
          {
            "name": "is_path_in_project",
            "module": "serena.project",
            "signature": "def is_path_in_project(self, path: str | Path) -> bool:",
            "docstring": "Checks if the given (absolute or relative) path is inside the project directory.\nNote that even relative paths may be outside if they contain \"..\" or point to symlinks.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 144
          },
          {
            "name": "validate_relative_path",
            "module": "serena.project",
            "signature": "def validate_relative_path(self, relative_path: str) -> None:",
            "docstring": "Validates that the given relative path is safe to read or edit,\nmeaning it's inside the project directory and is not ignored by git.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 157
          },
          {
            "name": "gather_source_files",
            "module": "serena.project",
            "signature": "def gather_source_files(self, relative_path: str='') -> list[str]:",
            "docstring": "Retrieves relative paths of all source files, optionally limited to the given path\n\n:param relative_path: if provided, restrict search to this path",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 168
          },
          {
            "name": "search_source_files_for_pattern",
            "module": "serena.project",
            "signature": "def search_source_files_for_pattern(self, pattern: str, relative_path: str='', context_lines_before: int=0, context_lines_after: int=0, paths_include_glob: str | None=None, paths_exclude_glob: str | None=None) -> list[MatchedConsecutiveLines]:",
            "docstring": "Search for a pattern across all (non-ignored) source files\n\n:param pattern: Regular expression pattern to search for, either as a compiled Pattern or string\n:param relative_path:\n:param context_lines_before: Number of lines of context to include before each match\n:param context_lines_after: Number of lines of context to include after each match\n:param paths_include_glob: Glob pattern to filter which files to include in the search\n:param paths_exclude_glob: Glob pattern to filter which files to exclude from the search. Takes precedence over paths_include_glob.\n:return: List of matched consecutive lines with context",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "pattern",
                "annotation": "str",
                "default": null
              },
              {
                "name": "relative_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              },
              {
                "name": "paths_include_glob",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "paths_exclude_glob",
                "annotation": "str | None",
                "default": null
              }
            ],
            "return_annotation": "list[MatchedConsecutiveLines]",
            "line_number": 193
          },
          {
            "name": "retrieve_content_around_line",
            "module": "serena.project",
            "signature": "def retrieve_content_around_line(self, relative_file_path: str, line: int, context_lines_before: int=0, context_lines_after: int=0) -> MatchedConsecutiveLines:",
            "docstring": "Retrieve the content of the given file around the given line.\n\n:param relative_file_path: The relative path of the file to retrieve the content from\n:param line: The line number to retrieve the content around\n:param context_lines_before: The number of lines to retrieve before the given line\n:param context_lines_after: The number of lines to retrieve after the given line\n\n:return MatchedConsecutiveLines: A container with the desired lines.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "relative_file_path",
                "annotation": "str",
                "default": null
              },
              {
                "name": "line",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_before",
                "annotation": "int",
                "default": null
              },
              {
                "name": "context_lines_after",
                "annotation": "int",
                "default": null
              }
            ],
            "return_annotation": "MatchedConsecutiveLines",
            "line_number": 224
          },
          {
            "name": "create_language_server",
            "module": "serena.project",
            "signature": "def create_language_server(self, log_level: int=logging.INFO, ls_timeout: float | None=DEFAULT_TOOL_TIMEOUT - 5, trace_lsp_communication: bool=False) -> SolidLanguageServer:",
            "docstring": "Create a language server for a project. Note that you will have to start it\nbefore performing any LS operations.\n\n:param project: either a path to the project root or a ProjectConfig instance.\n    If no project.yml is found, the default project configuration will be used.\n:param log_level: the log level for the language server\n:param ls_timeout: the timeout for the language server\n:param trace_lsp_communication: whether to trace LSP communication\n:return: the language server",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "log_level",
                "annotation": "int",
                "default": null
              },
              {
                "name": "ls_timeout",
                "annotation": "float | None",
                "default": null
              },
              {
                "name": "trace_lsp_communication",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "SolidLanguageServer",
            "line_number": 246
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 19,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SerenaPaths",
        "module": "serena.config.serena_config",
        "docstring": "Provides paths to various Serena-related directories and files.",
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 50
          },
          {
            "name": "get_next_log_file_path",
            "module": "serena.config.serena_config",
            "signature": "def get_next_log_file_path(self, prefix: str) -> str:",
            "docstring": ":param prefix: the filename prefix indicating the type of the log file\n:return: the full path to the log file to use",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "prefix",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 56
          }
        ],
        "class_variables": [],
        "decorators": [
          "singleton"
        ],
        "line_number": 45,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ToolSet",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self, tool_names: set[str]) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_names",
                "annotation": "set[str]",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 69
          },
          {
            "name": "default",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": ":return: the default tool set, which contains all tools that are enabled by default",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 73
          },
          {
            "name": "apply",
            "module": "serena.config.serena_config",
            "signature": "def apply(self, *tool_inclusion_definitions: 'ToolInclusionDefinition') -> 'ToolSet':",
            "docstring": ":param tool_inclusion_definitions: the definitions to apply\n:return: a new tool set with the definitions applied",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 81
          },
          {
            "name": "without_editing_tools",
            "module": "serena.config.serena_config",
            "signature": "def without_editing_tools(self) -> 'ToolSet':",
            "docstring": ":return: a new tool set that excludes all tools that can edit",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'ToolSet'",
            "line_number": 111
          },
          {
            "name": "get_tool_names",
            "module": "serena.config.serena_config",
            "signature": "def get_tool_names(self) -> set[str]:",
            "docstring": "Returns the names of the tools that are currently included in the tool set.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "set[str]",
            "line_number": 124
          },
          {
            "name": "includes_name",
            "module": "serena.config.serena_config",
            "signature": "def includes_name(self, tool_name: str) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "tool_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 130
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 68,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ToolInclusionDefinition",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [],
        "methods": [],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 135,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "SerenaConfigError",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "Exception"
        ],
        "methods": [],
        "class_variables": [],
        "decorators": [],
        "line_number": 140,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ProjectConfig",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 173
          },
          {
            "name": "autogenerate",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Autogenerate a project configuration for a given project root.\n\n:param project_root: the path to the project root\n:param project_name: the name of the project; if None, the name of the project will be the name of the directory\n    containing the project\n:param project_language: the programming language of the project; if None, it will be determined automatically\n:param save_to_disk: whether to save the project configuration to disk\n:return: the project configuration",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str | Path",
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str | None",
                "default": null
              },
              {
                "name": "project_language",
                "annotation": "Language | None",
                "default": null
              },
              {
                "name": "save_to_disk",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 177
          },
          {
            "name": "rel_path_to_project_yml",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 220
          },
          {
            "name": "_from_dict",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Create a ProjectConfig instance from a configuration dictionary",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "data",
                "annotation": "dict[str, Any]",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 224
          },
          {
            "name": "load",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Load a ProjectConfig instance from the path to the project root.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "Path | str",
                "default": null
              },
              {
                "name": "autogenerate",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 251
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 162,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "RegisteredProject",
        "module": "serena.config.serena_config",
        "docstring": null,
        "bases": [
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "__init__",
            "module": "serena.config.serena_config",
            "signature": "def __init__(self, project_root: str, project_config: 'ProjectConfig', project_instance: Optional['Project']=None) -> None:",
            "docstring": "Represents a registered project in the Serena configuration.\n\n:param project_root: the root directory of the project\n:param project_config: the configuration of the project",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "str",
                "default": null
              },
              {
                "name": "project_config",
                "annotation": "'ProjectConfig'",
                "default": null
              },
              {
                "name": "project_instance",
                "annotation": "Optional['Project']",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 270
          },
          {
            "name": "_tostring_exclude_private",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_exclude_private(self) -> bool:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 281
          },
          {
            "name": "project_name",
            "module": "serena.config.serena_config",
            "signature": "@property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 285
          },
          {
            "name": "from_project_instance",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_instance",
                "annotation": "'Project'",
                "default": null
              }
            ],
            "return_annotation": "'RegisteredProject'",
            "line_number": 289
          },
          {
            "name": "matches_root_path",
            "module": "serena.config.serena_config",
            "signature": "def matches_root_path(self, path: str | Path) -> bool:",
            "docstring": "Check if the given path matches the project root path.\n\n:param path: the path to check\n:return: True if the path matches the project root, False otherwise",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "bool",
            "line_number": 296
          },
          {
            "name": "get_project_instance",
            "module": "serena.config.serena_config",
            "signature": "def get_project_instance(self) -> 'Project':",
            "docstring": "Returns the project instance for this registered project, loading it if necessary.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 305
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 269,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SerenaConfig",
        "module": "serena.config.serena_config",
        "docstring": "Holds the Serena agent configuration, which is typically loaded from a YAML configuration file\n(when instantiated via :method:`from_config_file`), which is updated when projects are added or removed.\nFor testing purposes, it can also be instantiated directly with the desired parameters.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.serena_config",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 357
          },
          {
            "name": "generate_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Generates a Serena configuration file at the specified path from the template file.\n\n:param config_file_path: the path where the configuration file should be generated",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "config_file_path",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 361
          },
          {
            "name": "_determine_config_file_path",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": ":return: the location where the Serena configuration file is stored/should be stored",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 372
          },
          {
            "name": "from_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Static constructor to create SerenaConfig from the configuration file",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "generate_if_missing",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "'SerenaConfig'",
            "line_number": 392
          },
          {
            "name": "_migrate_out_of_project_config_file",
            "module": "serena.config.serena_config",
            "signature": "@classmethod",
            "docstring": "Migrates a legacy project configuration file (which is a YAML file containing the project root) to the\nin-project configuration file (project.yml) inside the project root directory.\n\n:param path: the path to the legacy project configuration file\n:return: the project root path if the migration was successful, None otherwise.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "path",
                "annotation": "Path",
                "default": null
              }
            ],
            "return_annotation": "Path | None",
            "line_number": 467
          },
          {
            "name": "project_paths",
            "module": "serena.config.serena_config",
            "signature": "@cached_property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "cached_property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 491
          },
          {
            "name": "project_names",
            "module": "serena.config.serena_config",
            "signature": "@cached_property",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "cached_property"
            ],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 495
          },
          {
            "name": "get_project",
            "module": "serena.config.serena_config",
            "signature": "def get_project(self, project_root_or_name: str) -> Optional['Project']:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root_or_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Optional['Project']",
            "line_number": 498
          },
          {
            "name": "add_project_from_path",
            "module": "serena.config.serena_config",
            "signature": "def add_project_from_path(self, project_root: Path | str) -> 'Project':",
            "docstring": "Add a project to the Serena configuration from a given path. Will raise a FileExistsError if a\nproject already exists at the path.\n\n:param project_root: the path to the project to add\n:return: the project that was added",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_root",
                "annotation": "Path | str",
                "default": null
              }
            ],
            "return_annotation": "'Project'",
            "line_number": 518
          },
          {
            "name": "remove_project",
            "module": "serena.config.serena_config",
            "signature": "def remove_project(self, project_name: str) -> None:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 548
          },
          {
            "name": "save",
            "module": "serena.config.serena_config",
            "signature": "def save(self) -> None:",
            "docstring": "Saves the configuration to the file from which it was loaded (if any)",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 558
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 318,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "SerenaAgentMode",
        "module": "serena.config.context_mode",
        "docstring": "Represents a mode of operation for the agent, typically read off a YAML file.\nAn agent can be in multiple modes simultaneously as long as they are not mutually exclusive.\nThe modes can be adjusted after the agent is running, for example for switching from planning to editing.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.context_mode",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 47
          },
          {
            "name": "print_overview",
            "module": "serena.config.context_mode",
            "signature": "def print_overview(self) -> None:",
            "docstring": "Print an overview of the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 50
          },
          {
            "name": "from_yaml",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a mode from a YAML file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "yaml_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 57
          },
          {
            "name": "get_path",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Get the path to the YAML file for a mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 65
          },
          {
            "name": "from_name",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a registered Serena mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 81
          },
          {
            "name": "from_name_internal",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Loads an internal Serena mode",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 87
          },
          {
            "name": "list_registered_mode_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all registered modes (from the corresponding YAML files in the serena repo).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_user_modes",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 95
          },
          {
            "name": "list_custom_mode_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all custom modes defined by the user.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 103
          },
          {
            "name": "load_default_modes",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load the default modes (interactive and editing).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[Self]",
            "line_number": 108
          },
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_or_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 113
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 33,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "SerenaAgentContext",
        "module": "serena.config.context_mode",
        "docstring": "Represents a context where the agent is operating (an IDE, a chat, etc.), typically read off a YAML file.\nAn agent can only be in a single context at a time.\nThe contexts cannot be changed after the agent is running.",
        "bases": [
          "ToolInclusionDefinition",
          "ToStringMixin"
        ],
        "methods": [
          {
            "name": "_tostring_includes",
            "module": "serena.config.context_mode",
            "signature": "def _tostring_includes(self) -> list[str]:",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 136
          },
          {
            "name": "from_yaml",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a context from a YAML file.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "yaml_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 140
          },
          {
            "name": "get_path",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Get the path to the YAML file for a context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 151
          },
          {
            "name": "from_name",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load a registered Serena context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 167
          },
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": null,
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "name_or_path",
                "annotation": "str | Path",
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 173
          },
          {
            "name": "list_registered_context_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all registered contexts (from the corresponding YAML files in the serena repo).",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              },
              {
                "name": "include_user_contexts",
                "annotation": "bool",
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 179
          },
          {
            "name": "list_custom_context_names",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Names of all custom contexts defined by the user.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "list[str]",
            "line_number": 187
          },
          {
            "name": "load_default",
            "module": "serena.config.context_mode",
            "signature": "@classmethod",
            "docstring": "Load the default context.",
            "is_method": true,
            "is_async": false,
            "decorators": [
              "classmethod"
            ],
            "parameters": [
              {
                "name": "cls",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "Self",
            "line_number": 192
          },
          {
            "name": "print_overview",
            "module": "serena.config.context_mode",
            "signature": "def print_overview(self) -> None:",
            "docstring": "Print an overview of the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "None",
            "line_number": 196
          }
        ],
        "class_variables": [],
        "decorators": [
          "dataclass"
        ],
        "line_number": 120,
        "is_abstract": false,
        "is_dataclass": true
      },
      {
        "name": "RegisteredContext",
        "module": "serena.config.context_mode",
        "docstring": "A registered context.",
        "bases": [
          "Enum"
        ],
        "methods": [
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "def load(self) -> SerenaAgentContext:",
            "docstring": "Load the context.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SerenaAgentContext",
            "line_number": 213
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 203,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RegisteredMode",
        "module": "serena.config.context_mode",
        "docstring": "A registered mode.",
        "bases": [
          "Enum"
        ],
        "methods": [
          {
            "name": "load",
            "module": "serena.config.context_mode",
            "signature": "def load(self) -> SerenaAgentMode:",
            "docstring": "Load the mode.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "SerenaAgentMode",
            "line_number": 230
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 218,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "ActivateProjectTool",
        "module": "serena.tools.config_tools",
        "docstring": "Activates a project by name.",
        "bases": [
          "Tool",
          "ToolMarkerDoesNotRequireActiveProject"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, project: str) -> str:",
            "docstring": "Activates the project with the given name.\n\n:param project: the name of a registered project to activate or a path to a project directory",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 12
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 7,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "RemoveProjectTool",
        "module": "serena.tools.config_tools",
        "docstring": "Removes a project from the Serena configuration.",
        "bases": [
          "Tool",
          "ToolMarkerDoesNotRequireActiveProject",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, project_name: str) -> str:",
            "docstring": "Removes a project from the Serena configuration.\n\n:param project_name: Name of the project to remove",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "project_name",
                "annotation": "str",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 43
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 38,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "SwitchModesTool",
        "module": "serena.tools.config_tools",
        "docstring": "Activates modes by providing a list of their names",
        "bases": [
          "Tool",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self, modes: list[str]) -> str:",
            "docstring": "Activates the desired modes, like [\"editing\", \"interactive\"] or [\"planning\", \"one-shot\"]\n\n:param modes: the names of the modes to activate",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              },
              {
                "name": "modes",
                "annotation": "list[str]",
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 58
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 53,
        "is_abstract": false,
        "is_dataclass": false
      },
      {
        "name": "GetCurrentConfigTool",
        "module": "serena.tools.config_tools",
        "docstring": "Prints the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
        "bases": [
          "Tool",
          "ToolMarkerOptional"
        ],
        "methods": [
          {
            "name": "apply",
            "module": "serena.tools.config_tools",
            "signature": "def apply(self) -> str:",
            "docstring": "Print the current configuration of the agent, including the active and available projects, tools, contexts, and modes.",
            "is_method": true,
            "is_async": false,
            "decorators": [],
            "parameters": [
              {
                "name": "self",
                "annotation": null,
                "default": null
              }
            ],
            "return_annotation": "str",
            "line_number": 79
          }
        ],
        "class_variables": [],
        "decorators": [],
        "line_number": 74,
        "is_abstract": false,
        "is_dataclass": false
      }
    ],
    "functions": [
      {
        "name": "get_serena_managed_in_project_dir",
        "module": "serena.config.serena_config",
        "signature": "def get_serena_managed_in_project_dir(project_root: str | Path) -> str:",
        "docstring": null,
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [
          {
            "name": "project_root",
            "annotation": "str | Path",
            "default": null
          }
        ],
        "return_annotation": "str",
        "line_number": 144
      },
      {
        "name": "is_running_in_docker",
        "module": "serena.config.serena_config",
        "signature": "def is_running_in_docker() -> bool:",
        "docstring": "Check if we're running inside a Docker container.",
        "is_method": false,
        "is_async": false,
        "decorators": [],
        "parameters": [],
        "return_annotation": "bool",
        "line_number": 148
      }
    ],
    "constants": [
      "T",
      "SERENA_DEFAULT_PROJECT_FILE",
      "CONFIG_FILE",
      "CONFIG_FILE_DOCKER",
      "IDE_ASSISTANT",
      "DESKTOP_APP",
      "AGENT",
      "INTERACTIVE",
      "EDITING",
      "PLANNING",
      "ONE_SHOT"
    ]
  },
  "exception_hierarchy": {
    "solidlsp.ls_exceptions.SolidLSPException": {
      "name": "SolidLSPException",
      "module": "solidlsp.ls_exceptions",
      "bases": [
        "Exception"
      ],
      "methods": [
        "__init__",
        "is_language_server_terminated",
        "__str__"
      ]
    },
    "solidlsp.ls_utils.InvalidTextLocationError": {
      "name": "InvalidTextLocationError",
      "module": "solidlsp.ls_utils",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "solidlsp.ls_handler.LanguageServerTerminatedException": {
      "name": "LanguageServerTerminatedException",
      "module": "solidlsp.ls_handler",
      "bases": [
        "Exception"
      ],
      "methods": [
        "__init__",
        "__str__"
      ]
    },
    "serena.agent.ProjectNotFoundError": {
      "name": "ProjectNotFoundError",
      "module": "serena.agent",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "serena.util.thread.TimeoutException": {
      "name": "TimeoutException",
      "module": "serena.util.thread",
      "bases": [
        "Exception"
      ],
      "methods": [
        "__init__"
      ]
    },
    "serena.config.serena_config.SerenaConfigError": {
      "name": "SerenaConfigError",
      "module": "serena.config.serena_config",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "serena.tools.jetbrains_plugin_client.SerenaClientError": {
      "name": "SerenaClientError",
      "module": "serena.tools.jetbrains_plugin_client",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "serena.tools.jetbrains_plugin_client.ConnectionError": {
      "name": "ConnectionError",
      "module": "serena.tools.jetbrains_plugin_client",
      "bases": [
        "SerenaClientError"
      ],
      "methods": []
    },
    "serena.tools.jetbrains_plugin_client.APIError": {
      "name": "APIError",
      "module": "serena.tools.jetbrains_plugin_client",
      "bases": [
        "SerenaClientError"
      ],
      "methods": []
    },
    "serena.tools.jetbrains_plugin_client.ServerNotFoundError": {
      "name": "ServerNotFoundError",
      "module": "serena.tools.jetbrains_plugin_client",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "solidlsp.lsp_protocol_handler.server.LSPError": {
      "name": "LSPError",
      "module": "solidlsp.lsp_protocol_handler.server",
      "bases": [
        "Exception"
      ],
      "methods": [
        "__init__",
        "to_lsp",
        "from_lsp",
        "__str__"
      ]
    },
    "solidlsp.lsp_protocol_handler.server.StopLoopException": {
      "name": "StopLoopException",
      "module": "solidlsp.lsp_protocol_handler.server",
      "bases": [
        "Exception"
      ],
      "methods": []
    },
    "solidlsp.lsp_protocol_handler.lsp_types.ErrorCodes": {
      "name": "ErrorCodes",
      "module": "solidlsp.lsp_protocol_handler.lsp_types",
      "bases": [
        "IntEnum"
      ],
      "methods": []
    },
    "solidlsp.lsp_protocol_handler.lsp_types.LSPErrorCodes": {
      "name": "LSPErrorCodes",
      "module": "solidlsp.lsp_protocol_handler.lsp_types",
      "bases": [
        "IntEnum"
      ],
      "methods": []
    },
    "solidlsp.lsp_protocol_handler.lsp_types.InitializeError": {
      "name": "InitializeError",
      "module": "solidlsp.lsp_protocol_handler.lsp_types",
      "bases": [
        "TypedDict"
      ],
      "methods": []
    }
  }
}